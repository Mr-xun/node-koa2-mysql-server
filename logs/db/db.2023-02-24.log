[2023-02-24T08:41:42.420] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-24T08:41:42.422] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T08:41:42.457] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T08:41:42.458] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统用户表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T08:41:42.460] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T08:41:42.462] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统菜单表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T08:41:42.463] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T08:41:42.464] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T08:41:42.465] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T08:41:42.466] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T08:41:42.467] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T08:41:42.468] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统用户表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T08:41:42.470] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T08:41:42.471] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统菜单表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T08:41:42.473] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T08:41:42.474] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T08:41:42.475] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T09:09:30.376] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:09:30.390] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T09:09:30.393] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-24T09:09:39.550] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:09:39.557] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T09:09:39.558] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 110, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 110,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-24T09:12:27.828] [INFO] db - [
  'Executing (default): SELECT `id` AS `menuId`, `menu_name` AS `menuName`, `parent_id` AS `parentId`, `path`, `component`, `perms`, `type`, `order_num` AS `orderNum`, `icon`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_menus` AS `system_menu` WHERE (`system_menu`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],     [Array],
      [Array],     'path',
      'component', 'perms',
      'type',      [Array],
      'icon',      [Array],
      [Array]
    ],
    originalAttributes: [
      'menuId',     'menuName',
      'parentId',   'path',
      'component',  'perms',
      'type',       'orderNum',
      'icon',       'createTime',
      'updateTime'
    ],
    where: '(`system_menu`.`delete_time` IS NULL)',
    tableNames: [ 'system_menus' ],
    type: 'SELECT',
    model: system_menu
  }
]
[2023-02-24T09:18:43.697] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:18:43.698] [INFO] db - [
  'Executing (default): SELECT `id` AS `menuId`, `menu_name` AS `menuName`, `parent_id` AS `parentId`, `path`, `component`, `perms`, `type`, `order_num` AS `orderNum`, `icon`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_menus` AS `system_menu` WHERE (`system_menu`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],     [Array],
      [Array],     'path',
      'component', 'perms',
      'type',      [Array],
      'icon',      [Array],
      [Array]
    ],
    originalAttributes: [
      'menuId',     'menuName',
      'parentId',   'path',
      'component',  'perms',
      'type',       'orderNum',
      'icon',       'createTime',
      'updateTime'
    ],
    where: '(`system_menu`.`delete_time` IS NULL)',
    tableNames: [ 'system_menus' ],
    type: 'SELECT',
    model: system_menu
  }
]
[2023-02-24T09:18:43.708] [INFO] db - [
  "Executing (default): SELECT count(DISTINCT(`system_role`.`id`)) AS `count` FROM `system_roles` AS `system_role` LEFT OUTER JOIN ( `system_role_menus` AS `system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_menus` ON `system_menus`.`id` = `system_menus->system_role_menu`.`menu_id` AND (`system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_role`.`id` = `system_menus->system_role_menu`.`role_id` AND (`system_menus`.`delete_time` IS NULL) WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%');",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: "(`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%')",
    limit: null,
    offset: null,
    distinct: true,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    model: system_role,
    includeNames: [ 'system_menus' ],
    includeMap: { system_menus: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_role,
    topLimit: null,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:18:43.713] [INFO] db - [
  "Executing (default): SELECT `system_role`.*, `system_menus`.`id` AS `system_menus.menuId`, `system_menus`.`id` AS `system_menus.id` FROM (SELECT `system_role`.`id` AS `roleId`, `system_role`.`role_name` AS `roleName`, `system_role`.`remark`, `system_role`.`create_time` AS `createTime`, `system_role`.`update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%') LIMIT 0, 10) AS `system_role` LEFT OUTER JOIN ( `system_role_menus` AS `system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_menus` ON `system_menus`.`id` = `system_menus->system_role_menu`.`menu_id` AND (`system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_role`.`roleId` = `system_menus->system_role_menu`.`role_id` AND (`system_menus`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: "(`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%')",
    limit: 10,
    offset: 0,
    distinct: true,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    hasJoin: true,
    model: system_role,
    includeNames: [ 'system_menus' ],
    includeMap: { system_menus: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_role,
    topLimit: 10,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    subQuery: true,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    tableNames: [
      'system_roles',
      'system_menus',
      'undefined',
      'system_role_menus'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:26:16.559] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:26:16.570] [INFO] db - [
  "Executing (default): SELECT count(DISTINCT(`system_role`.`id`)) AS `count` FROM `system_roles` AS `system_role` LEFT OUTER JOIN ( `system_role_menus` AS `system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_menus` ON `system_menus`.`id` = `system_menus->system_role_menu`.`menu_id` AND (`system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_role`.`id` = `system_menus->system_role_menu`.`role_id` AND (`system_menus`.`delete_time` IS NULL) WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%');",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: "(`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%')",
    limit: null,
    offset: null,
    distinct: true,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    model: system_role,
    includeNames: [ 'system_menus' ],
    includeMap: { system_menus: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_role,
    topLimit: null,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:26:16.572] [INFO] db - [
  "Executing (default): SELECT `system_role`.*, `system_menus`.`id` AS `system_menus.menuId`, `system_menus`.`id` AS `system_menus.id` FROM (SELECT `system_role`.`id` AS `roleId`, `system_role`.`role_name` AS `roleName`, `system_role`.`remark`, `system_role`.`create_time` AS `createTime`, `system_role`.`update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%') LIMIT 0, 10) AS `system_role` LEFT OUTER JOIN ( `system_role_menus` AS `system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_menus` ON `system_menus`.`id` = `system_menus->system_role_menu`.`menu_id` AND (`system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_role`.`roleId` = `system_menus->system_role_menu`.`role_id` AND (`system_menus`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: "(`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%')",
    limit: 10,
    offset: 0,
    distinct: true,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    hasJoin: true,
    model: system_role,
    includeNames: [ 'system_menus' ],
    includeMap: { system_menus: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_role,
    topLimit: 10,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    subQuery: true,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    tableNames: [
      'system_roles',
      'system_menus',
      'undefined',
      'system_role_menus'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:27:00.741] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:27:00.748] [INFO] db - [
  "Executing (default): SELECT count(DISTINCT(`system_role`.`id`)) AS `count` FROM `system_roles` AS `system_role` LEFT OUTER JOIN ( `system_role_menus` AS `system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_menus` ON `system_menus`.`id` = `system_menus->system_role_menu`.`menu_id` AND (`system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_role`.`id` = `system_menus->system_role_menu`.`role_id` AND (`system_menus`.`delete_time` IS NULL) WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%');",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: "(`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%')",
    limit: null,
    offset: null,
    distinct: true,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    model: system_role,
    includeNames: [ 'system_menus' ],
    includeMap: { system_menus: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_role,
    topLimit: null,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:27:00.751] [INFO] db - [
  "Executing (default): SELECT `system_role`.*, `system_menus`.`id` AS `system_menus.menuId`, `system_menus`.`id` AS `system_menus.id` FROM (SELECT `system_role`.`id` AS `roleId`, `system_role`.`role_name` AS `roleName`, `system_role`.`remark`, `system_role`.`create_time` AS `createTime`, `system_role`.`update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%') LIMIT 0, 10) AS `system_role` LEFT OUTER JOIN ( `system_role_menus` AS `system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_menus` ON `system_menus`.`id` = `system_menus->system_role_menu`.`menu_id` AND (`system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_role`.`roleId` = `system_menus->system_role_menu`.`role_id` AND (`system_menus`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: "(`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%')",
    limit: 10,
    offset: 0,
    distinct: true,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    hasJoin: true,
    model: system_role,
    includeNames: [ 'system_menus' ],
    includeMap: { system_menus: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_role,
    topLimit: 10,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    subQuery: true,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    tableNames: [
      'system_roles',
      'system_menus',
      'undefined',
      'system_role_menus'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:27:25.696] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:27:25.706] [INFO] db - [
  "Executing (default): SELECT count(DISTINCT(`system_role`.`id`)) AS `count` FROM `system_roles` AS `system_role` LEFT OUTER JOIN ( `system_role_menus` AS `system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_menus` ON `system_menus`.`id` = `system_menus->system_role_menu`.`menu_id` AND (`system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_role`.`id` = `system_menus->system_role_menu`.`role_id` AND (`system_menus`.`delete_time` IS NULL) WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%');",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: "(`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%')",
    limit: null,
    offset: null,
    distinct: true,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    model: system_role,
    includeNames: [ 'system_menus' ],
    includeMap: { system_menus: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_role,
    topLimit: null,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:27:25.708] [INFO] db - [
  "Executing (default): SELECT `system_role`.*, `system_menus`.`id` AS `system_menus.menuId`, `system_menus`.`id` AS `system_menus.id` FROM (SELECT `system_role`.`id` AS `roleId`, `system_role`.`role_name` AS `roleName`, `system_role`.`remark`, `system_role`.`create_time` AS `createTime`, `system_role`.`update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%') LIMIT 0, 10) AS `system_role` LEFT OUTER JOIN ( `system_role_menus` AS `system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_menus` ON `system_menus`.`id` = `system_menus->system_role_menu`.`menu_id` AND (`system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_role`.`roleId` = `system_menus->system_role_menu`.`role_id` AND (`system_menus`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: "(`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%')",
    limit: 10,
    offset: 0,
    distinct: true,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    hasJoin: true,
    model: system_role,
    includeNames: [ 'system_menus' ],
    includeMap: { system_menus: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_role,
    topLimit: 10,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    subQuery: true,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    tableNames: [
      'system_roles',
      'system_menus',
      'undefined',
      'system_role_menus'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:28:38.577] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:28:38.587] [INFO] db - [
  "Executing (default): SELECT count(DISTINCT(`system_role`.`id`)) AS `count` FROM `system_roles` AS `system_role` LEFT OUTER JOIN ( `system_role_menus` AS `system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_menus` ON `system_menus`.`id` = `system_menus->system_role_menu`.`menu_id` AND (`system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_role`.`id` = `system_menus->system_role_menu`.`role_id` AND (`system_menus`.`delete_time` IS NULL) WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%');",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: "(`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%')",
    limit: null,
    offset: null,
    distinct: true,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    model: system_role,
    includeNames: [ 'system_menus' ],
    includeMap: { system_menus: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_role,
    topLimit: null,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:28:38.590] [INFO] db - [
  "Executing (default): SELECT `system_role`.*, `system_menus`.`id` AS `system_menus.menuId`, `system_menus`.`id` AS `system_menus.id` FROM (SELECT `system_role`.`id` AS `roleId`, `system_role`.`role_name` AS `roleName`, `system_role`.`remark`, `system_role`.`create_time` AS `createTime`, `system_role`.`update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%') LIMIT 0, 10) AS `system_role` LEFT OUTER JOIN ( `system_role_menus` AS `system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_menus` ON `system_menus`.`id` = `system_menus->system_role_menu`.`menu_id` AND (`system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_role`.`roleId` = `system_menus->system_role_menu`.`role_id` AND (`system_menus`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: "(`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%')",
    limit: 10,
    offset: 0,
    distinct: true,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    hasJoin: true,
    model: system_role,
    includeNames: [ 'system_menus' ],
    includeMap: { system_menus: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_role,
    topLimit: 10,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    subQuery: true,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    tableNames: [
      'system_roles',
      'system_menus',
      'undefined',
      'system_role_menus'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:28:54.044] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:28:54.059] [INFO] db - [
  "Executing (default): SELECT count(DISTINCT(`system_role`.`id`)) AS `count` FROM `system_roles` AS `system_role` LEFT OUTER JOIN ( `system_role_menus` AS `system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_menus` ON `system_menus`.`id` = `system_menus->system_role_menu`.`menu_id` AND (`system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_role`.`id` = `system_menus->system_role_menu`.`role_id` AND (`system_menus`.`delete_time` IS NULL) WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%');",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: "(`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%')",
    limit: null,
    offset: null,
    distinct: true,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    model: system_role,
    includeNames: [ 'system_menus' ],
    includeMap: { system_menus: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_role,
    topLimit: null,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:28:54.061] [INFO] db - [
  "Executing (default): SELECT `system_role`.*, `system_menus`.`id` AS `system_menus.menuId`, `system_menus`.`id` AS `system_menus.id` FROM (SELECT `system_role`.`id` AS `roleId`, `system_role`.`role_name` AS `roleName`, `system_role`.`remark`, `system_role`.`create_time` AS `createTime`, `system_role`.`update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%') LIMIT 0, 10) AS `system_role` LEFT OUTER JOIN ( `system_role_menus` AS `system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_menus` ON `system_menus`.`id` = `system_menus->system_role_menu`.`menu_id` AND (`system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_role`.`roleId` = `system_menus->system_role_menu`.`role_id` AND (`system_menus`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: "(`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%')",
    limit: 10,
    offset: 0,
    distinct: true,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    hasJoin: true,
    model: system_role,
    includeNames: [ 'system_menus' ],
    includeMap: { system_menus: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_role,
    topLimit: 10,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    subQuery: true,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    tableNames: [
      'system_roles',
      'system_menus',
      'undefined',
      'system_role_menus'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:29:42.958] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:29:42.968] [INFO] db - [
  "Executing (default): SELECT count(DISTINCT(`system_role`.`id`)) AS `count` FROM `system_roles` AS `system_role` LEFT OUTER JOIN ( `system_role_menus` AS `system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_menus` ON `system_menus`.`id` = `system_menus->system_role_menu`.`menu_id` AND (`system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_role`.`id` = `system_menus->system_role_menu`.`role_id` AND (`system_menus`.`delete_time` IS NULL) WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%');",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: "(`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%')",
    limit: null,
    offset: null,
    distinct: true,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    model: system_role,
    includeNames: [ 'system_menus' ],
    includeMap: { system_menus: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_role,
    topLimit: null,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:29:42.970] [INFO] db - [
  "Executing (default): SELECT `system_role`.*, `system_menus`.`id` AS `system_menus.menuId`, `system_menus`.`id` AS `system_menus.id` FROM (SELECT `system_role`.`id` AS `roleId`, `system_role`.`role_name` AS `roleName`, `system_role`.`remark`, `system_role`.`create_time` AS `createTime`, `system_role`.`update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%') LIMIT 0, 10) AS `system_role` LEFT OUTER JOIN ( `system_role_menus` AS `system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_menus` ON `system_menus`.`id` = `system_menus->system_role_menu`.`menu_id` AND (`system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_role`.`roleId` = `system_menus->system_role_menu`.`role_id` AND (`system_menus`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: "(`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%')",
    limit: 10,
    offset: 0,
    distinct: true,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    hasJoin: true,
    model: system_role,
    includeNames: [ 'system_menus' ],
    includeMap: { system_menus: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_role,
    topLimit: 10,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    subQuery: true,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    tableNames: [
      'system_roles',
      'system_menus',
      'undefined',
      'system_role_menus'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:30:18.892] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:30:18.900] [INFO] db - [
  "Executing (default): SELECT count(DISTINCT(`system_role`.`id`)) AS `count` FROM `system_roles` AS `system_role` LEFT OUTER JOIN ( `system_role_menus` AS `system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_menus` ON `system_menus`.`id` = `system_menus->system_role_menu`.`menu_id` AND (`system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_role`.`id` = `system_menus->system_role_menu`.`role_id` AND (`system_menus`.`delete_time` IS NULL) WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%');",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: "(`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%')",
    limit: null,
    offset: null,
    distinct: true,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    model: system_role,
    includeNames: [ 'system_menus' ],
    includeMap: { system_menus: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_role,
    topLimit: null,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:30:18.902] [INFO] db - [
  "Executing (default): SELECT `system_role`.*, `system_menus`.`id` AS `system_menus.menuId`, `system_menus`.`id` AS `system_menus.id` FROM (SELECT `system_role`.`id` AS `roleId`, `system_role`.`role_name` AS `roleName`, `system_role`.`remark`, `system_role`.`create_time` AS `createTime`, `system_role`.`update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%') LIMIT 0, 10) AS `system_role` LEFT OUTER JOIN ( `system_role_menus` AS `system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_menus` ON `system_menus`.`id` = `system_menus->system_role_menu`.`menu_id` AND (`system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_role`.`roleId` = `system_menus->system_role_menu`.`role_id` AND (`system_menus`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: "(`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%')",
    limit: 10,
    offset: 0,
    distinct: true,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    hasJoin: true,
    model: system_role,
    includeNames: [ 'system_menus' ],
    includeMap: { system_menus: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_role,
    topLimit: 10,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    subQuery: true,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    tableNames: [
      'system_roles',
      'system_menus',
      'undefined',
      'system_role_menus'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:30:47.305] [INFO] db - [
  'Executing (default): SELECT `id` AS `menuId`, `menu_name` AS `menuName`, `parent_id` AS `parentId`, `path`, `component`, `perms`, `type`, `order_num` AS `orderNum`, `icon`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_menus` AS `system_menu` WHERE (`system_menu`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],     [Array],
      [Array],     'path',
      'component', 'perms',
      'type',      [Array],
      'icon',      [Array],
      [Array]
    ],
    originalAttributes: [
      'menuId',     'menuName',
      'parentId',   'path',
      'component',  'perms',
      'type',       'orderNum',
      'icon',       'createTime',
      'updateTime'
    ],
    where: '(`system_menu`.`delete_time` IS NULL)',
    tableNames: [ 'system_menus' ],
    type: 'SELECT',
    model: system_menu
  }
]
[2023-02-24T09:30:49.474] [INFO] db - [
  'Executing (default): SELECT `id` AS `menuId`, `menu_name` AS `menuName`, `parent_id` AS `parentId`, `path`, `component`, `perms`, `type`, `order_num` AS `orderNum`, `icon`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_menus` AS `system_menu` WHERE (`system_menu`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],     [Array],
      [Array],     'path',
      'component', 'perms',
      'type',      [Array],
      'icon',      [Array],
      [Array]
    ],
    originalAttributes: [
      'menuId',     'menuName',
      'parentId',   'path',
      'component',  'perms',
      'type',       'orderNum',
      'icon',       'createTime',
      'updateTime'
    ],
    where: '(`system_menu`.`delete_time` IS NULL)',
    tableNames: [ 'system_menus' ],
    type: 'SELECT',
    model: system_menu
  }
]
[2023-02-24T09:30:49.489] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:30:49.498] [INFO] db - [
  "Executing (default): SELECT count(DISTINCT(`system_role`.`id`)) AS `count` FROM `system_roles` AS `system_role` LEFT OUTER JOIN ( `system_role_menus` AS `system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_menus` ON `system_menus`.`id` = `system_menus->system_role_menu`.`menu_id` AND (`system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_role`.`id` = `system_menus->system_role_menu`.`role_id` AND (`system_menus`.`delete_time` IS NULL) WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%');",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: "(`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%')",
    limit: null,
    offset: null,
    distinct: true,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    model: system_role,
    includeNames: [ 'system_menus' ],
    includeMap: { system_menus: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_role,
    topLimit: null,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:30:49.499] [INFO] db - [
  "Executing (default): SELECT `system_role`.*, `system_menus`.`id` AS `system_menus.menuId`, `system_menus`.`id` AS `system_menus.id` FROM (SELECT `system_role`.`id` AS `roleId`, `system_role`.`role_name` AS `roleName`, `system_role`.`remark`, `system_role`.`create_time` AS `createTime`, `system_role`.`update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%') LIMIT 0, 10) AS `system_role` LEFT OUTER JOIN ( `system_role_menus` AS `system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_menus` ON `system_menus`.`id` = `system_menus->system_role_menu`.`menu_id` AND (`system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_role`.`roleId` = `system_menus->system_role_menu`.`role_id` AND (`system_menus`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: "(`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%')",
    limit: 10,
    offset: 0,
    distinct: true,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    hasJoin: true,
    model: system_role,
    includeNames: [ 'system_menus' ],
    includeMap: { system_menus: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_role,
    topLimit: 10,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    subQuery: true,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    tableNames: [
      'system_roles',
      'system_menus',
      'undefined',
      'system_role_menus'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:31:01.255] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:31:01.261] [INFO] db - [
  'Executing (78fe1438-dede-446d-9293-75984178a8dd): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '78fe1438-dede-446d-9293-75984178a8dd',
      connection: [Connection]
    }
  }
]
[2023-02-24T09:31:01.286] [INFO] db - [
  'Executing (78fe1438-dede-446d-9293-75984178a8dd): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`id` = 46);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '78fe1438-dede-446d-9293-75984178a8dd',
      connection: [Connection]
    },
    where: '(`system_role`.`delete_time` IS NULL AND `system_role`.`id` = 46)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T09:31:01.293] [INFO] db - [
  'Executing (default): UPDATE `system_roles` SET `id`=?,`role_name`=?,`remark`=?,`create_time`=?,`update_time`=? WHERE (`delete_time` IS NULL AND `id` = ?)',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { [Symbol(and)]: [Array] },
    validate: true,
    hooks: true,
    individualHooks: false,
    returning: false,
    force: false,
    sideEffects: true,
    type: 'BULKUPDATE',
    fields: [
      'roleId',
      'roleName',
      'remark',
      'createTime',
      'updateTime',
      'update_time',
      'menuIds'
    ],
    model: system_role,
    skip: undefined,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [
      46,
      '管理员',
      '管理员',
      '2022-11-18 09:43:45',
      '2023-02-24 09:31:01',
      46
    ]
  }
]
[2023-02-24T09:31:01.303] [INFO] db - [
  'Executing (default): SELECT `id` AS `menuId`, `menu_name` AS `menuName`, `parent_id` AS `parentId`, `path`, `component`, `perms`, `type`, `order_num` AS `orderNum`, `icon`, `create_time` AS `createTime`, `update_time` AS `updateTime`, `create_time`, `update_time`, `delete_time` FROM `system_menus` AS `system_menu` WHERE (`system_menu`.`delete_time` IS NULL AND `system_menu`.`id` IN (1, 3, 11, 12, 13, 130, 135, 4, 14, 15, 16, 131, 5, 17, 18, 19, 347, 348, 349, 350, 551, 552, 553, 2, 150, 151, 152, 10, 24, 136, 408, 184, 186, 187, 188, 189, 190, 191, 185));',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: '(`system_menu`.`delete_time` IS NULL AND `system_menu`.`id` IN (1, 3, 11, 12, 13, 130, 135, 4, 14, 15, 16, 131, 5, 17, 18, 19, 347, 348, 349, 350, 551, 552, 553, 2, 150, 151, 152, 10, 24, 136, 408, 184, 186, 187, 188, 189, 190, 191, 185))',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'menuId',      'menuName',
      'parentId',    'path',
      'component',   'perms',
      'type',        'orderNum',
      'icon',        'createTime',
      'updateTime',  'create_time',
      'update_time', 'delete_time'
    ],
    attributes: [
      [Array],       [Array],
      [Array],       'path',
      'component',   'perms',
      'type',        [Array],
      'icon',        [Array],
      [Array],       'create_time',
      'update_time', 'delete_time'
    ],
    tableNames: [ 'system_menus' ],
    type: 'SELECT',
    model: system_menu
  }
]
[2023-02-24T09:31:01.306] [INFO] db - [
  'Executing (78fe1438-dede-446d-9293-75984178a8dd): SELECT `id`, `role_id` AS `roleId`, `menu_id` AS `menuId`, `create_time` AS `createTime`, `update_time` AS `updateTime`, `create_time`, `update_time`, `delete_time` FROM `system_role_menus` AS `system_role_menu` WHERE (`system_role_menu`.`delete_time` IS NULL AND `system_role_menu`.`role_id` = 46);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    force: true,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '78fe1438-dede-446d-9293-75984178a8dd',
      connection: [Connection]
    },
    where: '(`system_role_menu`.`delete_time` IS NULL AND `system_role_menu`.`role_id` = 46)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'roleId',
      'menuId',
      'createTime',
      'updateTime',
      'create_time',
      'update_time',
      'delete_time'
    ],
    attributes: [
      'id',
      [Array],
      [Array],
      [Array],
      [Array],
      'create_time',
      'update_time',
      'delete_time'
    ],
    tableNames: [ 'system_role_menus' ],
    type: 'SELECT',
    model: system_role_menu
  }
]
[2023-02-24T09:31:01.379] [INFO] db - [
  "Executing (78fe1438-dede-446d-9293-75984178a8dd): INSERT INTO `system_role_menus` (`id`,`role_id`,`menu_id`,`create_time`,`update_time`) VALUES (NULL,46,348,'2023-02-24 09:31:01','2023-02-24 09:31:01'),(NULL,46,349,'2023-02-24 09:31:01','2023-02-24 09:31:01'),(NULL,46,350,'2023-02-24 09:31:01','2023-02-24 09:31:01'),(NULL,46,551,'2023-02-24 09:31:01','2023-02-24 09:31:01'),(NULL,46,552,'2023-02-24 09:31:01','2023-02-24 09:31:01'),(NULL,46,553,'2023-02-24 09:31:01','2023-02-24 09:31:01');",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    validate: true,
    hooks: true,
    individualHooks: false,
    ignoreDuplicates: false,
    force: true,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '78fe1438-dede-446d-9293-75984178a8dd',
      connection: [Connection]
    },
    model: system_role_menu,
    returning: true,
    fields: [
      'id',
      'roleId',
      'menuId',
      'createTime',
      'updateTime',
      'create_time',
      'update_time',
      'delete_time'
    ],
    type: 'INSERT'
  }
]
[2023-02-24T09:31:01.383] [INFO] db - [
  'Executing (78fe1438-dede-446d-9293-75984178a8dd): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '78fe1438-dede-446d-9293-75984178a8dd',
      connection: [Connection],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-02-24T09:31:01.397] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'PUT',
      '{"roleId":46,"roleName":"管理员","remark":"管理员","createTime":"2022-11-18 09:43:45","updateTime":"2023-02-23 16:48:02","menuIds":[1,3,11,12,13,130,135,4,14,15,16,131,5,17,18,19,347,348,349,350,551,552,553,2,150,151,152,10,24,136,408,184,186,187,188,189,190,191,185]}',
      '/api/system/role/update',
      '角色修改',
      142,
      '2023-02-24 09:31:01',
      '2023-02-24 09:31:01'
    ]
  }
]
[2023-02-24T09:31:01.441] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:31:01.451] [INFO] db - [
  "Executing (default): SELECT count(DISTINCT(`system_role`.`id`)) AS `count` FROM `system_roles` AS `system_role` LEFT OUTER JOIN ( `system_role_menus` AS `system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_menus` ON `system_menus`.`id` = `system_menus->system_role_menu`.`menu_id` AND (`system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_role`.`id` = `system_menus->system_role_menu`.`role_id` AND (`system_menus`.`delete_time` IS NULL) WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%');",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: "(`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%')",
    limit: null,
    offset: null,
    distinct: true,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    model: system_role,
    includeNames: [ 'system_menus' ],
    includeMap: { system_menus: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_role,
    topLimit: null,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:31:01.452] [INFO] db - [
  "Executing (default): SELECT `system_role`.*, `system_menus`.`id` AS `system_menus.menuId`, `system_menus`.`id` AS `system_menus.id` FROM (SELECT `system_role`.`id` AS `roleId`, `system_role`.`role_name` AS `roleName`, `system_role`.`remark`, `system_role`.`create_time` AS `createTime`, `system_role`.`update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%') LIMIT 0, 10) AS `system_role` LEFT OUTER JOIN ( `system_role_menus` AS `system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_menus` ON `system_menus`.`id` = `system_menus->system_role_menu`.`menu_id` AND (`system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_role`.`roleId` = `system_menus->system_role_menu`.`role_id` AND (`system_menus`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: "(`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%')",
    limit: 10,
    offset: 0,
    distinct: true,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    hasJoin: true,
    model: system_role,
    includeNames: [ 'system_menus' ],
    includeMap: { system_menus: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_role,
    topLimit: 10,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    subQuery: true,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    tableNames: [
      'system_roles',
      'system_menus',
      'undefined',
      'system_role_menus'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:31:05.062] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:31:05.543] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:31:05.550] [INFO] db - [
  "Executing (default): SELECT count(DISTINCT(`system_role`.`id`)) AS `count` FROM `system_roles` AS `system_role` LEFT OUTER JOIN ( `system_role_menus` AS `system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_menus` ON `system_menus`.`id` = `system_menus->system_role_menu`.`menu_id` AND (`system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_role`.`id` = `system_menus->system_role_menu`.`role_id` AND (`system_menus`.`delete_time` IS NULL) WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%');",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: "(`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%')",
    limit: null,
    offset: null,
    distinct: true,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    model: system_role,
    includeNames: [ 'system_menus' ],
    includeMap: { system_menus: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_role,
    topLimit: null,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:31:05.551] [INFO] db - [
  "Executing (default): SELECT `system_role`.*, `system_menus`.`id` AS `system_menus.menuId`, `system_menus`.`id` AS `system_menus.id` FROM (SELECT `system_role`.`id` AS `roleId`, `system_role`.`role_name` AS `roleName`, `system_role`.`remark`, `system_role`.`create_time` AS `createTime`, `system_role`.`update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%') LIMIT 0, 10) AS `system_role` LEFT OUTER JOIN ( `system_role_menus` AS `system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_menus` ON `system_menus`.`id` = `system_menus->system_role_menu`.`menu_id` AND (`system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_role`.`roleId` = `system_menus->system_role_menu`.`role_id` AND (`system_menus`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: "(`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%')",
    limit: 10,
    offset: 0,
    distinct: true,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    hasJoin: true,
    model: system_role,
    includeNames: [ 'system_menus' ],
    includeMap: { system_menus: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_role,
    topLimit: 10,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    subQuery: true,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    tableNames: [
      'system_roles',
      'system_menus',
      'undefined',
      'system_role_menus'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:31:05.554] [INFO] db - [
  'Executing (default): SELECT `id` AS `menuId`, `menu_name` AS `menuName`, `parent_id` AS `parentId`, `path`, `component`, `perms`, `type`, `order_num` AS `orderNum`, `icon`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_menus` AS `system_menu` WHERE (`system_menu`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],     [Array],
      [Array],     'path',
      'component', 'perms',
      'type',      [Array],
      'icon',      [Array],
      [Array]
    ],
    originalAttributes: [
      'menuId',     'menuName',
      'parentId',   'path',
      'component',  'perms',
      'type',       'orderNum',
      'icon',       'createTime',
      'updateTime'
    ],
    where: '(`system_menu`.`delete_time` IS NULL)',
    tableNames: [ 'system_menus' ],
    type: 'SELECT',
    model: system_menu
  }
]
[2023-02-24T09:31:11.654] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:31:11.659] [INFO] db - [
  "Executing (default): SELECT count(DISTINCT(`system_role`.`id`)) AS `count` FROM `system_roles` AS `system_role` LEFT OUTER JOIN ( `system_role_menus` AS `system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_menus` ON `system_menus`.`id` = `system_menus->system_role_menu`.`menu_id` AND (`system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_role`.`id` = `system_menus->system_role_menu`.`role_id` AND (`system_menus`.`delete_time` IS NULL) WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%');",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: "(`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%')",
    limit: null,
    offset: null,
    distinct: true,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    model: system_role,
    includeNames: [ 'system_menus' ],
    includeMap: { system_menus: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_role,
    topLimit: null,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:31:11.660] [INFO] db - [
  "Executing (default): SELECT `system_role`.*, `system_menus`.`id` AS `system_menus.menuId`, `system_menus`.`id` AS `system_menus.id` FROM (SELECT `system_role`.`id` AS `roleId`, `system_role`.`role_name` AS `roleName`, `system_role`.`remark`, `system_role`.`create_time` AS `createTime`, `system_role`.`update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%') LIMIT 0, 10) AS `system_role` LEFT OUTER JOIN ( `system_role_menus` AS `system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_menus` ON `system_menus`.`id` = `system_menus->system_role_menu`.`menu_id` AND (`system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_role`.`roleId` = `system_menus->system_role_menu`.`role_id` AND (`system_menus`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: "(`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%')",
    limit: 10,
    offset: 0,
    distinct: true,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    hasJoin: true,
    model: system_role,
    includeNames: [ 'system_menus' ],
    includeMap: { system_menus: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_role,
    topLimit: 10,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    subQuery: true,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    tableNames: [
      'system_roles',
      'system_menus',
      'undefined',
      'system_role_menus'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:35:00.635] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:35:00.641] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T09:35:00.645] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T09:38:50.002] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:38:50.012] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T09:38:50.015] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T09:39:55.391] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:39:55.400] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T09:39:55.403] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T09:40:48.082] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:40:48.093] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T09:40:48.096] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T09:40:52.939] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:40:52.944] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T09:40:52.946] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T09:40:57.439] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:40:57.444] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T09:40:57.445] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T09:40:59.042] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:40:59.051] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T09:40:59.053] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T09:41:01.872] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:41:01.876] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T09:41:01.877] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T09:41:06.369] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:41:06.374] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T09:41:06.375] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T09:44:36.689] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T09:44:36.690] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T09:44:36.691] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:44:36.707] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T09:44:36.709] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T09:46:15.471] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T09:46:15.472] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T09:46:15.473] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:46:15.484] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T09:46:15.485] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T09:46:19.342] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T09:46:19.344] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T09:46:19.352] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:46:19.361] [INFO] db - [
  "Executing (default): SELECT count(DISTINCT(`system_user`.`id`)) AS `count` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND (`system_user`.`user_name` LIKE '%%' AND `system_user`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`system_user`.`delete_time` IS NULL AND (`system_user`.`user_name` LIKE '%%' AND `system_user`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    attributes: [ [Array] ],
    include: [ [Object] ],
    distinct: true,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: null,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:46:19.361] [INFO] db - [
  "Executing (default): SELECT `system_user`.*, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName` FROM (SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime` FROM `system_users` AS `system_user` WHERE (`system_user`.`delete_time` IS NULL AND (`system_user`.`user_name` LIKE '%%' AND `system_user`.`real_name` LIKE '%%')) LIMIT 0, 10) AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`userId` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`system_user`.`delete_time` IS NULL AND (`system_user`.`user_name` LIKE '%%' AND `system_user`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    include: [ [Object] ],
    distinct: true,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: 10,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    subQuery: true,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:46:25.826] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T09:46:25.827] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T09:46:25.830] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:46:25.845] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T09:46:25.846] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T09:47:42.223] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T09:47:42.224] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T09:47:58.173] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T09:47:58.175] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T09:50:15.215] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T09:50:15.216] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T09:50:38.157] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T09:50:38.158] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T09:51:06.020] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T09:51:06.022] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T09:51:38.306] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T09:51:38.307] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T09:51:46.273] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T09:51:46.280] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T09:52:17.541] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T09:52:17.542] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T09:52:32.352] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T09:52:32.353] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T09:55:05.198] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T09:55:05.199] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T09:55:10.460] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T09:55:10.463] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T09:55:26.123] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T09:55:26.125] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T09:55:26.129] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:55:26.135] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T09:55:26.137] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T09:55:55.201] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T09:55:55.204] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T09:56:21.176] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T09:56:21.178] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T09:56:53.473] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T09:56:53.475] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T09:58:03.063] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T09:58:03.064] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T09:58:24.650] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T09:58:24.652] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T09:59:07.336] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T09:59:07.337] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T09:59:25.696] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T09:59:25.699] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T09:59:36.699] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T09:59:36.701] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T09:59:45.083] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:59:45.089] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`type_code` = 'GENDER') LIMIT 1;",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`type_code` = 'GENDER')",
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T09:59:45.092] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`type_name` = '性别') LIMIT 1;",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`type_name` = '性别')",
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T09:59:45.097] [INFO] db - [
  'Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 2);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: '(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 2)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T09:59:45.101] [INFO] db - [
  'Executing (default): UPDATE `basic_enum_types` SET `id`=?,`type_code`=?,`type_name`=?,`remark`=?,`create_time`=?,`update_time`=? WHERE (`delete_time` IS NULL AND `id` = ?)',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { [Symbol(and)]: [Array] },
    validate: true,
    hooks: true,
    individualHooks: false,
    returning: false,
    force: false,
    sideEffects: true,
    type: 'BULKUPDATE',
    fields: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime',
      'update_time'
    ],
    model: basic_enum_type,
    skip: undefined,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [
      2,
      'GENDER',
      '性别',
      '性别',
      '2023-02-23 10:56:08',
      '2023-02-24 09:59:45',
      2
    ]
  }
]
[2023-02-24T09:59:45.116] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'PUT',
      '{"typeId":2,"typeCode":"GENDER","typeName":"性别","remark":"性别","createTime":"2023-02-23 10:56:08","updateTime":"2023-02-23 10:56:08"}',
      '/api/basic/enumType/update',
      '枚举类型修改',
      34,
      '2023-02-24 09:59:45',
      '2023-02-24 09:59:45'
    ]
  }
]
[2023-02-24T09:59:45.151] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:59:45.157] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T09:59:45.159] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T09:59:51.945] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:59:51.952] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`type_code` = 'GENDER') LIMIT 1;",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`type_code` = 'GENDER')",
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T09:59:51.955] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`type_name` = '性别') LIMIT 1;",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`type_name` = '性别')",
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T09:59:51.957] [INFO] db - [
  'Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 2);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: '(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 2)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T09:59:51.961] [INFO] db - [
  'Executing (default): UPDATE `basic_enum_types` SET `id`=?,`type_code`=?,`type_name`=?,`remark`=?,`create_time`=?,`update_time`=? WHERE (`delete_time` IS NULL AND `id` = ?)',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { [Symbol(and)]: [Array] },
    validate: true,
    hooks: true,
    individualHooks: false,
    returning: false,
    force: false,
    sideEffects: true,
    type: 'BULKUPDATE',
    fields: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime',
      'update_time'
    ],
    model: basic_enum_type,
    skip: undefined,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [
      2,
      'GENDER',
      '性别',
      '性别1',
      '2023-02-23 10:56:08',
      '2023-02-24 09:59:51',
      2
    ]
  }
]
[2023-02-24T09:59:51.967] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'PUT',
      '{"typeId":2,"typeCode":"GENDER","typeName":"性别","remark":"性别1","createTime":"2023-02-23 10:56:08","updateTime":"2023-02-24 09:59:45"}',
      '/api/basic/enumType/update',
      '枚举类型修改',
      23,
      '2023-02-24 09:59:51',
      '2023-02-24 09:59:51'
    ]
  }
]
[2023-02-24T09:59:51.996] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T09:59:52.000] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T09:59:52.002] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T10:00:02.422] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T10:00:02.426] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`type_code` = 'GENDER') LIMIT 1;",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`type_code` = 'GENDER')",
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T10:00:02.428] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`type_name` = '性别') LIMIT 1;",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`type_name` = '性别')",
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T10:00:02.430] [INFO] db - [
  'Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 2);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: '(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 2)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T10:00:02.431] [INFO] db - [
  'Executing (default): UPDATE `basic_enum_types` SET `id`=?,`type_code`=?,`type_name`=?,`remark`=?,`create_time`=?,`update_time`=? WHERE (`delete_time` IS NULL AND `id` = ?)',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { [Symbol(and)]: [Array] },
    validate: true,
    hooks: true,
    individualHooks: false,
    returning: false,
    force: false,
    sideEffects: true,
    type: 'BULKUPDATE',
    fields: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime',
      'update_time'
    ],
    model: basic_enum_type,
    skip: undefined,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [
      2,
      'GENDER',
      '性别',
      '性别',
      '2023-02-23 10:56:08',
      '2023-02-24 10:00:02',
      2
    ]
  }
]
[2023-02-24T10:00:02.437] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'PUT',
      '{"typeId":2,"typeCode":"GENDER","typeName":"性别","remark":"性别","createTime":"2023-02-23 10:56:08","updateTime":"2023-02-24 09:59:51"}',
      '/api/basic/enumType/update',
      '枚举类型修改',
      17,
      '2023-02-24 10:00:02',
      '2023-02-24 10:00:02'
    ]
  }
]
[2023-02-24T10:00:02.468] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T10:00:02.472] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T10:00:02.473] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T10:00:08.996] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T10:00:09.001] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`type_code` = 'GENDER1') LIMIT 1;",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`type_code` = 'GENDER1')",
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T10:00:09.004] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`type_name` = '性别') LIMIT 1;",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`type_name` = '性别')",
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T10:00:09.006] [INFO] db - [
  'Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 2);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: '(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 2)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T10:00:09.009] [INFO] db - [
  'Executing (default): UPDATE `basic_enum_types` SET `id`=?,`type_code`=?,`type_name`=?,`remark`=?,`create_time`=?,`update_time`=? WHERE (`delete_time` IS NULL AND `id` = ?)',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { [Symbol(and)]: [Array] },
    validate: true,
    hooks: true,
    individualHooks: false,
    returning: false,
    force: false,
    sideEffects: true,
    type: 'BULKUPDATE',
    fields: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime',
      'update_time'
    ],
    model: basic_enum_type,
    skip: undefined,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [
      2,
      'GENDER1',
      '性别',
      '性别',
      '2023-02-23 10:56:08',
      '2023-02-24 10:00:09',
      2
    ]
  }
]
[2023-02-24T10:00:09.016] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'PUT',
      '{"typeId":2,"typeCode":"GENDER1","typeName":"性别","remark":"性别","createTime":"2023-02-23 10:56:08","updateTime":"2023-02-24 10:00:02"}',
      '/api/basic/enumType/update',
      '枚举类型修改',
      21,
      '2023-02-24 10:00:09',
      '2023-02-24 10:00:09'
    ]
  }
]
[2023-02-24T10:00:09.043] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T10:00:09.048] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T10:00:09.049] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T10:00:12.311] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T10:00:12.315] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`type_code` = 'GENDER') LIMIT 1;",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`type_code` = 'GENDER')",
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T10:00:12.317] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`type_name` = '性别') LIMIT 1;",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`type_name` = '性别')",
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T10:00:12.319] [INFO] db - [
  'Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 2);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: '(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 2)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T10:00:12.322] [INFO] db - [
  'Executing (default): UPDATE `basic_enum_types` SET `id`=?,`type_code`=?,`type_name`=?,`remark`=?,`create_time`=?,`update_time`=? WHERE (`delete_time` IS NULL AND `id` = ?)',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { [Symbol(and)]: [Array] },
    validate: true,
    hooks: true,
    individualHooks: false,
    returning: false,
    force: false,
    sideEffects: true,
    type: 'BULKUPDATE',
    fields: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime',
      'update_time'
    ],
    model: basic_enum_type,
    skip: undefined,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [
      2,
      'GENDER',
      '性别',
      '性别',
      '2023-02-23 10:56:08',
      '2023-02-24 10:00:12',
      2
    ]
  }
]
[2023-02-24T10:00:12.329] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'PUT',
      '{"typeId":2,"typeCode":"GENDER","typeName":"性别","remark":"性别","createTime":"2023-02-23 10:56:08","updateTime":"2023-02-24 10:00:09"}',
      '/api/basic/enumType/update',
      '枚举类型修改',
      19,
      '2023-02-24 10:00:12',
      '2023-02-24 10:00:12'
    ]
  }
]
[2023-02-24T10:00:12.356] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T10:00:12.360] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T10:00:12.361] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T10:21:55.171] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T10:21:55.172] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T10:21:55.173] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T10:21:55.183] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T10:21:55.184] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T10:25:32.370] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T10:25:32.377] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`type_code` = 'UNIT') LIMIT 1;",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`type_code` = 'UNIT')",
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T10:25:32.382] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`type_name` = '单位') LIMIT 1;",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`type_name` = '单位')",
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T10:25:32.385] [INFO] db - [
  'Executing (default): INSERT INTO `basic_enum_types` (`id`,`type_code`,`type_name`,`remark`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime',
      'create_time',
      'update_time',
      'delete_time'
    ],
    defaultFields: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime',
      'create_time',
      'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: basic_enum_type {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: basic_enum_type,
    bind: [
      'UNIT',
      '单位',
      '单位',
      '2023-02-24 10:25:32',
      '2023-02-24 10:25:32'
    ]
  }
]
[2023-02-24T10:25:32.392] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'POST',
      '{"typeCode":"UNIT","typeName":"单位","remark":"单位"}',
      '/api/basic/enumType/create',
      '枚举类型创建',
      27,
      '2023-02-24 10:25:32',
      '2023-02-24 10:25:32'
    ]
  }
]
[2023-02-24T10:25:32.429] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T10:25:32.434] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T10:25:32.436] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T10:25:42.576] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`url`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'DELETE',
      '/api/basic/enumType/delete/',
      1,
      '2023-02-24 10:25:42',
      '2023-02-24 10:25:42'
    ]
  }
]
[2023-02-24T10:26:08.755] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T10:26:08.758] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T10:26:08.766] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T10:26:08.774] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T10:26:08.776] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T10:26:11.028] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T10:26:11.033] [INFO] db - [
  'Executing (32085d50-046a-41d3-8e8c-e476c858868a): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '32085d50-046a-41d3-8e8c-e476c858868a',
      connection: [Connection]
    }
  }
]
[2023-02-24T10:26:11.036] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` IN ('3'));",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` IN ('3'))",
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T10:26:11.042] [INFO] db - [
  "Executing (default): UPDATE `basic_enum_types` SET `delete_time`=? WHERE `delete_time` IS NULL AND `id` IN ('3')",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { id: [Array] },
    attributes: { exclude: [Array] },
    hooks: true,
    individualHooks: false,
    force: false,
    cascade: false,
    restartIdentity: false,
    type: 'BULKUPDATE',
    model: basic_enum_type,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [ '2023-02-24 10:26:11' ]
  }
]
[2023-02-24T10:26:11.042] [INFO] db - [
  'Executing (32085d50-046a-41d3-8e8c-e476c858868a): SELECT `id` AS `enumId`, `enum_code` AS `enumCode`, `enum_name` AS `enumName`, `shorthand_code` AS `shorthandCode`, `create_time` AS `createTime`, `update_time` AS `updateTime`, `create_time`, `update_time`, `delete_time`, `basic_enum_type_type_id` AS `basicEnumTypeTypeId` FROM `basic_enums` AS `basic_enum` WHERE (`basic_enum`.`delete_time` IS NULL AND `basic_enum`.`basic_enum_type_type_id` = 3);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    force: true,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '32085d50-046a-41d3-8e8c-e476c858868a',
      connection: [Connection]
    },
    scope: false,
    where: '(`basic_enum`.`delete_time` IS NULL AND `basic_enum`.`basic_enum_type_type_id` = 3)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime',
      'create_time',
      'update_time',
      'delete_time',
      'basicEnumTypeTypeId'
    ],
    attributes: [
      [Array],       [Array],
      [Array],       [Array],
      [Array],       [Array],
      'create_time', 'update_time',
      'delete_time', [Array]
    ],
    tableNames: [ 'basic_enums' ],
    type: 'SELECT',
    model: basic_enum
  }
]
[2023-02-24T10:26:11.105] [INFO] db - [
  'Executing (32085d50-046a-41d3-8e8c-e476c858868a): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '32085d50-046a-41d3-8e8c-e476c858868a',
      connection: [Connection],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-02-24T10:26:11.107] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'DELETE',
      '{"ids":"3"}',
      '/api/basic/enumType/delete/3',
      '枚举类型删除',
      80,
      '2023-02-24 10:26:11',
      '2023-02-24 10:26:11'
    ]
  }
]
[2023-02-24T10:26:11.130] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T10:26:11.135] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T10:26:11.136] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T10:26:25.454] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T10:26:25.459] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`type_code` = 'UNIT') LIMIT 1;",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`type_code` = 'UNIT')",
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T10:26:25.463] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`type_name` = '单位') LIMIT 1;",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`type_name` = '单位')",
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T10:26:25.465] [INFO] db - [
  'Executing (default): INSERT INTO `basic_enum_types` (`id`,`type_code`,`type_name`,`remark`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime',
      'create_time',
      'update_time',
      'delete_time'
    ],
    defaultFields: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime',
      'create_time',
      'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: basic_enum_type {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: basic_enum_type,
    bind: [
      'UNIT',
      '单位',
      '单位',
      '2023-02-24 10:26:25',
      '2023-02-24 10:26:25'
    ]
  }
]
[2023-02-24T10:26:25.472] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'POST',
      '{"typeCode":"UNIT","typeName":"单位","remark":"单位"}',
      '/api/basic/enumType/create',
      '枚举类型创建',
      19,
      '2023-02-24 10:26:25',
      '2023-02-24 10:26:25'
    ]
  }
]
[2023-02-24T10:26:25.503] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T10:26:25.508] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T10:26:25.509] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T10:29:29.995] [INFO] db - [
  'Executing (default): SELECT `id` AS `menuId`, `menu_name` AS `menuName`, `parent_id` AS `parentId`, `path`, `component`, `perms`, `type`, `order_num` AS `orderNum`, `icon`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_menus` AS `system_menu` WHERE (`system_menu`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],     [Array],
      [Array],     'path',
      'component', 'perms',
      'type',      [Array],
      'icon',      [Array],
      [Array]
    ],
    originalAttributes: [
      'menuId',     'menuName',
      'parentId',   'path',
      'component',  'perms',
      'type',       'orderNum',
      'icon',       'createTime',
      'updateTime'
    ],
    where: '(`system_menu`.`delete_time` IS NULL)',
    tableNames: [ 'system_menus' ],
    type: 'SELECT',
    model: system_menu
  }
]
[2023-02-24T10:29:29.996] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T10:29:30.013] [INFO] db - [
  "Executing (default): SELECT count(DISTINCT(`system_role`.`id`)) AS `count` FROM `system_roles` AS `system_role` LEFT OUTER JOIN ( `system_role_menus` AS `system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_menus` ON `system_menus`.`id` = `system_menus->system_role_menu`.`menu_id` AND (`system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_role`.`id` = `system_menus->system_role_menu`.`role_id` AND (`system_menus`.`delete_time` IS NULL) WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%');",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: "(`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%')",
    limit: null,
    offset: null,
    distinct: true,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    model: system_role,
    includeNames: [ 'system_menus' ],
    includeMap: { system_menus: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_role,
    topLimit: null,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T10:29:30.014] [INFO] db - [
  "Executing (default): SELECT `system_role`.*, `system_menus`.`id` AS `system_menus.menuId`, `system_menus`.`id` AS `system_menus.id` FROM (SELECT `system_role`.`id` AS `roleId`, `system_role`.`role_name` AS `roleName`, `system_role`.`remark`, `system_role`.`create_time` AS `createTime`, `system_role`.`update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%') LIMIT 0, 10) AS `system_role` LEFT OUTER JOIN ( `system_role_menus` AS `system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_menus` ON `system_menus`.`id` = `system_menus->system_role_menu`.`menu_id` AND (`system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_role`.`roleId` = `system_menus->system_role_menu`.`role_id` AND (`system_menus`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: "(`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%')",
    limit: 10,
    offset: 0,
    distinct: true,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    hasJoin: true,
    model: system_role,
    includeNames: [ 'system_menus' ],
    includeMap: { system_menus: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_role,
    topLimit: 10,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    subQuery: true,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    tableNames: [
      'system_roles',
      'system_menus',
      'undefined',
      'system_role_menus'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T10:30:14.665] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T10:30:14.667] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T10:30:14.669] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T10:30:14.677] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T10:30:14.678] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T10:31:38.986] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T10:31:38.991] [INFO] db - [
  'Executing (default): SELECT `id` AS `menuId`, `menu_name` AS `menuName`, `parent_id` AS `parentId`, `path`, `component`, `perms`, `type`, `order_num` AS `orderNum`, `icon`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_menus` AS `system_menu` WHERE (`system_menu`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],     [Array],
      [Array],     'path',
      'component', 'perms',
      'type',      [Array],
      'icon',      [Array],
      [Array]
    ],
    originalAttributes: [
      'menuId',     'menuName',
      'parentId',   'path',
      'component',  'perms',
      'type',       'orderNum',
      'icon',       'createTime',
      'updateTime'
    ],
    where: '(`system_menu`.`delete_time` IS NULL)',
    tableNames: [ 'system_menus' ],
    type: 'SELECT',
    model: system_menu
  }
]
[2023-02-24T10:31:39.000] [INFO] db - [
  "Executing (default): SELECT count(DISTINCT(`system_role`.`id`)) AS `count` FROM `system_roles` AS `system_role` LEFT OUTER JOIN ( `system_role_menus` AS `system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_menus` ON `system_menus`.`id` = `system_menus->system_role_menu`.`menu_id` AND (`system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_role`.`id` = `system_menus->system_role_menu`.`role_id` AND (`system_menus`.`delete_time` IS NULL) WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%');",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: "(`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%')",
    limit: null,
    offset: null,
    distinct: true,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    model: system_role,
    includeNames: [ 'system_menus' ],
    includeMap: { system_menus: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_role,
    topLimit: null,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T10:31:39.010] [INFO] db - [
  "Executing (default): SELECT `system_role`.*, `system_menus`.`id` AS `system_menus.menuId`, `system_menus`.`id` AS `system_menus.id` FROM (SELECT `system_role`.`id` AS `roleId`, `system_role`.`role_name` AS `roleName`, `system_role`.`remark`, `system_role`.`create_time` AS `createTime`, `system_role`.`update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%') LIMIT 0, 10) AS `system_role` LEFT OUTER JOIN ( `system_role_menus` AS `system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_menus` ON `system_menus`.`id` = `system_menus->system_role_menu`.`menu_id` AND (`system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_role`.`roleId` = `system_menus->system_role_menu`.`role_id` AND (`system_menus`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: "(`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%')",
    limit: 10,
    offset: 0,
    distinct: true,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    hasJoin: true,
    model: system_role,
    includeNames: [ 'system_menus' ],
    includeMap: { system_menus: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_role,
    topLimit: 10,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    subQuery: true,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    tableNames: [
      'system_roles',
      'system_menus',
      'undefined',
      'system_role_menus'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T10:31:40.554] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T10:31:40.556] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T10:31:40.560] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T10:31:40.566] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T10:31:40.567] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T10:34:14.935] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T10:34:14.936] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T10:34:14.937] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T10:34:14.944] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T10:34:14.945] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T10:35:22.752] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T10:35:22.753] [INFO] db - [
  'Executing (default): SELECT `id` AS `menuId`, `menu_name` AS `menuName`, `parent_id` AS `parentId`, `path`, `component`, `perms`, `type`, `order_num` AS `orderNum`, `icon`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_menus` AS `system_menu` WHERE (`system_menu`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],     [Array],
      [Array],     'path',
      'component', 'perms',
      'type',      [Array],
      'icon',      [Array],
      [Array]
    ],
    originalAttributes: [
      'menuId',     'menuName',
      'parentId',   'path',
      'component',  'perms',
      'type',       'orderNum',
      'icon',       'createTime',
      'updateTime'
    ],
    where: '(`system_menu`.`delete_time` IS NULL)',
    tableNames: [ 'system_menus' ],
    type: 'SELECT',
    model: system_menu
  }
]
[2023-02-24T10:35:22.758] [INFO] db - [
  "Executing (default): SELECT count(DISTINCT(`system_role`.`id`)) AS `count` FROM `system_roles` AS `system_role` LEFT OUTER JOIN ( `system_role_menus` AS `system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_menus` ON `system_menus`.`id` = `system_menus->system_role_menu`.`menu_id` AND (`system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_role`.`id` = `system_menus->system_role_menu`.`role_id` AND (`system_menus`.`delete_time` IS NULL) WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%');",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: "(`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%')",
    limit: null,
    offset: null,
    distinct: true,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    model: system_role,
    includeNames: [ 'system_menus' ],
    includeMap: { system_menus: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_role,
    topLimit: null,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T10:35:22.760] [INFO] db - [
  "Executing (default): SELECT `system_role`.*, `system_menus`.`id` AS `system_menus.menuId`, `system_menus`.`id` AS `system_menus.id` FROM (SELECT `system_role`.`id` AS `roleId`, `system_role`.`role_name` AS `roleName`, `system_role`.`remark`, `system_role`.`create_time` AS `createTime`, `system_role`.`update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%') LIMIT 0, 10) AS `system_role` LEFT OUTER JOIN ( `system_role_menus` AS `system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_menus` ON `system_menus`.`id` = `system_menus->system_role_menu`.`menu_id` AND (`system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_role`.`roleId` = `system_menus->system_role_menu`.`role_id` AND (`system_menus`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: "(`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%')",
    limit: 10,
    offset: 0,
    distinct: true,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    hasJoin: true,
    model: system_role,
    includeNames: [ 'system_menus' ],
    includeMap: { system_menus: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_role,
    topLimit: 10,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    subQuery: true,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    tableNames: [
      'system_roles',
      'system_menus',
      'undefined',
      'system_role_menus'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T10:35:25.254] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T10:35:25.256] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T10:35:25.261] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T10:35:25.268] [INFO] db - [
  "Executing (default): SELECT count(DISTINCT(`system_user`.`id`)) AS `count` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND (`system_user`.`user_name` LIKE '%%' AND `system_user`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`system_user`.`delete_time` IS NULL AND (`system_user`.`user_name` LIKE '%%' AND `system_user`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    attributes: [ [Array] ],
    include: [ [Object] ],
    distinct: true,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: null,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T10:35:25.269] [INFO] db - [
  "Executing (default): SELECT `system_user`.*, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName` FROM (SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime` FROM `system_users` AS `system_user` WHERE (`system_user`.`delete_time` IS NULL AND (`system_user`.`user_name` LIKE '%%' AND `system_user`.`real_name` LIKE '%%')) LIMIT 0, 10) AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`userId` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`system_user`.`delete_time` IS NULL AND (`system_user`.`user_name` LIKE '%%' AND `system_user`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    include: [ [Object] ],
    distinct: true,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: 10,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    subQuery: true,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T10:35:53.377] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T10:35:53.383] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T10:35:53.394] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T10:35:53.399] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T10:35:53.400] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T10:36:09.022] [INFO] db - [
  'Executing (default): SELECT `id` AS `menuId`, `menu_name` AS `menuName`, `parent_id` AS `parentId`, `path`, `component`, `perms`, `type`, `order_num` AS `orderNum`, `icon`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_menus` AS `system_menu` WHERE (`system_menu`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],     [Array],
      [Array],     'path',
      'component', 'perms',
      'type',      [Array],
      'icon',      [Array],
      [Array]
    ],
    originalAttributes: [
      'menuId',     'menuName',
      'parentId',   'path',
      'component',  'perms',
      'type',       'orderNum',
      'icon',       'createTime',
      'updateTime'
    ],
    where: '(`system_menu`.`delete_time` IS NULL)',
    tableNames: [ 'system_menus' ],
    type: 'SELECT',
    model: system_menu
  }
]
[2023-02-24T10:36:11.705] [INFO] db - [
  'Executing (default): SELECT `id` AS `menuId`, `menu_name` AS `menuName`, `parent_id` AS `parentId`, `path`, `component`, `perms`, `type`, `order_num` AS `orderNum`, `icon`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_menus` AS `system_menu` WHERE (`system_menu`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],     [Array],
      [Array],     'path',
      'component', 'perms',
      'type',      [Array],
      'icon',      [Array],
      [Array]
    ],
    originalAttributes: [
      'menuId',     'menuName',
      'parentId',   'path',
      'component',  'perms',
      'type',       'orderNum',
      'icon',       'createTime',
      'updateTime'
    ],
    where: '(`system_menu`.`delete_time` IS NULL)',
    tableNames: [ 'system_menus' ],
    type: 'SELECT',
    model: system_menu
  }
]
[2023-02-24T10:36:11.719] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T10:36:11.724] [INFO] db - [
  "Executing (default): SELECT count(DISTINCT(`system_role`.`id`)) AS `count` FROM `system_roles` AS `system_role` LEFT OUTER JOIN ( `system_role_menus` AS `system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_menus` ON `system_menus`.`id` = `system_menus->system_role_menu`.`menu_id` AND (`system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_role`.`id` = `system_menus->system_role_menu`.`role_id` AND (`system_menus`.`delete_time` IS NULL) WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%');",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: "(`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%')",
    limit: null,
    offset: null,
    distinct: true,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    model: system_role,
    includeNames: [ 'system_menus' ],
    includeMap: { system_menus: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_role,
    topLimit: null,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T10:36:11.724] [INFO] db - [
  "Executing (default): SELECT `system_role`.*, `system_menus`.`id` AS `system_menus.menuId`, `system_menus`.`id` AS `system_menus.id` FROM (SELECT `system_role`.`id` AS `roleId`, `system_role`.`role_name` AS `roleName`, `system_role`.`remark`, `system_role`.`create_time` AS `createTime`, `system_role`.`update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%') LIMIT 0, 10) AS `system_role` LEFT OUTER JOIN ( `system_role_menus` AS `system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_menus` ON `system_menus`.`id` = `system_menus->system_role_menu`.`menu_id` AND (`system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_role`.`roleId` = `system_menus->system_role_menu`.`role_id` AND (`system_menus`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: "(`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%')",
    limit: 10,
    offset: 0,
    distinct: true,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    hasJoin: true,
    model: system_role,
    includeNames: [ 'system_menus' ],
    includeMap: { system_menus: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_role,
    topLimit: 10,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    subQuery: true,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    tableNames: [
      'system_roles',
      'system_menus',
      'undefined',
      'system_role_menus'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T10:36:50.013] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T10:36:50.016] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T10:36:50.019] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T10:36:50.024] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T10:36:50.025] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T10:36:54.570] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T10:36:54.572] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T10:36:54.575] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T10:36:54.583] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T10:36:54.584] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T10:37:26.501] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T10:37:26.503] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T10:37:26.503] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T10:37:26.510] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T10:37:26.511] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T10:48:08.281] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T10:48:08.282] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T10:48:08.282] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T10:48:08.292] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T10:48:08.294] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T10:50:55.255] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T10:50:55.259] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T10:50:55.259] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T10:50:55.751] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T10:50:55.755] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T10:50:55.756] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T10:50:56.099] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T10:50:56.103] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T10:50:56.104] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T10:50:56.279] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T10:50:56.283] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T10:50:56.284] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T10:50:56.445] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T10:50:56.448] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T10:50:56.449] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T11:03:48.495] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T11:03:48.496] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T11:03:48.497] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:03:48.509] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T11:03:48.510] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T11:06:06.705] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T11:06:06.707] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T11:06:06.707] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:06:06.718] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T11:06:06.719] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T11:08:37.987] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T11:08:37.988] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:08:37.988] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T11:08:37.993] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T11:08:37.994] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T11:09:25.825] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:09:25.828] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T11:09:25.829] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T11:10:14.170] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T11:10:14.172] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:10:14.173] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T11:10:14.178] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T11:10:14.179] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T11:10:33.502] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T11:10:33.503] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T11:10:33.510] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:10:33.515] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T11:10:33.516] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T11:10:34.600] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:10:36.566] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T11:10:36.570] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T11:10:36.574] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:10:36.583] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T11:10:36.583] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T11:10:37.998] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:10:48.557] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T11:10:48.559] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T11:10:48.562] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:10:48.569] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T11:10:48.571] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T11:10:56.060] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:11:47.669] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-24T11:11:47.672] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T11:11:47.704] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T11:11:47.706] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统用户表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T11:11:47.706] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T11:11:47.707] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统菜单表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T11:11:47.708] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T11:11:47.709] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T11:11:47.710] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T11:11:47.711] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T11:11:47.712] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T11:11:47.713] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统用户表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T11:11:47.714] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T11:11:47.714] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T11:11:47.716] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统菜单表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T11:11:47.718] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T11:11:47.719] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T11:11:54.345] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%4' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:12:03.359] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:12:20.290] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:12:21.275] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T11:12:21.283] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T11:12:21.294] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:12:21.309] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T11:12:21.311] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T11:12:21.847] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:13:27.139] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:14:02.717] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:14:03.090] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%4' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:14:03.471] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:14:04.004] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%4' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:14:04.691] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:14:05.374] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%4' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:14:05.800] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:14:06.209] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%4' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:14:06.539] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:14:07.223] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%4' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:14:07.783] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%4' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:14:07.963] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%4' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:14:08.333] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:14:12.930] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:14:12.938] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T11:14:12.939] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T11:14:13.320] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:14:13.327] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T11:14:13.328] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T11:14:14.090] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:14:14.804] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%4' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:14:15.273] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:14:15.786] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%4' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:14:16.428] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:14:16.759] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%4' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:14:17.046] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:14:17.367] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%4' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:15:38.985] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T11:15:38.986] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:15:38.989] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T11:15:39.001] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T11:15:39.002] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T11:15:40.050] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:15:41.319] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:15:41.325] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T11:15:41.326] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T11:15:42.732] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:15:43.605] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:15:43.613] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T11:15:43.614] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T11:15:44.803] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:15:46.117] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%4' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:15:46.682] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:15:47.280] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%4' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:15:48.371] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:15:48.377] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T11:15:48.377] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T11:15:49.373] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:15:49.379] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T11:15:49.380] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T11:15:50.074] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:15:50.839] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:15:50.844] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T11:15:50.845] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T11:23:21.273] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T11:23:21.275] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T11:23:21.276] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:23:21.284] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T11:23:21.285] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T11:24:54.625] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T11:24:54.627] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T11:24:54.630] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T11:24:54.634] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T11:24:54.635] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T13:00:39.824] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T13:00:39.825] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:00:39.826] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T13:00:39.831] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T13:00:39.832] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T13:10:06.189] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T13:10:06.190] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T13:10:06.191] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:10:06.200] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T13:10:06.201] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T13:10:22.796] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T13:10:22.798] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T13:10:22.801] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:10:22.810] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T13:10:22.811] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T13:14:44.506] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T13:14:44.507] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T13:14:44.509] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:14:44.517] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T13:14:44.518] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T13:20:30.217] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:20:30.222] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T13:20:30.224] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T13:20:44.745] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:20:44.751] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T13:20:44.751] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T13:20:53.363] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:23:27.404] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:23:27.410] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T13:23:27.411] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T13:25:38.888] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:25:38.893] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T13:25:38.894] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T13:25:49.630] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:25:49.634] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T13:25:49.635] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T13:26:51.697] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:26:51.704] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T13:26:51.705] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T13:26:53.768] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:26:57.487] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:26:57.495] [INFO] db - [
  'Executing (default): SELECT `basic_enum_type`.`id` AS `typeId`, `basic_enum_type`.`type_code` AS `typeCode`, `basic_enum_type`.`type_name` AS `typeName`, `basic_enum_type`.`remark`, `basic_enum_type`.`create_time` AS `createTime`, `basic_enum_type`.`update_time` AS `updateTime`, `basic_enums`.`id` AS `basic_enums.enumId`, `basic_enums`.`enum_code` AS `basic_enums.enumCode`, `basic_enums`.`enum_name` AS `basic_enums.enumName`, `basic_enums`.`shorthand_code` AS `basic_enums.shorthandCode`, `basic_enums`.`create_time` AS `basic_enums.createTime`, `basic_enums`.`update_time` AS `basic_enums.updateTime`, `basic_enums`.`basic_enum_type_type_id` AS `basic_enums.basicEnumTypeTypeId` FROM `basic_enum_types` AS `basic_enum_type` LEFT OUTER JOIN `basic_enums` AS `basic_enums` ON `basic_enum_type`.`id` = `basic_enums`.`basic_enum_type_type_id` AND (`basic_enums`.`delete_time` IS NULL) WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 2);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: '(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 2)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum_type,
    includeNames: [ 'basic_enums' ],
    includeMap: { basic_enums: [Object] },
    hasSingleAssociation: false,
    hasMultiAssociation: true,
    topModel: basic_enum_type,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [ 'basic_enum_types', 'basic_enums' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:26:57.499] [INFO] db - [
  'Executing (default): SELECT `id` AS `enumId`, `enum_code` AS `enumCode`, `enum_name` AS `enumName`, `shorthand_code` AS `shorthandCode`, `create_time` AS `createTime`, `update_time` AS `updateTime`, `basic_enum_type_type_id` AS `basicEnumTypeTypeId` FROM `basic_enums` AS `basic_enum` WHERE (`basic_enum`.`delete_time` IS NULL AND `basic_enum`.`id` = 4);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: '(`basic_enum`.`delete_time` IS NULL AND `basic_enum`.`id` = 4)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array], [Array],
      [Array], [Array],
      [Array], [Array],
      [Array]
    ],
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime',
      'basicEnumTypeTypeId'
    ],
    tableNames: [ 'basic_enums' ],
    type: 'SELECT',
    model: basic_enum
  }
]
[2023-02-24T13:26:57.508] [INFO] db - [
  'Executing (default): UPDATE `basic_enums` SET `id`=?,`enum_code`=?,`enum_name`=?,`shorthand_code`=?,`create_time`=?,`update_time`=? WHERE (`delete_time` IS NULL AND `id` = ?)',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { [Symbol(and)]: [Array] },
    validate: true,
    hooks: true,
    individualHooks: false,
    returning: false,
    force: false,
    sideEffects: true,
    type: 'BULKUPDATE',
    fields: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime',
      'update_time',
      'typeId',
      'typeCode',
      'typeName'
    ],
    model: basic_enum,
    skip: undefined,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [
      4,
      '1',
      '男',
      'nan',
      '2023-02-23 10:57:23',
      '2023-02-24 13:26:57',
      4
    ]
  }
]
[2023-02-24T13:26:57.527] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'PUT',
      '{"enumId":4,"enumCode":"1","enumName":"男","shorthandCode":"nan","createTime":"2023-02-23 10:57:23","updateTime":"2023-02-23 10:57:23","typeId":2,"typeCode":"GENDER","typeName":"性别"}',
      '/api/basic/enum/update',
      '枚举字典修改',
      39,
      '2023-02-24 13:26:57',
      '2023-02-24 13:26:57'
    ]
  }
]
[2023-02-24T13:27:59.635] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:29:06.453] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:29:06.461] [INFO] db - [
  'Executing (default): SELECT `basic_enum_type`.`id` AS `typeId`, `basic_enum_type`.`type_code` AS `typeCode`, `basic_enum_type`.`type_name` AS `typeName`, `basic_enum_type`.`remark`, `basic_enum_type`.`create_time` AS `createTime`, `basic_enum_type`.`update_time` AS `updateTime`, `basic_enums`.`id` AS `basic_enums.enumId`, `basic_enums`.`enum_code` AS `basic_enums.enumCode`, `basic_enums`.`enum_name` AS `basic_enums.enumName`, `basic_enums`.`shorthand_code` AS `basic_enums.shorthandCode`, `basic_enums`.`create_time` AS `basic_enums.createTime`, `basic_enums`.`update_time` AS `basic_enums.updateTime`, `basic_enums`.`basic_enum_type_type_id` AS `basic_enums.basicEnumTypeTypeId` FROM `basic_enum_types` AS `basic_enum_type` LEFT OUTER JOIN `basic_enums` AS `basic_enums` ON `basic_enum_type`.`id` = `basic_enums`.`basic_enum_type_type_id` AND (`basic_enums`.`delete_time` IS NULL) WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 2);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: '(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 2)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum_type,
    includeNames: [ 'basic_enums' ],
    includeMap: { basic_enums: [Object] },
    hasSingleAssociation: false,
    hasMultiAssociation: true,
    topModel: basic_enum_type,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [ 'basic_enum_types', 'basic_enums' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:29:06.463] [INFO] db - [
  'Executing (default): SELECT `id` AS `enumId`, `enum_code` AS `enumCode`, `enum_name` AS `enumName`, `shorthand_code` AS `shorthandCode`, `create_time` AS `createTime`, `update_time` AS `updateTime`, `basic_enum_type_type_id` AS `basicEnumTypeTypeId` FROM `basic_enums` AS `basic_enum` WHERE (`basic_enum`.`delete_time` IS NULL AND `basic_enum`.`id` = 4);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: '(`basic_enum`.`delete_time` IS NULL AND `basic_enum`.`id` = 4)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array], [Array],
      [Array], [Array],
      [Array], [Array],
      [Array]
    ],
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime',
      'basicEnumTypeTypeId'
    ],
    tableNames: [ 'basic_enums' ],
    type: 'SELECT',
    model: basic_enum
  }
]
[2023-02-24T13:29:06.466] [INFO] db - [
  'Executing (default): UPDATE `basic_enums` SET `id`=?,`enum_code`=?,`enum_name`=?,`shorthand_code`=?,`create_time`=?,`update_time`=? WHERE (`delete_time` IS NULL AND `id` = ?)',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { [Symbol(and)]: [Array] },
    validate: true,
    hooks: true,
    individualHooks: false,
    returning: false,
    force: false,
    sideEffects: true,
    type: 'BULKUPDATE',
    fields: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime',
      'update_time',
      'typeId',
      'typeCode',
      'typeName'
    ],
    model: basic_enum,
    skip: undefined,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [
      4,
      '1',
      '男',
      'nan1',
      '2023-02-23 10:57:23',
      '2023-02-24 13:29:06',
      4
    ]
  }
]
[2023-02-24T13:29:06.482] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'PUT',
      '{"enumId":4,"enumCode":"1","enumName":"男","shorthandCode":"nan1","createTime":"2023-02-23 10:57:23","updateTime":"2023-02-24 13:26:57","typeId":2,"typeCode":"GENDER","typeName":"性别"}',
      '/api/basic/enum/update',
      '枚举字典修改',
      35,
      '2023-02-24 13:29:06',
      '2023-02-24 13:29:06'
    ]
  }
]
[2023-02-24T13:29:14.905] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%4' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:29:15.279] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:31:58.041] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:31:58.051] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T13:31:58.054] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T13:31:58.735] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:31:58.743] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T13:31:58.745] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T13:31:59.567] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:32:02.479] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:32:55.026] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:32:55.032] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T13:32:55.035] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T13:32:56.289] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:33:14.737] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:33:14.741] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T13:33:14.742] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T13:33:18.072] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:33:23.974] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:33:23.981] [INFO] db - [
  'Executing (default): SELECT `basic_enum_type`.`id` AS `typeId`, `basic_enum_type`.`type_code` AS `typeCode`, `basic_enum_type`.`type_name` AS `typeName`, `basic_enum_type`.`remark`, `basic_enum_type`.`create_time` AS `createTime`, `basic_enum_type`.`update_time` AS `updateTime`, `basic_enums`.`id` AS `basic_enums.enumId`, `basic_enums`.`enum_code` AS `basic_enums.enumCode`, `basic_enums`.`enum_name` AS `basic_enums.enumName`, `basic_enums`.`shorthand_code` AS `basic_enums.shorthandCode`, `basic_enums`.`create_time` AS `basic_enums.createTime`, `basic_enums`.`update_time` AS `basic_enums.updateTime`, `basic_enums`.`basic_enum_type_type_id` AS `basic_enums.basicEnumTypeTypeId` FROM `basic_enum_types` AS `basic_enum_type` LEFT OUTER JOIN `basic_enums` AS `basic_enums` ON `basic_enum_type`.`id` = `basic_enums`.`basic_enum_type_type_id` AND (`basic_enums`.`delete_time` IS NULL) WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 2);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: '(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 2)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum_type,
    includeNames: [ 'basic_enums' ],
    includeMap: { basic_enums: [Object] },
    hasSingleAssociation: false,
    hasMultiAssociation: true,
    topModel: basic_enum_type,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [ 'basic_enum_types', 'basic_enums' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:33:23.983] [INFO] db - [
  'Executing (default): SELECT `id` AS `enumId`, `enum_code` AS `enumCode`, `enum_name` AS `enumName`, `shorthand_code` AS `shorthandCode`, `create_time` AS `createTime`, `update_time` AS `updateTime`, `basic_enum_type_type_id` AS `basicEnumTypeTypeId` FROM `basic_enums` AS `basic_enum` WHERE (`basic_enum`.`delete_time` IS NULL AND `basic_enum`.`id` = 4);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: '(`basic_enum`.`delete_time` IS NULL AND `basic_enum`.`id` = 4)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array], [Array],
      [Array], [Array],
      [Array], [Array],
      [Array]
    ],
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime',
      'basicEnumTypeTypeId'
    ],
    tableNames: [ 'basic_enums' ],
    type: 'SELECT',
    model: basic_enum
  }
]
[2023-02-24T13:33:23.986] [INFO] db - [
  'Executing (default): UPDATE `basic_enums` SET `id`=?,`enum_code`=?,`enum_name`=?,`shorthand_code`=?,`create_time`=?,`update_time`=? WHERE (`delete_time` IS NULL AND `id` = ?)',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { [Symbol(and)]: [Array] },
    validate: true,
    hooks: true,
    individualHooks: false,
    returning: false,
    force: false,
    sideEffects: true,
    type: 'BULKUPDATE',
    fields: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime',
      'update_time',
      'typeId',
      'typeCode',
      'typeName'
    ],
    model: basic_enum,
    skip: undefined,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [
      4,
      '1',
      '男',
      'nan',
      '2023-02-23 10:57:23',
      '2023-02-24 13:33:23',
      4
    ]
  }
]
[2023-02-24T13:33:23.992] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'PUT',
      '{"enumId":4,"enumCode":"1","enumName":"男","shorthandCode":"nan","createTime":"2023-02-23 10:57:23","updateTime":"2023-02-24 13:29:06","typeId":2,"typeCode":"GENDER","typeName":"性别"}',
      '/api/basic/enum/update',
      '枚举字典修改',
      18,
      '2023-02-24 13:33:23',
      '2023-02-24 13:33:23'
    ]
  }
]
[2023-02-24T13:33:24.018] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:34:25.449] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:34:25.454] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T13:34:25.456] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T13:34:26.413] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:34:38.690] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:34:38.757] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'POST',
      '{"enumCode":"3","enumName":"未知","shorthandCode":""}',
      '/api/basic/enum/create',
      68,
      '2023-02-24 13:34:38',
      '2023-02-24 13:34:38'
    ]
  }
]
[2023-02-24T13:34:40.364] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:34:40.370] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'POST',
      '{"enumCode":"3","enumName":"未知","shorthandCode":""}',
      '/api/basic/enum/create',
      6,
      '2023-02-24 13:34:40',
      '2023-02-24 13:34:40'
    ]
  }
]
[2023-02-24T13:34:40.980] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:34:40.986] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'POST',
      '{"enumCode":"3","enumName":"未知","shorthandCode":""}',
      '/api/basic/enum/create',
      6,
      '2023-02-24 13:34:40',
      '2023-02-24 13:34:40'
    ]
  }
]
[2023-02-24T13:34:41.526] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:34:41.532] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'POST',
      '{"enumCode":"3","enumName":"未知","shorthandCode":""}',
      '/api/basic/enum/create',
      6,
      '2023-02-24 13:34:41',
      '2023-02-24 13:34:41'
    ]
  }
]
[2023-02-24T13:34:44.852] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:34:44.861] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'POST',
      '{"enumCode":"3","enumName":"未知","shorthandCode":""}',
      '/api/basic/enum/create',
      11,
      '2023-02-24 13:34:44',
      '2023-02-24 13:34:44'
    ]
  }
]
[2023-02-24T13:35:58.454] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:35:58.459] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T13:35:58.461] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T13:36:05.409] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:36:24.642] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:36:25.289] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:36:25.705] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%4' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:36:40.973] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:36:40.977] [INFO] db - [
  'Executing (default): SELECT `basic_enum_type`.`id` AS `typeId`, `basic_enum_type`.`type_code` AS `typeCode`, `basic_enum_type`.`type_name` AS `typeName`, `basic_enum_type`.`remark`, `basic_enum_type`.`create_time` AS `createTime`, `basic_enum_type`.`update_time` AS `updateTime`, `basic_enums`.`id` AS `basic_enums.enumId`, `basic_enums`.`enum_code` AS `basic_enums.enumCode`, `basic_enums`.`enum_name` AS `basic_enums.enumName`, `basic_enums`.`shorthand_code` AS `basic_enums.shorthandCode`, `basic_enums`.`create_time` AS `basic_enums.createTime`, `basic_enums`.`update_time` AS `basic_enums.updateTime`, `basic_enums`.`basic_enum_type_type_id` AS `basic_enums.basicEnumTypeTypeId` FROM `basic_enum_types` AS `basic_enum_type` LEFT OUTER JOIN `basic_enums` AS `basic_enums` ON `basic_enum_type`.`id` = `basic_enums`.`basic_enum_type_type_id` AND (`basic_enums`.`delete_time` IS NULL) WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 4);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: '(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 4)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum_type,
    includeNames: [ 'basic_enums' ],
    includeMap: { basic_enums: [Object] },
    hasSingleAssociation: false,
    hasMultiAssociation: true,
    topModel: basic_enum_type,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [ 'basic_enum_types', 'basic_enums' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:36:40.979] [INFO] db - [
  'Executing (e9d791f7-37eb-485a-a664-7b6d8a057064): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'e9d791f7-37eb-485a-a664-7b6d8a057064',
      connection: [Connection]
    }
  }
]
[2023-02-24T13:36:41.484] [INFO] db - [
  'Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 4);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: '(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 4)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T13:36:41.486] [INFO] db - [
  'Executing (e9d791f7-37eb-485a-a664-7b6d8a057064): INSERT INTO `basic_enums` (`id`,`enum_code`,`enum_name`,`shorthand_code`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'e9d791f7-37eb-485a-a664-7b6d8a057064',
      connection: [Connection]
    },
    hooks: true,
    validate: true,
    fields: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime',
      'create_time',
      'update_time',
      'delete_time',
      'basicEnumTypeTypeId'
    ],
    defaultFields: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime',
      'create_time',
      'update_time',
      'delete_time',
      'basicEnumTypeTypeId'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: basic_enum {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: basic_enum,
    bind: [ '1', '克', 'g', '2023-02-24 13:36:41', '2023-02-24 13:36:41' ]
  }
]
[2023-02-24T13:36:41.490] [INFO] db - [
  'Executing (e9d791f7-37eb-485a-a664-7b6d8a057064): UPDATE `basic_enums` SET `basic_enum_type_type_id`=?,`update_time`=? WHERE (`delete_time` IS NULL AND `id` IN (6))',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'e9d791f7-37eb-485a-a664-7b6d8a057064',
      connection: [Connection]
    },
    where: { [Symbol(and)]: [Array] },
    validate: true,
    hooks: true,
    individualHooks: false,
    returning: false,
    force: false,
    sideEffects: true,
    type: 'BULKUPDATE',
    fields: [ 'basicEnumTypeTypeId', 'update_time' ],
    model: basic_enum,
    skip: undefined,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [ 4, '2023-02-24 13:36:41' ]
  }
]
[2023-02-24T13:36:41.496] [INFO] db - [
  'Executing (e9d791f7-37eb-485a-a664-7b6d8a057064): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'e9d791f7-37eb-485a-a664-7b6d8a057064',
      connection: [Connection],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-02-24T13:36:41.501] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'POST',
      '{"typeId":4,"enumCode":"1","enumName":"克","shorthandCode":"g"}',
      '/api/basic/enum/create',
      '枚举字典创建',
      529,
      '2023-02-24 13:36:41',
      '2023-02-24 13:36:41'
    ]
  }
]
[2023-02-24T13:36:41.523] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%4' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:36:46.098] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%4' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:36:57.310] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:36:57.315] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T13:36:57.315] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T13:37:27.190] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:37:27.195] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T13:37:27.196] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T13:38:21.470] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:38:21.475] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T13:38:21.477] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T13:38:23.651] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:38:23.657] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T13:38:23.658] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T13:38:25.630] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:38:26.806] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%4' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:38:27.870] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:38:28.683] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%4' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:38:30.555] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:38:30.964] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%4' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:38:33.824] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:38:33.829] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T13:38:33.830] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T13:38:38.180] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:38:39.497] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%4' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:38:40.171] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:38:55.011] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:38:55.019] [INFO] db - [
  'Executing (default): SELECT `basic_enum_type`.`id` AS `typeId`, `basic_enum_type`.`type_code` AS `typeCode`, `basic_enum_type`.`type_name` AS `typeName`, `basic_enum_type`.`remark`, `basic_enum_type`.`create_time` AS `createTime`, `basic_enum_type`.`update_time` AS `updateTime`, `basic_enums`.`id` AS `basic_enums.enumId`, `basic_enums`.`enum_code` AS `basic_enums.enumCode`, `basic_enums`.`enum_name` AS `basic_enums.enumName`, `basic_enums`.`shorthand_code` AS `basic_enums.shorthandCode`, `basic_enums`.`create_time` AS `basic_enums.createTime`, `basic_enums`.`update_time` AS `basic_enums.updateTime`, `basic_enums`.`basic_enum_type_type_id` AS `basic_enums.basicEnumTypeTypeId` FROM `basic_enum_types` AS `basic_enum_type` LEFT OUTER JOIN `basic_enums` AS `basic_enums` ON `basic_enum_type`.`id` = `basic_enums`.`basic_enum_type_type_id` AND (`basic_enums`.`delete_time` IS NULL) WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 2);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: '(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 2)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum_type,
    includeNames: [ 'basic_enums' ],
    includeMap: { basic_enums: [Object] },
    hasSingleAssociation: false,
    hasMultiAssociation: true,
    topModel: basic_enum_type,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [ 'basic_enum_types', 'basic_enums' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:38:55.020] [INFO] db - [
  'Executing (3720b412-2617-4488-afbb-35c2070ea991): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '3720b412-2617-4488-afbb-35c2070ea991',
      connection: [Connection]
    }
  }
]
[2023-02-24T13:38:55.021] [INFO] db - [
  'Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 2);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: '(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 2)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T13:38:55.023] [INFO] db - [
  'Executing (3720b412-2617-4488-afbb-35c2070ea991): INSERT INTO `basic_enums` (`id`,`enum_code`,`enum_name`,`shorthand_code`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '3720b412-2617-4488-afbb-35c2070ea991',
      connection: [Connection]
    },
    hooks: true,
    validate: true,
    fields: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime',
      'create_time',
      'update_time',
      'delete_time',
      'basicEnumTypeTypeId'
    ],
    defaultFields: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime',
      'create_time',
      'update_time',
      'delete_time',
      'basicEnumTypeTypeId'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: basic_enum {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: basic_enum,
    bind: [ '3', '未知', 'wz', '2023-02-24 13:38:55', '2023-02-24 13:38:55' ]
  }
]
[2023-02-24T13:38:55.026] [INFO] db - [
  'Executing (3720b412-2617-4488-afbb-35c2070ea991): UPDATE `basic_enums` SET `basic_enum_type_type_id`=?,`update_time`=? WHERE (`delete_time` IS NULL AND `id` IN (7))',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '3720b412-2617-4488-afbb-35c2070ea991',
      connection: [Connection]
    },
    where: { [Symbol(and)]: [Array] },
    validate: true,
    hooks: true,
    individualHooks: false,
    returning: false,
    force: false,
    sideEffects: true,
    type: 'BULKUPDATE',
    fields: [ 'basicEnumTypeTypeId', 'update_time' ],
    model: basic_enum,
    skip: undefined,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [ 2, '2023-02-24 13:38:55' ]
  }
]
[2023-02-24T13:38:55.029] [INFO] db - [
  'Executing (3720b412-2617-4488-afbb-35c2070ea991): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '3720b412-2617-4488-afbb-35c2070ea991',
      connection: [Connection],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-02-24T13:38:55.034] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'POST',
      '{"typeId":2,"enumCode":"3","enumName":"未知","shorthandCode":"wz"}',
      '/api/basic/enum/create',
      '枚举字典创建',
      24,
      '2023-02-24 13:38:55',
      '2023-02-24 13:38:55'
    ]
  }
]
[2023-02-24T13:38:55.065] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:39:21.511] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:39:21.516] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T13:39:21.517] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T13:39:43.756] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:39:43.762] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T13:39:43.764] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T13:40:52.606] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:40:52.610] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T13:40:52.614] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T13:40:58.742] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:41:01.281] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`url`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'DELETE',
      '/api/basic/enum/delete/',
      0,
      '2023-02-24 13:41:01',
      '2023-02-24 13:41:01'
    ]
  }
]
[2023-02-24T13:41:18.138] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:41:18.145] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T13:41:18.146] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T13:41:20.742] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:41:20.745] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T13:41:20.746] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T13:41:24.046] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:41:26.133] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:41:26.137] [INFO] db - [
  "Executing (default): UPDATE `basic_enums` SET `delete_time`=? WHERE `delete_time` IS NULL AND `id` IN ('7')",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { id: [Array] },
    attributes: { exclude: [Array] },
    hooks: true,
    individualHooks: false,
    force: false,
    cascade: false,
    restartIdentity: false,
    type: 'BULKUPDATE',
    model: basic_enum,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [ '2023-02-24 13:41:26' ]
  }
]
[2023-02-24T13:41:26.145] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'DELETE',
      '{"ids":"7"}',
      '/api/basic/enum/delete/7',
      '枚举字典删除',
      13,
      '2023-02-24 13:41:26',
      '2023-02-24 13:41:26'
    ]
  }
]
[2023-02-24T13:41:26.164] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:43:04.895] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:43:04.901] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T13:43:04.903] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T13:43:09.738] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:43:48.771] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%4' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:43:49.571] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:43:49.576] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T13:43:49.577] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T13:43:50.936] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:43:51.393] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%4' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:43:51.844] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:43:52.682] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%4' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:43:54.514] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:43:54.518] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T13:43:54.518] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T13:44:25.326] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:44:34.910] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:44:34.914] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T13:44:34.915] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T13:44:36.008] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%4' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:45:02.433] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:45:02.438] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T13:45:02.438] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T13:45:26.489] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:45:27.012] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%4' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:45:27.468] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:45:27.873] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:45:30.891] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%4' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:45:37.125] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:45:38.089] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%4' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:45:38.695] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:45:39.198] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%4' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:45:39.574] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:45:39.996] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:52:52.253] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:52:52.260] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T13:52:52.262] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T13:53:02.662] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:53:02.666] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T13:53:02.667] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T13:53:11.024] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:53:11.030] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T13:53:11.032] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T13:55:46.636] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:55:46.642] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T13:55:46.644] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T13:56:33.643] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:56:33.647] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T13:56:33.649] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T13:56:38.405] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:56:38.408] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T13:56:38.408] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T13:57:43.334] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:57:43.340] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T13:57:43.342] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T13:58:40.765] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T13:58:40.769] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T13:58:40.770] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T14:02:01.991] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T14:02:01.994] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T14:02:01.996] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T14:02:56.922] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T14:02:56.928] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T14:02:56.929] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T14:03:24.012] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T14:03:24.017] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T14:03:24.018] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T14:03:25.867] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T14:03:25.871] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T14:03:25.872] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T14:03:55.018] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T14:03:55.023] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T14:03:55.023] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T14:03:58.099] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T14:03:58.103] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T14:03:58.103] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T14:11:50.186] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T14:11:50.191] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T14:11:50.193] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T14:11:50.202] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T14:11:50.207] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T14:11:50.208] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T14:11:50.214] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T14:11:50.219] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T14:11:50.220] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T14:11:50.227] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T14:11:50.232] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T14:11:50.234] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T14:35:26.502] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T14:35:26.509] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T14:35:26.510] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T15:06:05.084] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:06:05.088] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:06:05.089] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T15:06:09.733] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:06:09.739] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:06:09.741] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T15:06:13.367] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:06:13.371] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:06:13.372] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T15:06:13.450] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:06:13.454] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:06:13.455] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T15:06:18.120] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:06:18.123] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:06:18.124] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T15:06:18.301] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:06:18.304] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:06:18.305] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T15:07:03.872] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:07:03.878] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:07:03.880] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T15:12:27.932] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:12:27.938] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:12:27.941] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T15:12:29.446] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:12:42.622] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:12:42.627] [INFO] db - [
  'Executing (default): SELECT `basic_enum_type`.`id` AS `typeId`, `basic_enum_type`.`type_code` AS `typeCode`, `basic_enum_type`.`type_name` AS `typeName`, `basic_enum_type`.`remark`, `basic_enum_type`.`create_time` AS `createTime`, `basic_enum_type`.`update_time` AS `updateTime`, `basic_enums`.`id` AS `basic_enums.enumId`, `basic_enums`.`enum_code` AS `basic_enums.enumCode`, `basic_enums`.`enum_name` AS `basic_enums.enumName`, `basic_enums`.`shorthand_code` AS `basic_enums.shorthandCode`, `basic_enums`.`create_time` AS `basic_enums.createTime`, `basic_enums`.`update_time` AS `basic_enums.updateTime`, `basic_enums`.`basic_enum_type_type_id` AS `basic_enums.basicEnumTypeTypeId` FROM `basic_enum_types` AS `basic_enum_type` LEFT OUTER JOIN `basic_enums` AS `basic_enums` ON `basic_enum_type`.`id` = `basic_enums`.`basic_enum_type_type_id` AND (`basic_enums`.`delete_time` IS NULL) WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 2);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: '(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 2)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum_type,
    includeNames: [ 'basic_enums' ],
    includeMap: { basic_enums: [Object] },
    hasSingleAssociation: false,
    hasMultiAssociation: true,
    topModel: basic_enum_type,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [ 'basic_enum_types', 'basic_enums' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:12:42.629] [INFO] db - [
  'Executing (679f2115-0ebe-40fa-b7b4-6bb9669a1e25): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '679f2115-0ebe-40fa-b7b4-6bb9669a1e25',
      connection: [Connection]
    }
  }
]
[2023-02-24T15:12:42.631] [INFO] db - [
  'Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 2);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: '(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 2)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T15:12:42.635] [INFO] db - [
  'Executing (679f2115-0ebe-40fa-b7b4-6bb9669a1e25): INSERT INTO `basic_enums` (`id`,`enum_code`,`enum_name`,`shorthand_code`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '679f2115-0ebe-40fa-b7b4-6bb9669a1e25',
      connection: [Connection]
    },
    hooks: true,
    validate: true,
    fields: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime',
      'create_time',
      'update_time',
      'delete_time',
      'basicEnumTypeTypeId'
    ],
    defaultFields: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime',
      'create_time',
      'update_time',
      'delete_time',
      'basicEnumTypeTypeId'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: basic_enum {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: basic_enum,
    bind: [ '3', '未知', 'wz', '2023-02-24 15:12:42', '2023-02-24 15:12:42' ]
  }
]
[2023-02-24T15:12:42.642] [INFO] db - [
  'Executing (679f2115-0ebe-40fa-b7b4-6bb9669a1e25): UPDATE `basic_enums` SET `basic_enum_type_type_id`=?,`update_time`=? WHERE (`delete_time` IS NULL AND `id` IN (8))',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '679f2115-0ebe-40fa-b7b4-6bb9669a1e25',
      connection: [Connection]
    },
    where: { [Symbol(and)]: [Array] },
    validate: true,
    hooks: true,
    individualHooks: false,
    returning: false,
    force: false,
    sideEffects: true,
    type: 'BULKUPDATE',
    fields: [ 'basicEnumTypeTypeId', 'update_time' ],
    model: basic_enum,
    skip: undefined,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [ 2, '2023-02-24 15:12:42' ]
  }
]
[2023-02-24T15:12:42.647] [INFO] db - [
  'Executing (679f2115-0ebe-40fa-b7b4-6bb9669a1e25): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '679f2115-0ebe-40fa-b7b4-6bb9669a1e25',
      connection: [Connection],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-02-24T15:12:42.654] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'POST',
      '{"typeId":2,"typeName":"性别","enumCode":"3","enumName":"未知","shorthandCode":"wz"}',
      '/api/basic/enum/create',
      '枚举字典创建',
      33,
      '2023-02-24 15:12:42',
      '2023-02-24 15:12:42'
    ]
  }
]
[2023-02-24T15:12:42.685] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:12:43.858] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%4' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:12:51.092] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:12:51.097] [INFO] db - [
  'Executing (default): SELECT `basic_enum_type`.`id` AS `typeId`, `basic_enum_type`.`type_code` AS `typeCode`, `basic_enum_type`.`type_name` AS `typeName`, `basic_enum_type`.`remark`, `basic_enum_type`.`create_time` AS `createTime`, `basic_enum_type`.`update_time` AS `updateTime`, `basic_enums`.`id` AS `basic_enums.enumId`, `basic_enums`.`enum_code` AS `basic_enums.enumCode`, `basic_enums`.`enum_name` AS `basic_enums.enumName`, `basic_enums`.`shorthand_code` AS `basic_enums.shorthandCode`, `basic_enums`.`create_time` AS `basic_enums.createTime`, `basic_enums`.`update_time` AS `basic_enums.updateTime`, `basic_enums`.`basic_enum_type_type_id` AS `basic_enums.basicEnumTypeTypeId` FROM `basic_enum_types` AS `basic_enum_type` LEFT OUTER JOIN `basic_enums` AS `basic_enums` ON `basic_enum_type`.`id` = `basic_enums`.`basic_enum_type_type_id` AND (`basic_enums`.`delete_time` IS NULL) WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 4);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: '(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 4)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum_type,
    includeNames: [ 'basic_enums' ],
    includeMap: { basic_enums: [Object] },
    hasSingleAssociation: false,
    hasMultiAssociation: true,
    topModel: basic_enum_type,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [ 'basic_enum_types', 'basic_enums' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:12:51.101] [INFO] db - [
  'Executing (default): SELECT `id` AS `enumId`, `enum_code` AS `enumCode`, `enum_name` AS `enumName`, `shorthand_code` AS `shorthandCode`, `create_time` AS `createTime`, `update_time` AS `updateTime`, `basic_enum_type_type_id` AS `basicEnumTypeTypeId` FROM `basic_enums` AS `basic_enum` WHERE (`basic_enum`.`delete_time` IS NULL AND `basic_enum`.`id` = 6);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: '(`basic_enum`.`delete_time` IS NULL AND `basic_enum`.`id` = 6)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array], [Array],
      [Array], [Array],
      [Array], [Array],
      [Array]
    ],
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime',
      'basicEnumTypeTypeId'
    ],
    tableNames: [ 'basic_enums' ],
    type: 'SELECT',
    model: basic_enum
  }
]
[2023-02-24T15:12:51.103] [INFO] db - [
  'Executing (default): UPDATE `basic_enums` SET `id`=?,`enum_code`=?,`enum_name`=?,`shorthand_code`=?,`create_time`=?,`update_time`=? WHERE (`delete_time` IS NULL AND `id` = ?)',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { [Symbol(and)]: [Array] },
    validate: true,
    hooks: true,
    individualHooks: false,
    returning: false,
    force: false,
    sideEffects: true,
    type: 'BULKUPDATE',
    fields: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime',
      'update_time',
      'typeId',
      'typeCode',
      'typeName'
    ],
    model: basic_enum,
    skip: undefined,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [
      6,
      '1',
      '克',
      'k',
      '2023-02-24 13:36:41',
      '2023-02-24 15:12:51',
      6
    ]
  }
]
[2023-02-24T15:12:51.109] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'PUT',
      '{"enumId":6,"enumCode":"1","enumName":"克","shorthandCode":"k","createTime":"2023-02-24 13:36:41","updateTime":"2023-02-24 13:36:41","typeId":4,"typeCode":"UNIT","typeName":"单位"}',
      '/api/basic/enum/update',
      '枚举字典修改',
      17,
      '2023-02-24 15:12:51',
      '2023-02-24 15:12:51'
    ]
  }
]
[2023-02-24T15:12:51.132] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%4' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:12:59.853] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:12:59.857] [INFO] db - [
  'Executing (default): SELECT `basic_enum_type`.`id` AS `typeId`, `basic_enum_type`.`type_code` AS `typeCode`, `basic_enum_type`.`type_name` AS `typeName`, `basic_enum_type`.`remark`, `basic_enum_type`.`create_time` AS `createTime`, `basic_enum_type`.`update_time` AS `updateTime`, `basic_enums`.`id` AS `basic_enums.enumId`, `basic_enums`.`enum_code` AS `basic_enums.enumCode`, `basic_enums`.`enum_name` AS `basic_enums.enumName`, `basic_enums`.`shorthand_code` AS `basic_enums.shorthandCode`, `basic_enums`.`create_time` AS `basic_enums.createTime`, `basic_enums`.`update_time` AS `basic_enums.updateTime`, `basic_enums`.`basic_enum_type_type_id` AS `basic_enums.basicEnumTypeTypeId` FROM `basic_enum_types` AS `basic_enum_type` LEFT OUTER JOIN `basic_enums` AS `basic_enums` ON `basic_enum_type`.`id` = `basic_enums`.`basic_enum_type_type_id` AND (`basic_enums`.`delete_time` IS NULL) WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 4);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: '(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 4)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum_type,
    includeNames: [ 'basic_enums' ],
    includeMap: { basic_enums: [Object] },
    hasSingleAssociation: false,
    hasMultiAssociation: true,
    topModel: basic_enum_type,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [ 'basic_enum_types', 'basic_enums' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:12:59.858] [INFO] db - [
  'Executing (6c252f44-0140-4129-a2c0-d798d12ac6fe): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '6c252f44-0140-4129-a2c0-d798d12ac6fe',
      connection: [Connection]
    }
  }
]
[2023-02-24T15:12:59.860] [INFO] db - [
  'Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 4);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: '(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 4)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T15:12:59.861] [INFO] db - [
  'Executing (6c252f44-0140-4129-a2c0-d798d12ac6fe): INSERT INTO `basic_enums` (`id`,`enum_code`,`enum_name`,`shorthand_code`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '6c252f44-0140-4129-a2c0-d798d12ac6fe',
      connection: [Connection]
    },
    hooks: true,
    validate: true,
    fields: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime',
      'create_time',
      'update_time',
      'delete_time',
      'basicEnumTypeTypeId'
    ],
    defaultFields: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime',
      'create_time',
      'update_time',
      'delete_time',
      'basicEnumTypeTypeId'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: basic_enum {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: basic_enum,
    bind: [ '2', '件', 'j', '2023-02-24 15:12:59', '2023-02-24 15:12:59' ]
  }
]
[2023-02-24T15:12:59.864] [INFO] db - [
  'Executing (6c252f44-0140-4129-a2c0-d798d12ac6fe): UPDATE `basic_enums` SET `basic_enum_type_type_id`=?,`update_time`=? WHERE (`delete_time` IS NULL AND `id` IN (9))',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '6c252f44-0140-4129-a2c0-d798d12ac6fe',
      connection: [Connection]
    },
    where: { [Symbol(and)]: [Array] },
    validate: true,
    hooks: true,
    individualHooks: false,
    returning: false,
    force: false,
    sideEffects: true,
    type: 'BULKUPDATE',
    fields: [ 'basicEnumTypeTypeId', 'update_time' ],
    model: basic_enum,
    skip: undefined,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [ 4, '2023-02-24 15:12:59' ]
  }
]
[2023-02-24T15:12:59.867] [INFO] db - [
  'Executing (6c252f44-0140-4129-a2c0-d798d12ac6fe): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '6c252f44-0140-4129-a2c0-d798d12ac6fe',
      connection: [Connection],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-02-24T15:12:59.873] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'POST',
      '{"typeId":4,"typeName":"单位","enumCode":"2","enumName":"件","shorthandCode":"j"}',
      '/api/basic/enum/create',
      '枚举字典创建',
      22,
      '2023-02-24 15:12:59',
      '2023-02-24 15:12:59'
    ]
  }
]
[2023-02-24T15:12:59.901] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%4' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:13:08.488] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:13:08.492] [INFO] db - [
  'Executing (default): SELECT `basic_enum_type`.`id` AS `typeId`, `basic_enum_type`.`type_code` AS `typeCode`, `basic_enum_type`.`type_name` AS `typeName`, `basic_enum_type`.`remark`, `basic_enum_type`.`create_time` AS `createTime`, `basic_enum_type`.`update_time` AS `updateTime`, `basic_enums`.`id` AS `basic_enums.enumId`, `basic_enums`.`enum_code` AS `basic_enums.enumCode`, `basic_enums`.`enum_name` AS `basic_enums.enumName`, `basic_enums`.`shorthand_code` AS `basic_enums.shorthandCode`, `basic_enums`.`create_time` AS `basic_enums.createTime`, `basic_enums`.`update_time` AS `basic_enums.updateTime`, `basic_enums`.`basic_enum_type_type_id` AS `basic_enums.basicEnumTypeTypeId` FROM `basic_enum_types` AS `basic_enum_type` LEFT OUTER JOIN `basic_enums` AS `basic_enums` ON `basic_enum_type`.`id` = `basic_enums`.`basic_enum_type_type_id` AND (`basic_enums`.`delete_time` IS NULL) WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 4);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: '(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 4)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum_type,
    includeNames: [ 'basic_enums' ],
    includeMap: { basic_enums: [Object] },
    hasSingleAssociation: false,
    hasMultiAssociation: true,
    topModel: basic_enum_type,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [ 'basic_enum_types', 'basic_enums' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:13:08.495] [INFO] db - [
  'Executing (e63ca190-9e71-4c1b-ab12-7a5c4bd71e3f): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'e63ca190-9e71-4c1b-ab12-7a5c4bd71e3f',
      connection: [Connection]
    }
  }
]
[2023-02-24T15:13:08.498] [INFO] db - [
  'Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 4);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: '(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 4)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T15:13:08.499] [INFO] db - [
  'Executing (e63ca190-9e71-4c1b-ab12-7a5c4bd71e3f): INSERT INTO `basic_enums` (`id`,`enum_code`,`enum_name`,`shorthand_code`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'e63ca190-9e71-4c1b-ab12-7a5c4bd71e3f',
      connection: [Connection]
    },
    hooks: true,
    validate: true,
    fields: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime',
      'create_time',
      'update_time',
      'delete_time',
      'basicEnumTypeTypeId'
    ],
    defaultFields: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime',
      'create_time',
      'update_time',
      'delete_time',
      'basicEnumTypeTypeId'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: basic_enum {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: basic_enum,
    bind: [ '3', '箱', 'x', '2023-02-24 15:13:08', '2023-02-24 15:13:08' ]
  }
]
[2023-02-24T15:13:08.502] [INFO] db - [
  'Executing (e63ca190-9e71-4c1b-ab12-7a5c4bd71e3f): UPDATE `basic_enums` SET `basic_enum_type_type_id`=?,`update_time`=? WHERE (`delete_time` IS NULL AND `id` IN (10))',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'e63ca190-9e71-4c1b-ab12-7a5c4bd71e3f',
      connection: [Connection]
    },
    where: { [Symbol(and)]: [Array] },
    validate: true,
    hooks: true,
    individualHooks: false,
    returning: false,
    force: false,
    sideEffects: true,
    type: 'BULKUPDATE',
    fields: [ 'basicEnumTypeTypeId', 'update_time' ],
    model: basic_enum,
    skip: undefined,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [ 4, '2023-02-24 15:13:08' ]
  }
]
[2023-02-24T15:13:08.503] [INFO] db - [
  'Executing (e63ca190-9e71-4c1b-ab12-7a5c4bd71e3f): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'e63ca190-9e71-4c1b-ab12-7a5c4bd71e3f',
      connection: [Connection],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-02-24T15:13:08.508] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'POST',
      '{"typeId":4,"typeName":"单位","enumCode":"3","enumName":"箱","shorthandCode":"x"}',
      '/api/basic/enum/create',
      '枚举字典创建',
      20,
      '2023-02-24 15:13:08',
      '2023-02-24 15:13:08'
    ]
  }
]
[2023-02-24T15:13:08.532] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%4' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:13:17.540] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:13:17.546] [INFO] db - [
  'Executing (default): SELECT `basic_enum_type`.`id` AS `typeId`, `basic_enum_type`.`type_code` AS `typeCode`, `basic_enum_type`.`type_name` AS `typeName`, `basic_enum_type`.`remark`, `basic_enum_type`.`create_time` AS `createTime`, `basic_enum_type`.`update_time` AS `updateTime`, `basic_enums`.`id` AS `basic_enums.enumId`, `basic_enums`.`enum_code` AS `basic_enums.enumCode`, `basic_enums`.`enum_name` AS `basic_enums.enumName`, `basic_enums`.`shorthand_code` AS `basic_enums.shorthandCode`, `basic_enums`.`create_time` AS `basic_enums.createTime`, `basic_enums`.`update_time` AS `basic_enums.updateTime`, `basic_enums`.`basic_enum_type_type_id` AS `basic_enums.basicEnumTypeTypeId` FROM `basic_enum_types` AS `basic_enum_type` LEFT OUTER JOIN `basic_enums` AS `basic_enums` ON `basic_enum_type`.`id` = `basic_enums`.`basic_enum_type_type_id` AND (`basic_enums`.`delete_time` IS NULL) WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 4);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: '(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 4)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum_type,
    includeNames: [ 'basic_enums' ],
    includeMap: { basic_enums: [Object] },
    hasSingleAssociation: false,
    hasMultiAssociation: true,
    topModel: basic_enum_type,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [ 'basic_enum_types', 'basic_enums' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:13:17.549] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'POST',
      '{"typeId":4,"typeName":"单位","enumCode":"3","enumName":"袋","shorthandCode":"d"}',
      '/api/basic/enum/create',
      9,
      '2023-02-24 15:13:17',
      '2023-02-24 15:13:17'
    ]
  }
]
[2023-02-24T15:13:25.772] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:13:25.777] [INFO] db - [
  'Executing (default): SELECT `basic_enum_type`.`id` AS `typeId`, `basic_enum_type`.`type_code` AS `typeCode`, `basic_enum_type`.`type_name` AS `typeName`, `basic_enum_type`.`remark`, `basic_enum_type`.`create_time` AS `createTime`, `basic_enum_type`.`update_time` AS `updateTime`, `basic_enums`.`id` AS `basic_enums.enumId`, `basic_enums`.`enum_code` AS `basic_enums.enumCode`, `basic_enums`.`enum_name` AS `basic_enums.enumName`, `basic_enums`.`shorthand_code` AS `basic_enums.shorthandCode`, `basic_enums`.`create_time` AS `basic_enums.createTime`, `basic_enums`.`update_time` AS `basic_enums.updateTime`, `basic_enums`.`basic_enum_type_type_id` AS `basic_enums.basicEnumTypeTypeId` FROM `basic_enum_types` AS `basic_enum_type` LEFT OUTER JOIN `basic_enums` AS `basic_enums` ON `basic_enum_type`.`id` = `basic_enums`.`basic_enum_type_type_id` AND (`basic_enums`.`delete_time` IS NULL) WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 4);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: '(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 4)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum_type,
    includeNames: [ 'basic_enums' ],
    includeMap: { basic_enums: [Object] },
    hasSingleAssociation: false,
    hasMultiAssociation: true,
    topModel: basic_enum_type,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [ 'basic_enum_types', 'basic_enums' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:13:25.780] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'POST',
      '{"typeId":4,"typeName":"单位","enumCode":"3","enumName":"袋","shorthandCode":"d"}',
      '/api/basic/enum/create',
      9,
      '2023-02-24 15:13:25',
      '2023-02-24 15:13:25'
    ]
  }
]
[2023-02-24T15:13:30.225] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:13:30.229] [INFO] db - [
  'Executing (default): SELECT `basic_enum_type`.`id` AS `typeId`, `basic_enum_type`.`type_code` AS `typeCode`, `basic_enum_type`.`type_name` AS `typeName`, `basic_enum_type`.`remark`, `basic_enum_type`.`create_time` AS `createTime`, `basic_enum_type`.`update_time` AS `updateTime`, `basic_enums`.`id` AS `basic_enums.enumId`, `basic_enums`.`enum_code` AS `basic_enums.enumCode`, `basic_enums`.`enum_name` AS `basic_enums.enumName`, `basic_enums`.`shorthand_code` AS `basic_enums.shorthandCode`, `basic_enums`.`create_time` AS `basic_enums.createTime`, `basic_enums`.`update_time` AS `basic_enums.updateTime`, `basic_enums`.`basic_enum_type_type_id` AS `basic_enums.basicEnumTypeTypeId` FROM `basic_enum_types` AS `basic_enum_type` LEFT OUTER JOIN `basic_enums` AS `basic_enums` ON `basic_enum_type`.`id` = `basic_enums`.`basic_enum_type_type_id` AND (`basic_enums`.`delete_time` IS NULL) WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 4);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: '(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 4)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum_type,
    includeNames: [ 'basic_enums' ],
    includeMap: { basic_enums: [Object] },
    hasSingleAssociation: false,
    hasMultiAssociation: true,
    topModel: basic_enum_type,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [ 'basic_enum_types', 'basic_enums' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:13:30.231] [INFO] db - [
  'Executing (2feeaad2-a319-470d-9f70-cc1a3671dc46): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '2feeaad2-a319-470d-9f70-cc1a3671dc46',
      connection: [Connection]
    }
  }
]
[2023-02-24T15:13:30.232] [INFO] db - [
  'Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 4);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: '(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 4)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T15:13:30.234] [INFO] db - [
  'Executing (2feeaad2-a319-470d-9f70-cc1a3671dc46): INSERT INTO `basic_enums` (`id`,`enum_code`,`enum_name`,`shorthand_code`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '2feeaad2-a319-470d-9f70-cc1a3671dc46',
      connection: [Connection]
    },
    hooks: true,
    validate: true,
    fields: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime',
      'create_time',
      'update_time',
      'delete_time',
      'basicEnumTypeTypeId'
    ],
    defaultFields: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime',
      'create_time',
      'update_time',
      'delete_time',
      'basicEnumTypeTypeId'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: basic_enum {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: basic_enum,
    bind: [ '4', '袋', 'd', '2023-02-24 15:13:30', '2023-02-24 15:13:30' ]
  }
]
[2023-02-24T15:13:30.235] [INFO] db - [
  'Executing (2feeaad2-a319-470d-9f70-cc1a3671dc46): UPDATE `basic_enums` SET `basic_enum_type_type_id`=?,`update_time`=? WHERE (`delete_time` IS NULL AND `id` IN (11))',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '2feeaad2-a319-470d-9f70-cc1a3671dc46',
      connection: [Connection]
    },
    where: { [Symbol(and)]: [Array] },
    validate: true,
    hooks: true,
    individualHooks: false,
    returning: false,
    force: false,
    sideEffects: true,
    type: 'BULKUPDATE',
    fields: [ 'basicEnumTypeTypeId', 'update_time' ],
    model: basic_enum,
    skip: undefined,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [ 4, '2023-02-24 15:13:30' ]
  }
]
[2023-02-24T15:13:30.237] [INFO] db - [
  'Executing (2feeaad2-a319-470d-9f70-cc1a3671dc46): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '2feeaad2-a319-470d-9f70-cc1a3671dc46',
      connection: [Connection],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-02-24T15:13:30.242] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'POST',
      '{"typeId":4,"typeName":"单位","enumCode":"4","enumName":"袋","shorthandCode":"d"}',
      '/api/basic/enum/create',
      '枚举字典创建',
      18,
      '2023-02-24 15:13:30',
      '2023-02-24 15:13:30'
    ]
  }
]
[2023-02-24T15:13:30.270] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%4' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:13:34.118] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:13:34.632] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%4' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:13:35.045] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:13:35.597] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%4' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:13:57.547] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:13:57.553] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:13:57.554] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T15:14:02.061] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:14:02.066] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:14:02.067] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T15:14:02.933] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:14:02.939] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:14:02.941] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T15:14:06.265] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:14:06.271] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:14:06.272] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T15:14:18.474] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%4' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:14:18.951] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:14:20.214] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:14:20.217] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:14:20.218] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T15:14:22.662] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:14:23.161] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%4' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:14:23.631] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:14:23.966] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%4' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:14:24.570] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:14:25.027] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%4' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:14:25.542] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:14:26.067] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%4' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:14:27.869] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:14:27.872] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:14:27.873] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T15:16:16.373] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:16:16.377] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`type_code` = 'PLACE_CONDITION') LIMIT 1;",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`type_code` = 'PLACE_CONDITION')",
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T15:16:16.379] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`type_name` = '置放条件') LIMIT 1;",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`type_name` = '置放条件')",
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T15:16:16.383] [INFO] db - [
  'Executing (default): INSERT INTO `basic_enum_types` (`id`,`type_code`,`type_name`,`remark`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime',
      'create_time',
      'update_time',
      'delete_time'
    ],
    defaultFields: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime',
      'create_time',
      'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: basic_enum_type {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: basic_enum_type,
    bind: [
      'PLACE_CONDITION',
      '置放条件',
      '置放条件',
      '2023-02-24 15:16:16',
      '2023-02-24 15:16:16'
    ]
  }
]
[2023-02-24T15:16:16.388] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'POST',
      '{"typeCode":"PLACE_CONDITION","typeName":"置放条件","remark":"置放条件"}',
      '/api/basic/enumType/create',
      '枚举类型创建',
      22,
      '2023-02-24 15:16:16',
      '2023-02-24 15:16:16'
    ]
  }
]
[2023-02-24T15:16:16.419] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:16:16.423] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:16:16.424] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T15:16:17.490] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%5' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:16:34.435] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:16:34.439] [INFO] db - [
  'Executing (default): SELECT `basic_enum_type`.`id` AS `typeId`, `basic_enum_type`.`type_code` AS `typeCode`, `basic_enum_type`.`type_name` AS `typeName`, `basic_enum_type`.`remark`, `basic_enum_type`.`create_time` AS `createTime`, `basic_enum_type`.`update_time` AS `updateTime`, `basic_enums`.`id` AS `basic_enums.enumId`, `basic_enums`.`enum_code` AS `basic_enums.enumCode`, `basic_enums`.`enum_name` AS `basic_enums.enumName`, `basic_enums`.`shorthand_code` AS `basic_enums.shorthandCode`, `basic_enums`.`create_time` AS `basic_enums.createTime`, `basic_enums`.`update_time` AS `basic_enums.updateTime`, `basic_enums`.`basic_enum_type_type_id` AS `basic_enums.basicEnumTypeTypeId` FROM `basic_enum_types` AS `basic_enum_type` LEFT OUTER JOIN `basic_enums` AS `basic_enums` ON `basic_enum_type`.`id` = `basic_enums`.`basic_enum_type_type_id` AND (`basic_enums`.`delete_time` IS NULL) WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 5);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: '(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 5)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum_type,
    includeNames: [ 'basic_enums' ],
    includeMap: { basic_enums: [Object] },
    hasSingleAssociation: false,
    hasMultiAssociation: true,
    topModel: basic_enum_type,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [ 'basic_enum_types', 'basic_enums' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:16:34.440] [INFO] db - [
  'Executing (3dbc6603-9d1e-4f10-b528-960844297988): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '3dbc6603-9d1e-4f10-b528-960844297988',
      connection: [Connection]
    }
  }
]
[2023-02-24T15:16:34.441] [INFO] db - [
  'Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 5);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: '(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 5)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T15:16:34.442] [INFO] db - [
  'Executing (3dbc6603-9d1e-4f10-b528-960844297988): INSERT INTO `basic_enums` (`id`,`enum_code`,`enum_name`,`shorthand_code`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '3dbc6603-9d1e-4f10-b528-960844297988',
      connection: [Connection]
    },
    hooks: true,
    validate: true,
    fields: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime',
      'create_time',
      'update_time',
      'delete_time',
      'basicEnumTypeTypeId'
    ],
    defaultFields: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime',
      'create_time',
      'update_time',
      'delete_time',
      'basicEnumTypeTypeId'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: basic_enum {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: basic_enum,
    bind: [
      '01',
      '常温存储',
      'cwcc',
      '2023-02-24 15:16:34',
      '2023-02-24 15:16:34'
    ]
  }
]
[2023-02-24T15:16:34.446] [INFO] db - [
  'Executing (3dbc6603-9d1e-4f10-b528-960844297988): UPDATE `basic_enums` SET `basic_enum_type_type_id`=?,`update_time`=? WHERE (`delete_time` IS NULL AND `id` IN (12))',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '3dbc6603-9d1e-4f10-b528-960844297988',
      connection: [Connection]
    },
    where: { [Symbol(and)]: [Array] },
    validate: true,
    hooks: true,
    individualHooks: false,
    returning: false,
    force: false,
    sideEffects: true,
    type: 'BULKUPDATE',
    fields: [ 'basicEnumTypeTypeId', 'update_time' ],
    model: basic_enum,
    skip: undefined,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [ 5, '2023-02-24 15:16:34' ]
  }
]
[2023-02-24T15:16:34.447] [INFO] db - [
  'Executing (3dbc6603-9d1e-4f10-b528-960844297988): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '3dbc6603-9d1e-4f10-b528-960844297988',
      connection: [Connection],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-02-24T15:16:34.454] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'POST',
      '{"typeId":5,"typeName":"置放条件","enumCode":"01","enumName":"常温存储","shorthandCode":"cwcc"}',
      '/api/basic/enum/create',
      '枚举字典创建',
      19,
      '2023-02-24 15:16:34',
      '2023-02-24 15:16:34'
    ]
  }
]
[2023-02-24T15:16:34.476] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%5' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:16:46.344] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:16:46.347] [INFO] db - [
  'Executing (default): SELECT `basic_enum_type`.`id` AS `typeId`, `basic_enum_type`.`type_code` AS `typeCode`, `basic_enum_type`.`type_name` AS `typeName`, `basic_enum_type`.`remark`, `basic_enum_type`.`create_time` AS `createTime`, `basic_enum_type`.`update_time` AS `updateTime`, `basic_enums`.`id` AS `basic_enums.enumId`, `basic_enums`.`enum_code` AS `basic_enums.enumCode`, `basic_enums`.`enum_name` AS `basic_enums.enumName`, `basic_enums`.`shorthand_code` AS `basic_enums.shorthandCode`, `basic_enums`.`create_time` AS `basic_enums.createTime`, `basic_enums`.`update_time` AS `basic_enums.updateTime`, `basic_enums`.`basic_enum_type_type_id` AS `basic_enums.basicEnumTypeTypeId` FROM `basic_enum_types` AS `basic_enum_type` LEFT OUTER JOIN `basic_enums` AS `basic_enums` ON `basic_enum_type`.`id` = `basic_enums`.`basic_enum_type_type_id` AND (`basic_enums`.`delete_time` IS NULL) WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 5);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: '(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 5)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum_type,
    includeNames: [ 'basic_enums' ],
    includeMap: { basic_enums: [Object] },
    hasSingleAssociation: false,
    hasMultiAssociation: true,
    topModel: basic_enum_type,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [ 'basic_enum_types', 'basic_enums' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:16:46.348] [INFO] db - [
  'Executing (6db85a16-271f-47f7-b835-f652485afcf1): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '6db85a16-271f-47f7-b835-f652485afcf1',
      connection: [Connection]
    }
  }
]
[2023-02-24T15:16:46.349] [INFO] db - [
  'Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 5);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: '(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 5)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T15:16:46.351] [INFO] db - [
  'Executing (6db85a16-271f-47f7-b835-f652485afcf1): INSERT INTO `basic_enums` (`id`,`enum_code`,`enum_name`,`shorthand_code`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '6db85a16-271f-47f7-b835-f652485afcf1',
      connection: [Connection]
    },
    hooks: true,
    validate: true,
    fields: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime',
      'create_time',
      'update_time',
      'delete_time',
      'basicEnumTypeTypeId'
    ],
    defaultFields: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime',
      'create_time',
      'update_time',
      'delete_time',
      'basicEnumTypeTypeId'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: basic_enum {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: basic_enum,
    bind: [
      '02',
      '低温存储',
      'dwcc',
      '2023-02-24 15:16:46',
      '2023-02-24 15:16:46'
    ]
  }
]
[2023-02-24T15:16:46.352] [INFO] db - [
  'Executing (6db85a16-271f-47f7-b835-f652485afcf1): UPDATE `basic_enums` SET `basic_enum_type_type_id`=?,`update_time`=? WHERE (`delete_time` IS NULL AND `id` IN (13))',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '6db85a16-271f-47f7-b835-f652485afcf1',
      connection: [Connection]
    },
    where: { [Symbol(and)]: [Array] },
    validate: true,
    hooks: true,
    individualHooks: false,
    returning: false,
    force: false,
    sideEffects: true,
    type: 'BULKUPDATE',
    fields: [ 'basicEnumTypeTypeId', 'update_time' ],
    model: basic_enum,
    skip: undefined,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [ 5, '2023-02-24 15:16:46' ]
  }
]
[2023-02-24T15:16:46.355] [INFO] db - [
  'Executing (6db85a16-271f-47f7-b835-f652485afcf1): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '6db85a16-271f-47f7-b835-f652485afcf1',
      connection: [Connection],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-02-24T15:16:46.359] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'POST',
      '{"typeId":5,"typeName":"置放条件","enumCode":"02","enumName":"低温存储","shorthandCode":"dwcc"}',
      '/api/basic/enum/create',
      '枚举字典创建',
      16,
      '2023-02-24 15:16:46',
      '2023-02-24 15:16:46'
    ]
  }
]
[2023-02-24T15:16:46.381] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%5' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:16:55.001] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:16:55.005] [INFO] db - [
  'Executing (default): SELECT `basic_enum_type`.`id` AS `typeId`, `basic_enum_type`.`type_code` AS `typeCode`, `basic_enum_type`.`type_name` AS `typeName`, `basic_enum_type`.`remark`, `basic_enum_type`.`create_time` AS `createTime`, `basic_enum_type`.`update_time` AS `updateTime`, `basic_enums`.`id` AS `basic_enums.enumId`, `basic_enums`.`enum_code` AS `basic_enums.enumCode`, `basic_enums`.`enum_name` AS `basic_enums.enumName`, `basic_enums`.`shorthand_code` AS `basic_enums.shorthandCode`, `basic_enums`.`create_time` AS `basic_enums.createTime`, `basic_enums`.`update_time` AS `basic_enums.updateTime`, `basic_enums`.`basic_enum_type_type_id` AS `basic_enums.basicEnumTypeTypeId` FROM `basic_enum_types` AS `basic_enum_type` LEFT OUTER JOIN `basic_enums` AS `basic_enums` ON `basic_enum_type`.`id` = `basic_enums`.`basic_enum_type_type_id` AND (`basic_enums`.`delete_time` IS NULL) WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 5);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: '(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 5)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum_type,
    includeNames: [ 'basic_enums' ],
    includeMap: { basic_enums: [Object] },
    hasSingleAssociation: false,
    hasMultiAssociation: true,
    topModel: basic_enum_type,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [ 'basic_enum_types', 'basic_enums' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:16:55.007] [INFO] db - [
  'Executing (327a1ac5-5524-47a2-9d0a-3631ef99701c): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '327a1ac5-5524-47a2-9d0a-3631ef99701c',
      connection: [Connection]
    }
  }
]
[2023-02-24T15:16:55.008] [INFO] db - [
  'Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 5);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: '(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 5)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T15:16:55.010] [INFO] db - [
  'Executing (327a1ac5-5524-47a2-9d0a-3631ef99701c): INSERT INTO `basic_enums` (`id`,`enum_code`,`enum_name`,`shorthand_code`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '327a1ac5-5524-47a2-9d0a-3631ef99701c',
      connection: [Connection]
    },
    hooks: true,
    validate: true,
    fields: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime',
      'create_time',
      'update_time',
      'delete_time',
      'basicEnumTypeTypeId'
    ],
    defaultFields: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime',
      'create_time',
      'update_time',
      'delete_time',
      'basicEnumTypeTypeId'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: basic_enum {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: basic_enum,
    bind: [
      '03',
      '冷冻存储',
      'ldcc',
      '2023-02-24 15:16:55',
      '2023-02-24 15:16:55'
    ]
  }
]
[2023-02-24T15:16:55.012] [INFO] db - [
  'Executing (327a1ac5-5524-47a2-9d0a-3631ef99701c): UPDATE `basic_enums` SET `basic_enum_type_type_id`=?,`update_time`=? WHERE (`delete_time` IS NULL AND `id` IN (14))',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '327a1ac5-5524-47a2-9d0a-3631ef99701c',
      connection: [Connection]
    },
    where: { [Symbol(and)]: [Array] },
    validate: true,
    hooks: true,
    individualHooks: false,
    returning: false,
    force: false,
    sideEffects: true,
    type: 'BULKUPDATE',
    fields: [ 'basicEnumTypeTypeId', 'update_time' ],
    model: basic_enum,
    skip: undefined,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [ 5, '2023-02-24 15:16:55' ]
  }
]
[2023-02-24T15:16:55.013] [INFO] db - [
  'Executing (327a1ac5-5524-47a2-9d0a-3631ef99701c): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '327a1ac5-5524-47a2-9d0a-3631ef99701c',
      connection: [Connection],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-02-24T15:16:55.018] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'POST',
      '{"typeId":5,"typeName":"置放条件","enumCode":"03","enumName":"冷冻存储","shorthandCode":"ldcc"}',
      '/api/basic/enum/create',
      '枚举字典创建',
      18,
      '2023-02-24 15:16:55',
      '2023-02-24 15:16:55'
    ]
  }
]
[2023-02-24T15:16:55.039] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%5' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:17:03.322] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%4' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:17:03.745] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%2' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:17:04.324] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%5' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:17:32.979] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:17:32.984] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:17:32.986] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-24T15:17:35.055] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:17:35.059] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:17:35.059] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 140, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 140,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-24T15:26:25.464] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-24T15:26:25.466] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:26:25.499] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:26:25.502] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统用户表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:26:25.503] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:26:25.504] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统菜单表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:26:25.506] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:26:25.506] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:26:25.507] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:26:25.508] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:26:25.509] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:26:25.510] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统菜单表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:26:25.511] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统用户表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:26:25.512] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:26:25.513] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:26:25.514] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:26:25.516] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:26:54.777] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:26:54.791] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    order: null,
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:26:54.793] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) ORDER BY `createTime` DESC LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-24T15:26:56.644] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:26:56.654] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    order: null,
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:26:56.655] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) ORDER BY `createTime` DESC LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-24T15:27:01.386] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:27:01.398] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    order: null,
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:27:01.400] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) ORDER BY `createTime` DESC LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-24T15:27:02.775] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:27:02.785] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    order: null,
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:27:02.787] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) ORDER BY `createTime` DESC LIMIT 140, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    order: [ [Array] ],
    limit: 10,
    offset: 140,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-24T15:27:09.290] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:27:09.296] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    order: null,
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:27:09.297] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) ORDER BY `createTime` DESC LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-24T15:27:17.598] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:27:17.608] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:27:17.609] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-24T15:27:19.122] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:27:19.133] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:27:19.134] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) LIMIT 30, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 30,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-24T15:27:20.905] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:27:20.912] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:27:20.913] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-24T15:27:37.491] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-24T15:27:37.492] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:27:37.509] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:27:37.510] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统用户表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:27:37.513] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:27:37.516] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统菜单表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:27:37.519] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:27:37.521] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:27:37.523] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:27:37.524] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:27:37.525] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:27:37.527] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统用户表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:27:37.528] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:27:37.529] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统菜单表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:27:37.532] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:27:37.534] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:27:37.535] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:27:42.381] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-24T15:27:42.383] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:27:42.402] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:27:42.403] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统用户表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:27:42.403] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:27:42.405] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统菜单表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:27:42.406] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:27:42.408] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:27:42.409] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:27:42.409] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:27:42.411] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:27:42.412] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:27:42.413] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:27:42.414] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:27:42.420] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统用户表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:27:42.427] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统菜单表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:27:42.431] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:27:42.433] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:27:42.434] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:27:42.435] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    order: null,
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:27:42.435] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) ORDER BY `createTime` DESC LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-24T15:27:42.437] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: null,
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:27:42.438] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) ORDER BY `log_login`.`createTime` DESC LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-24T15:27:46.035] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:27:46.040] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: null,
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:27:46.040] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) ORDER BY `log_login`.`createTime` DESC LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-24T15:27:46.993] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:27:47.001] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: null,
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:27:47.002] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) ORDER BY `log_login`.`createTime` DESC LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-24T15:27:55.343] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:27:55.350] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: null,
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:27:55.351] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) ORDER BY `log_login`.`createTime` DESC LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-24T15:27:56.698] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:27:56.704] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: null,
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:27:56.705] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) ORDER BY `log_login`.`createTime` DESC LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-24T15:27:57.261] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:27:57.267] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: null,
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:27:57.267] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) ORDER BY `log_login`.`createTime` DESC LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-24T15:28:37.523] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-24T15:28:37.525] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:28:37.537] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:28:37.537] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统用户表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:28:37.539] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:28:37.541] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统菜单表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:28:37.542] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:28:37.543] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:28:37.544] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:28:37.545] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:28:37.546] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:28:37.547] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:28:37.548] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统用户表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:28:37.548] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统菜单表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:28:37.550] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:28:37.551] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:28:37.552] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:29:28.507] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:29:28.528] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: null,
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:29:28.531] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) ORDER BY `loginTime` DESC LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-24T15:29:32.820] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:29:32.829] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: null,
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:29:32.830] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) ORDER BY `loginTime` DESC LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-24T15:30:20.262] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:30:20.272] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: null,
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:30:20.274] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) ORDER BY `loginTime` DESC LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-24T15:30:24.917] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:30:24.927] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: null,
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:30:24.928] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) ORDER BY `loginTime` DESC LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-24T15:30:29.517] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:30:29.522] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: null,
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:30:29.523] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) ORDER BY `loginTime` DESC LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-24T15:30:30.521] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:30:30.526] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: null,
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:30:30.527] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) ORDER BY `loginTime` DESC LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-24T15:30:31.008] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:30:31.014] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: null,
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:30:31.015] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) ORDER BY `loginTime` DESC LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-24T15:30:31.431] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:30:31.436] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: null,
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:30:31.436] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) ORDER BY `loginTime` DESC LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-24T15:30:32.274] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:30:32.278] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: null,
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:30:32.279] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) ORDER BY `loginTime` DESC LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-24T15:30:32.608] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:30:32.613] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: null,
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:30:32.613] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) ORDER BY `loginTime` DESC LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-24T15:30:43.900] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-24T15:30:43.901] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:30:43.914] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:30:43.915] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统用户表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:30:43.915] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:30:43.917] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统菜单表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:30:43.918] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:30:43.920] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:30:43.921] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:30:43.922] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:30:43.923] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:30:43.924] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:30:43.925] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统用户表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:30:43.925] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:30:43.930] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统菜单表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:30:43.935] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:30:43.936] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:30:43.937] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:30:43.938] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: null,
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:30:43.939] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) ORDER BY `loginTime` DESC LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-24T15:30:44.676] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:30:44.682] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: null,
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:30:44.683] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) ORDER BY `loginTime` DESC LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-24T15:30:52.926] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:30:52.934] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: null,
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:30:52.935] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) ORDER BY `loginTime` DESC LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-24T15:31:22.299] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-24T15:31:22.300] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:31:22.313] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:31:22.315] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统用户表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:31:22.316] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:31:22.317] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统菜单表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:31:22.318] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:31:22.320] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:31:22.320] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:31:22.321] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:31:22.322] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:31:22.323] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统用户表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:31:22.324] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:31:22.324] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统菜单表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:31:22.326] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:31:22.327] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:31:22.328] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:31:22.719] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:31:22.729] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: null,
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:31:22.730] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) ORDER BY `loginTime` DESC LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-24T15:31:23.521] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:31:23.529] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: null,
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:31:23.530] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) ORDER BY `loginTime` DESC LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-24T15:31:24.141] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:31:24.147] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: null,
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:31:24.148] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) ORDER BY `loginTime` DESC LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-24T15:31:24.339] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:31:24.345] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: null,
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:31:24.346] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) ORDER BY `loginTime` DESC LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-24T15:31:24.952] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:31:24.956] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: null,
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:31:24.957] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) ORDER BY `loginTime` DESC LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-24T15:31:25.133] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:31:25.138] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: null,
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:31:25.139] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) ORDER BY `loginTime` DESC LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-24T15:31:25.779] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:31:25.785] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: null,
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:31:25.786] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) ORDER BY `loginTime` DESC LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-24T15:31:26.273] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:31:26.277] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: null,
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:31:26.278] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) ORDER BY `loginTime` DESC LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-24T15:31:26.455] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:31:26.459] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: null,
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:31:26.460] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) ORDER BY `loginTime` DESC LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-24T15:31:27.014] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:31:27.018] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: null,
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:31:27.019] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) ORDER BY `loginTime` DESC LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-24T15:31:27.954] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:31:27.957] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: null,
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:31:27.958] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) ORDER BY `loginTime` DESC LIMIT 20, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: [ [Array] ],
    limit: 10,
    offset: 20,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-24T15:31:28.732] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:31:28.736] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: null,
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:31:28.736] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) ORDER BY `loginTime` DESC LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-24T15:31:32.504] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:31:32.511] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: null,
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:31:32.513] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) ORDER BY `loginTime` DESC LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-24T15:31:36.963] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T15:31:36.968] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T15:31:36.973] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:31:36.990] [INFO] db - [
  "Executing (default): SELECT count(DISTINCT(`system_user`.`id`)) AS `count` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND (`system_user`.`user_name` LIKE '%%' AND `system_user`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`system_user`.`delete_time` IS NULL AND (`system_user`.`user_name` LIKE '%%' AND `system_user`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    attributes: [ [Array] ],
    include: [ [Object] ],
    distinct: true,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: null,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:31:36.991] [INFO] db - [
  "Executing (default): SELECT `system_user`.*, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName` FROM (SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime` FROM `system_users` AS `system_user` WHERE (`system_user`.`delete_time` IS NULL AND (`system_user`.`user_name` LIKE '%%' AND `system_user`.`real_name` LIKE '%%')) LIMIT 0, 10) AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`userId` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`system_user`.`delete_time` IS NULL AND (`system_user`.`user_name` LIKE '%%' AND `system_user`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    include: [ [Object] ],
    distinct: true,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: 10,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    subQuery: true,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:31:47.247] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:31:47.249] [INFO] db - [
  'Executing (default): SELECT `id` AS `menuId`, `menu_name` AS `menuName`, `parent_id` AS `parentId`, `path`, `component`, `perms`, `type`, `order_num` AS `orderNum`, `icon`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_menus` AS `system_menu` WHERE (`system_menu`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],     [Array],
      [Array],     'path',
      'component', 'perms',
      'type',      [Array],
      'icon',      [Array],
      [Array]
    ],
    originalAttributes: [
      'menuId',     'menuName',
      'parentId',   'path',
      'component',  'perms',
      'type',       'orderNum',
      'icon',       'createTime',
      'updateTime'
    ],
    where: '(`system_menu`.`delete_time` IS NULL)',
    tableNames: [ 'system_menus' ],
    type: 'SELECT',
    model: system_menu
  }
]
[2023-02-24T15:31:47.259] [INFO] db - [
  "Executing (default): SELECT count(DISTINCT(`system_role`.`id`)) AS `count` FROM `system_roles` AS `system_role` LEFT OUTER JOIN ( `system_role_menus` AS `system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_menus` ON `system_menus`.`id` = `system_menus->system_role_menu`.`menu_id` AND (`system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_role`.`id` = `system_menus->system_role_menu`.`role_id` AND (`system_menus`.`delete_time` IS NULL) WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%');",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: "(`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%')",
    limit: null,
    offset: null,
    distinct: true,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    model: system_role,
    includeNames: [ 'system_menus' ],
    includeMap: { system_menus: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_role,
    topLimit: null,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:31:47.260] [INFO] db - [
  "Executing (default): SELECT `system_role`.*, `system_menus`.`id` AS `system_menus.menuId`, `system_menus`.`id` AS `system_menus.id` FROM (SELECT `system_role`.`id` AS `roleId`, `system_role`.`role_name` AS `roleName`, `system_role`.`remark`, `system_role`.`create_time` AS `createTime`, `system_role`.`update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%') LIMIT 0, 10) AS `system_role` LEFT OUTER JOIN ( `system_role_menus` AS `system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_menus` ON `system_menus`.`id` = `system_menus->system_role_menu`.`menu_id` AND (`system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_role`.`roleId` = `system_menus->system_role_menu`.`role_id` AND (`system_menus`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: "(`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%')",
    limit: 10,
    offset: 0,
    distinct: true,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    hasJoin: true,
    model: system_role,
    includeNames: [ 'system_menus' ],
    includeMap: { system_menus: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_role,
    topLimit: 10,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    subQuery: true,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    tableNames: [
      'system_roles',
      'system_menus',
      'undefined',
      'system_role_menus'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:31:51.491] [INFO] db - [
  'Executing (default): SELECT `id` AS `menuId`, `menu_name` AS `menuName`, `parent_id` AS `parentId`, `path`, `component`, `perms`, `type`, `order_num` AS `orderNum`, `icon`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_menus` AS `system_menu` WHERE (`system_menu`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],     [Array],
      [Array],     'path',
      'component', 'perms',
      'type',      [Array],
      'icon',      [Array],
      [Array]
    ],
    originalAttributes: [
      'menuId',     'menuName',
      'parentId',   'path',
      'component',  'perms',
      'type',       'orderNum',
      'icon',       'createTime',
      'updateTime'
    ],
    where: '(`system_menu`.`delete_time` IS NULL)',
    tableNames: [ 'system_menus' ],
    type: 'SELECT',
    model: system_menu
  }
]
[2023-02-24T15:31:56.466] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:31:56.475] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    order: null,
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:31:56.476] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) ORDER BY `createTime` DESC LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-24T15:32:03.455] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:32:03.467] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:32:03.469] [INFO] db - [
  "Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`type_name` LIKE '%%' AND `basic_enum_type`.`type_code` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T15:32:05.652] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%5' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:32:09.769] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:32:09.778] [INFO] db - [
  "Executing (default): UPDATE `basic_enums` SET `delete_time`=? WHERE `delete_time` IS NULL AND `id` IN ('14')",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { id: [Array] },
    attributes: { exclude: [Array] },
    hooks: true,
    individualHooks: false,
    force: false,
    cascade: false,
    restartIdentity: false,
    type: 'BULKUPDATE',
    model: basic_enum,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [ '2023-02-24 15:32:09' ]
  }
]
[2023-02-24T15:32:09.797] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'DELETE',
      '{"ids":"14"}',
      '/api/basic/enum/delete/14',
      '枚举字典删除',
      28,
      '2023-02-24 15:32:09',
      '2023-02-24 15:32:09'
    ]
  }
]
[2023-02-24T15:32:09.818] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%5' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:32:16.508] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:32:16.516] [INFO] db - [
  'Executing (default): SELECT `basic_enum_type`.`id` AS `typeId`, `basic_enum_type`.`type_code` AS `typeCode`, `basic_enum_type`.`type_name` AS `typeName`, `basic_enum_type`.`remark`, `basic_enum_type`.`create_time` AS `createTime`, `basic_enum_type`.`update_time` AS `updateTime`, `basic_enums`.`id` AS `basic_enums.enumId`, `basic_enums`.`enum_code` AS `basic_enums.enumCode`, `basic_enums`.`enum_name` AS `basic_enums.enumName`, `basic_enums`.`shorthand_code` AS `basic_enums.shorthandCode`, `basic_enums`.`create_time` AS `basic_enums.createTime`, `basic_enums`.`update_time` AS `basic_enums.updateTime`, `basic_enums`.`basic_enum_type_type_id` AS `basic_enums.basicEnumTypeTypeId` FROM `basic_enum_types` AS `basic_enum_type` LEFT OUTER JOIN `basic_enums` AS `basic_enums` ON `basic_enum_type`.`id` = `basic_enums`.`basic_enum_type_type_id` AND (`basic_enums`.`delete_time` IS NULL) WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 5);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: '(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 5)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum_type,
    includeNames: [ 'basic_enums' ],
    includeMap: { basic_enums: [Object] },
    hasSingleAssociation: false,
    hasMultiAssociation: true,
    topModel: basic_enum_type,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [ 'basic_enum_types', 'basic_enums' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:32:16.519] [INFO] db - [
  'Executing (b37a1206-c21e-4578-b888-c5642a10b9b0): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'b37a1206-c21e-4578-b888-c5642a10b9b0',
      connection: [Connection]
    }
  }
]
[2023-02-24T15:32:16.541] [INFO] db - [
  'Executing (default): SELECT `id` AS `typeId`, `type_code` AS `typeCode`, `type_name` AS `typeName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `basic_enum_types` AS `basic_enum_type` WHERE (`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 5);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: '(`basic_enum_type`.`delete_time` IS NULL AND `basic_enum_type`.`id` = 5)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [
      'typeId',
      'typeCode',
      'typeName',
      'remark',
      'createTime',
      'updateTime'
    ],
    tableNames: [ 'basic_enum_types' ],
    type: 'SELECT',
    model: basic_enum_type
  }
]
[2023-02-24T15:32:16.543] [INFO] db - [
  'Executing (b37a1206-c21e-4578-b888-c5642a10b9b0): INSERT INTO `basic_enums` (`id`,`enum_code`,`enum_name`,`shorthand_code`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'b37a1206-c21e-4578-b888-c5642a10b9b0',
      connection: [Connection]
    },
    hooks: true,
    validate: true,
    fields: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime',
      'create_time',
      'update_time',
      'delete_time',
      'basicEnumTypeTypeId'
    ],
    defaultFields: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime',
      'create_time',
      'update_time',
      'delete_time',
      'basicEnumTypeTypeId'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: basic_enum {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: basic_enum,
    bind: [
      '03',
      '冷冻存储',
      'ldcc',
      '2023-02-24 15:32:16',
      '2023-02-24 15:32:16'
    ]
  }
]
[2023-02-24T15:32:16.549] [INFO] db - [
  'Executing (b37a1206-c21e-4578-b888-c5642a10b9b0): UPDATE `basic_enums` SET `basic_enum_type_type_id`=?,`update_time`=? WHERE (`delete_time` IS NULL AND `id` IN (15))',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'b37a1206-c21e-4578-b888-c5642a10b9b0',
      connection: [Connection]
    },
    where: { [Symbol(and)]: [Array] },
    validate: true,
    hooks: true,
    individualHooks: false,
    returning: false,
    force: false,
    sideEffects: true,
    type: 'BULKUPDATE',
    fields: [ 'basicEnumTypeTypeId', 'update_time' ],
    model: basic_enum,
    skip: undefined,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [ 5, '2023-02-24 15:32:16' ]
  }
]
[2023-02-24T15:32:16.569] [INFO] db - [
  'Executing (b37a1206-c21e-4578-b888-c5642a10b9b0): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'b37a1206-c21e-4578-b888-c5642a10b9b0',
      connection: [Connection],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-02-24T15:32:16.583] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'POST',
      '{"typeId":5,"typeName":"置放条件","enumName":"冷冻存储","shorthandCode":"ldcc","enumCode":"03"}',
      '/api/basic/enum/create',
      '枚举字典创建',
      75,
      '2023-02-24 15:32:16',
      '2023-02-24 15:32:16'
    ]
  }
]
[2023-02-24T15:32:16.611] [INFO] db - [
  "Executing (default): SELECT `basic_enum`.`id` AS `enumId`, `basic_enum`.`enum_code` AS `enumCode`, `basic_enum`.`enum_name` AS `enumName`, `basic_enum`.`shorthand_code` AS `shorthandCode`, `basic_enum`.`create_time` AS `createTime`, `basic_enum`.`update_time` AS `updateTime`, `basic_enum_type`.`id` AS `basic_enum_type.typeId`, `basic_enum_type`.`type_code` AS `basic_enum_type.typeCode`, `basic_enum_type`.`type_name` AS `basic_enum_type.typeName` FROM `basic_enums` AS `basic_enum` INNER JOIN `basic_enum_types` AS `basic_enum_type` ON `basic_enum`.`basic_enum_type_type_id` = `basic_enum_type`.`id` AND (`basic_enum_type`.`delete_time` IS NULL AND (`basic_enum_type`.`id` LIKE '%5' AND `basic_enum_type`.`type_code` LIKE '%')) WHERE (`basic_enum`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'enumId',
      'enumCode',
      'enumName',
      'shorthandCode',
      'createTime',
      'updateTime'
    ],
    hasJoin: true,
    model: basic_enum,
    includeNames: [ 'basic_enum_type' ],
    includeMap: { basic_enum_type: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: basic_enum,
    topLimit: undefined,
    hasDuplicating: undefined,
    hasRequired: true,
    hasWhere: true,
    hasIncludeWhere: true,
    hasIncludeRequired: true,
    subQuery: false,
    where: '(`basic_enum`.`delete_time` IS NULL)',
    tableNames: [ 'basic_enums', 'basic_enum_types' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:32:18.979] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:32:18.985] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    order: null,
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:32:18.986] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) ORDER BY `createTime` DESC LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-24T15:32:24.583] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:32:24.592] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    order: null,
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:32:24.593] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) ORDER BY `createTime` DESC LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-24T15:33:21.727] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-24T15:33:21.729] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:33:21.746] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:33:21.747] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统用户表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:33:21.748] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:33:21.750] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统菜单表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:33:21.751] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:33:21.753] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:33:21.754] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:33:21.755] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:33:21.757] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:33:21.759] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统用户表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:33:21.760] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:33:21.761] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统菜单表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:33:21.763] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:33:21.764] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:33:21.765] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:33:25.528] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T15:33:25.537] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T15:33:25.554] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:33:25.580] [INFO] db - [
  "Executing (default): SELECT count(DISTINCT(`system_user`.`id`)) AS `count` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND (`system_user`.`user_name` LIKE '%%' AND `system_user`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`system_user`.`delete_time` IS NULL AND (`system_user`.`user_name` LIKE '%%' AND `system_user`.`real_name` LIKE '%%'))",
    order: null,
    limit: null,
    offset: null,
    attributes: [ [Array] ],
    include: [ [Object] ],
    distinct: true,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: null,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:33:25.582] [INFO] db - [
  "Executing (default): SELECT `system_user`.*, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName` FROM (SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime` FROM `system_users` AS `system_user` WHERE (`system_user`.`delete_time` IS NULL AND (`system_user`.`user_name` LIKE '%%' AND `system_user`.`real_name` LIKE '%%')) ORDER BY `system_user`.`create_time` DESC LIMIT 0, 10) AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`userId` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) ORDER BY `createTime` DESC;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`system_user`.`delete_time` IS NULL AND (`system_user`.`user_name` LIKE '%%' AND `system_user`.`real_name` LIKE '%%'))",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    include: [ [Object] ],
    distinct: true,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: 10,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    subQuery: true,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:33:33.131] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:33:33.135] [INFO] db - [
  'Executing (default): SELECT `id` AS `menuId`, `menu_name` AS `menuName`, `parent_id` AS `parentId`, `path`, `component`, `perms`, `type`, `order_num` AS `orderNum`, `icon`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_menus` AS `system_menu` WHERE (`system_menu`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],     [Array],
      [Array],     'path',
      'component', 'perms',
      'type',      [Array],
      'icon',      [Array],
      [Array]
    ],
    originalAttributes: [
      'menuId',     'menuName',
      'parentId',   'path',
      'component',  'perms',
      'type',       'orderNum',
      'icon',       'createTime',
      'updateTime'
    ],
    where: '(`system_menu`.`delete_time` IS NULL)',
    tableNames: [ 'system_menus' ],
    type: 'SELECT',
    model: system_menu
  }
]
[2023-02-24T15:33:33.144] [INFO] db - [
  "Executing (default): SELECT count(DISTINCT(`system_role`.`id`)) AS `count` FROM `system_roles` AS `system_role` LEFT OUTER JOIN ( `system_role_menus` AS `system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_menus` ON `system_menus`.`id` = `system_menus->system_role_menu`.`menu_id` AND (`system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_role`.`id` = `system_menus->system_role_menu`.`role_id` AND (`system_menus`.`delete_time` IS NULL) WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%');",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: "(`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%')",
    limit: null,
    offset: null,
    distinct: true,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    model: system_role,
    includeNames: [ 'system_menus' ],
    includeMap: { system_menus: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_role,
    topLimit: null,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:33:33.145] [INFO] db - [
  "Executing (default): SELECT `system_role`.*, `system_menus`.`id` AS `system_menus.menuId`, `system_menus`.`id` AS `system_menus.id` FROM (SELECT `system_role`.`id` AS `roleId`, `system_role`.`role_name` AS `roleName`, `system_role`.`remark`, `system_role`.`create_time` AS `createTime`, `system_role`.`update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%') LIMIT 0, 10) AS `system_role` LEFT OUTER JOIN ( `system_role_menus` AS `system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_menus` ON `system_menus`.`id` = `system_menus->system_role_menu`.`menu_id` AND (`system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_role`.`roleId` = `system_menus->system_role_menu`.`role_id` AND (`system_menus`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: "(`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%')",
    limit: 10,
    offset: 0,
    distinct: true,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    hasJoin: true,
    model: system_role,
    includeNames: [ 'system_menus' ],
    includeMap: { system_menus: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_role,
    topLimit: 10,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    subQuery: true,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    tableNames: [
      'system_roles',
      'system_menus',
      'undefined',
      'system_role_menus'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:33:52.237] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-24T15:33:52.239] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:33:52.254] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:33:52.255] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统用户表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:33:52.256] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:33:52.257] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统菜单表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:33:52.257] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:33:52.258] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:33:52.259] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-24T15:33:52.260] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:33:52.261] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:33:52.262] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统用户表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:33:52.262] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:33:52.263] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '系统菜单表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:33:52.264] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:33:52.266] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:33:52.266] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-24T15:33:52.888] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:33:52.900] [INFO] db - [
  "Executing (default): SELECT count(DISTINCT(`system_role`.`id`)) AS `count` FROM `system_roles` AS `system_role` LEFT OUTER JOIN ( `system_role_menus` AS `system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_menus` ON `system_menus`.`id` = `system_menus->system_role_menu`.`menu_id` AND (`system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_role`.`id` = `system_menus->system_role_menu`.`role_id` AND (`system_menus`.`delete_time` IS NULL) WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%');",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: "(`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%')",
    order: null,
    limit: null,
    offset: null,
    distinct: true,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    model: system_role,
    includeNames: [ 'system_menus' ],
    includeMap: { system_menus: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_role,
    topLimit: null,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:33:52.901] [INFO] db - [
  "Executing (default): SELECT `system_role`.*, `system_menus`.`id` AS `system_menus.menuId`, `system_menus`.`id` AS `system_menus.id` FROM (SELECT `system_role`.`id` AS `roleId`, `system_role`.`role_name` AS `roleName`, `system_role`.`remark`, `system_role`.`create_time` AS `createTime`, `system_role`.`update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%') ORDER BY `system_role`.`create_time` DESC LIMIT 0, 10) AS `system_role` LEFT OUTER JOIN ( `system_role_menus` AS `system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_menus` ON `system_menus`.`id` = `system_menus->system_role_menu`.`menu_id` AND (`system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_role`.`roleId` = `system_menus->system_role_menu`.`role_id` AND (`system_menus`.`delete_time` IS NULL) ORDER BY `createTime` DESC;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: "(`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%')",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    distinct: true,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    hasJoin: true,
    model: system_role,
    includeNames: [ 'system_menus' ],
    includeMap: { system_menus: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_role,
    topLimit: 10,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    subQuery: true,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    tableNames: [
      'system_roles',
      'system_menus',
      'undefined',
      'system_role_menus'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:33:53.729] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:33:53.736] [INFO] db - [
  "Executing (default): SELECT count(DISTINCT(`system_role`.`id`)) AS `count` FROM `system_roles` AS `system_role` LEFT OUTER JOIN ( `system_role_menus` AS `system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_menus` ON `system_menus`.`id` = `system_menus->system_role_menu`.`menu_id` AND (`system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_role`.`id` = `system_menus->system_role_menu`.`role_id` AND (`system_menus`.`delete_time` IS NULL) WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%');",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: "(`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%')",
    order: null,
    limit: null,
    offset: null,
    distinct: true,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    model: system_role,
    includeNames: [ 'system_menus' ],
    includeMap: { system_menus: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_role,
    topLimit: null,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:33:53.737] [INFO] db - [
  "Executing (default): SELECT `system_role`.*, `system_menus`.`id` AS `system_menus.menuId`, `system_menus`.`id` AS `system_menus.id` FROM (SELECT `system_role`.`id` AS `roleId`, `system_role`.`role_name` AS `roleName`, `system_role`.`remark`, `system_role`.`create_time` AS `createTime`, `system_role`.`update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%') ORDER BY `system_role`.`create_time` DESC LIMIT 0, 10) AS `system_role` LEFT OUTER JOIN ( `system_role_menus` AS `system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_menus` ON `system_menus`.`id` = `system_menus->system_role_menu`.`menu_id` AND (`system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_role`.`roleId` = `system_menus->system_role_menu`.`role_id` AND (`system_menus`.`delete_time` IS NULL) ORDER BY `createTime` DESC;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: "(`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%')",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    distinct: true,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    hasJoin: true,
    model: system_role,
    includeNames: [ 'system_menus' ],
    includeMap: { system_menus: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_role,
    topLimit: 10,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    subQuery: true,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    tableNames: [
      'system_roles',
      'system_menus',
      'undefined',
      'system_role_menus'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:49:22.732] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:49:22.741] [INFO] db - [
  "Executing (default): SELECT count(DISTINCT(`system_role`.`id`)) AS `count` FROM `system_roles` AS `system_role` LEFT OUTER JOIN ( `system_role_menus` AS `system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_menus` ON `system_menus`.`id` = `system_menus->system_role_menu`.`menu_id` AND (`system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_role`.`id` = `system_menus->system_role_menu`.`role_id` AND (`system_menus`.`delete_time` IS NULL) WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%');",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: "(`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%')",
    order: null,
    limit: null,
    offset: null,
    distinct: true,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    model: system_role,
    includeNames: [ 'system_menus' ],
    includeMap: { system_menus: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_role,
    topLimit: null,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:49:22.742] [INFO] db - [
  "Executing (default): SELECT `system_role`.*, `system_menus`.`id` AS `system_menus.menuId`, `system_menus`.`id` AS `system_menus.id` FROM (SELECT `system_role`.`id` AS `roleId`, `system_role`.`role_name` AS `roleName`, `system_role`.`remark`, `system_role`.`create_time` AS `createTime`, `system_role`.`update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%') ORDER BY `system_role`.`create_time` DESC LIMIT 0, 10) AS `system_role` LEFT OUTER JOIN ( `system_role_menus` AS `system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_menus` ON `system_menus`.`id` = `system_menus->system_role_menu`.`menu_id` AND (`system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_role`.`roleId` = `system_menus->system_role_menu`.`role_id` AND (`system_menus`.`delete_time` IS NULL) ORDER BY `createTime` DESC;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: "(`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%')",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    distinct: true,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    hasJoin: true,
    model: system_role,
    includeNames: [ 'system_menus' ],
    includeMap: { system_menus: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_role,
    topLimit: 10,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    subQuery: true,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    tableNames: [
      'system_roles',
      'system_menus',
      'undefined',
      'system_role_menus'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:49:23.891] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-24T15:49:23.898] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-24T15:49:23.902] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:49:23.914] [INFO] db - [
  "Executing (default): SELECT count(DISTINCT(`system_user`.`id`)) AS `count` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND (`system_user`.`user_name` LIKE '%%' AND `system_user`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`system_user`.`delete_time` IS NULL AND (`system_user`.`user_name` LIKE '%%' AND `system_user`.`real_name` LIKE '%%'))",
    order: null,
    limit: null,
    offset: null,
    attributes: [ [Array] ],
    include: [ [Object] ],
    distinct: true,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: null,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:49:23.915] [INFO] db - [
  "Executing (default): SELECT `system_user`.*, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName` FROM (SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime` FROM `system_users` AS `system_user` WHERE (`system_user`.`delete_time` IS NULL AND (`system_user`.`user_name` LIKE '%%' AND `system_user`.`real_name` LIKE '%%')) ORDER BY `system_user`.`create_time` DESC LIMIT 0, 10) AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`userId` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) ORDER BY `createTime` DESC;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`system_user`.`delete_time` IS NULL AND (`system_user`.`user_name` LIKE '%%' AND `system_user`.`real_name` LIKE '%%'))",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    include: [ [Object] ],
    distinct: true,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: 10,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    subQuery: true,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:49:29.852] [INFO] db - [
  "Executing (default): SELECT `id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `password`, `gender`, `avatar`, `mobile`, `email`, `dept_id` AS `deptId`, `org_id` AS `orgId`, `status`, `description`, `last_login_time` AS `lastLoginTime`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_users` AS `system_user` WHERE (`system_user`.`delete_time` IS NULL AND (`system_user`.`password` = 'e10adc3949ba59abbe56e057f20f883e' AND `system_user`.`user_name` = 'xunxiao')) LIMIT 1;",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`system_user`.`delete_time` IS NULL AND (`system_user`.`password` = 'e10adc3949ba59abbe56e057f20f883e' AND `system_user`.`user_name` = 'xunxiao'))",
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  'password',
      'gender', 'avatar',
      'mobile', 'email',
      [Array],  [Array],
      'status', 'description',
      [Array],  [Array],
      [Array]
    ],
    originalAttributes: [
      'userId',        'userName',
      'realName',      'password',
      'gender',        'avatar',
      'mobile',        'email',
      'deptId',        'orgId',
      'status',        'description',
      'lastLoginTime', 'createTime',
      'updateTime'
    ],
    tableNames: [ 'system_users' ],
    type: 'SELECT',
    model: system_user
  }
]
[2023-02-24T15:49:29.868] [INFO] db - [
  'Executing (default): INSERT INTO `log_logins` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`msg`,`status`,`last_login_time`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'msg',
      'status',      'lastLoginTime',
      'loginTime',   'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'msg',
      'status',      'lastLoginTime',
      'loginTime',   'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_login {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_login,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      '登陆成功',
      1,
      '2023-02-21 15:41:05',
      '2023-02-24 15:49:29',
      '2023-02-24 15:49:29'
    ]
  }
]
[2023-02-24T15:49:29.876] [INFO] db - [
  'Executing (ab967007-07ea-40ac-b1e6-bc18b7c86fae): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'ab967007-07ea-40ac-b1e6-bc18b7c86fae',
      connection: [Connection]
    }
  }
]
[2023-02-24T15:49:29.881] [INFO] db - [
  'Executing (ab967007-07ea-40ac-b1e6-bc18b7c86fae): SELECT `id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `password`, `gender`, `avatar`, `mobile`, `email`, `dept_id` AS `deptId`, `org_id` AS `orgId`, `status`, `description`, `last_login_time` AS `lastLoginTime`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_users` AS `system_user` WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'ab967007-07ea-40ac-b1e6-bc18b7c86fae',
      connection: [Connection]
    },
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  'password',
      'gender', 'avatar',
      'mobile', 'email',
      [Array],  [Array],
      'status', 'description',
      [Array],  [Array],
      [Array]
    ],
    originalAttributes: [
      'userId',        'userName',
      'realName',      'password',
      'gender',        'avatar',
      'mobile',        'email',
      'deptId',        'orgId',
      'status',        'description',
      'lastLoginTime', 'createTime',
      'updateTime'
    ],
    tableNames: [ 'system_users' ],
    type: 'SELECT',
    model: system_user
  }
]
[2023-02-24T15:49:29.884] [INFO] db - [
  'Executing (default): UPDATE `system_users` SET `id`=?,`last_login_time`=?,`update_time`=? WHERE (`delete_time` IS NULL AND `id` = ?)',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { [Symbol(and)]: [Array] },
    validate: true,
    hooks: true,
    individualHooks: false,
    returning: false,
    force: false,
    sideEffects: true,
    type: 'BULKUPDATE',
    fields: [ 'userId', 'lastLoginTime', 'update_time' ],
    model: system_user,
    skip: undefined,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [ 1, '2023-02-24 15:49:29', '2023-02-24 15:49:29', 1 ]
  }
]
[2023-02-24T15:49:29.889] [INFO] db - [
  'Executing (ab967007-07ea-40ac-b1e6-bc18b7c86fae): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'ab967007-07ea-40ac-b1e6-bc18b7c86fae',
      connection: [Connection],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-02-24T15:49:29.906] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:49:29.916] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:49:34.393] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T15:49:34.399] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: null,
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T15:49:34.400] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) ORDER BY `loginTime` DESC LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-24T16:32:18.887] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-24T16:32:18.895] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: null,
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-24T16:32:18.897] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) ORDER BY `loginTime` DESC LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    order: [ [Array] ],
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
