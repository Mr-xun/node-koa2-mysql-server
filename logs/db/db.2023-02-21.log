[2023-02-21T08:27:29.723] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T08:27:29.724] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T08:27:29.751] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T08:27:29.752] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T08:27:29.754] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T08:27:29.755] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T08:27:29.757] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T08:27:29.758] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T08:27:29.759] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T08:27:29.760] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'post' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T08:27:29.761] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'tag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T08:27:29.764] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'postTag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T08:27:29.765] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T08:27:29.766] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T08:27:29.767] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T08:27:29.768] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T08:27:29.769] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T08:27:29.770] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T08:27:29.771] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T08:27:29.772] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T08:27:29.773] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `post`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T08:27:29.774] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `tag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T08:27:29.775] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `postTag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T08:33:46.908] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T08:33:46.910] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T08:33:46.922] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T08:33:46.923] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T08:33:46.925] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T08:33:46.927] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T08:33:46.928] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T08:33:46.930] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T08:33:46.931] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T08:33:46.932] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'post' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T08:33:46.933] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'tag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T08:33:46.934] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'postTag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T08:33:46.935] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T08:33:46.936] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T08:33:46.937] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T08:33:46.939] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T08:33:46.940] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T08:33:46.942] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T08:33:46.944] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T08:33:46.944] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T08:33:46.946] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `post`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T08:33:46.947] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `tag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T08:33:46.948] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `postTag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:09:19.469] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T09:09:19.471] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:09:19.483] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:09:19.485] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:09:19.486] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:09:19.487] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:09:19.488] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:09:19.489] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:09:19.490] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:09:19.491] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'post' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:09:19.492] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'tag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:09:19.493] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'postTag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:09:19.494] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:09:19.494] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:09:19.495] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:09:19.496] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:09:19.497] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:09:19.498] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:09:19.499] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:09:19.500] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:09:19.501] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `post`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:09:19.502] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `tag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:09:19.503] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `postTag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:09:35.831] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T09:09:35.832] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:09:35.845] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:09:35.846] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:09:35.848] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:09:35.849] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:09:35.850] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:09:35.851] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:09:35.852] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:09:35.853] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'post' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:09:35.855] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'tag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:09:35.856] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'postTag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:09:35.857] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:09:35.857] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:09:35.858] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:09:35.859] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:09:35.860] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:09:35.862] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:09:35.863] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:09:35.863] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:09:35.864] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `post`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:09:35.865] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `tag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:09:35.866] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `postTag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:10:12.024] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T09:10:12.028] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:10:12.046] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:10:12.048] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:10:12.050] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:10:12.051] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:10:12.052] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:10:12.054] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:10:12.055] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:10:12.056] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'post' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:10:12.057] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'tag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:10:12.058] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'postTag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:10:12.060] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:10:12.061] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:10:12.063] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:10:12.065] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:10:12.067] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:10:12.068] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:10:12.070] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:10:12.071] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:10:12.071] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `post`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:10:12.072] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `tag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:10:12.073] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `postTag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:11:57.442] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T09:11:57.460] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`createTime` BETWEEN '' AND '' AND `log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`createTime` BETWEEN '' AND '' AND `log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T09:11:57.495] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`createTime` BETWEEN '' AND '' AND `log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`createTime` BETWEEN '' AND '' AND `log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T09:12:52.521] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T09:12:52.524] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:12:52.546] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:12:52.547] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:12:52.548] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:12:52.550] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:12:52.551] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:12:52.553] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:12:52.554] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:12:52.554] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'post' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:12:52.555] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'tag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:12:52.557] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'postTag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:12:52.558] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:12:52.560] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:12:52.561] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:12:52.563] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:12:52.564] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:12:52.566] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:12:52.568] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:12:52.569] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:12:52.570] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `post`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:12:52.571] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `tag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:12:52.573] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `postTag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:12:54.709] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T09:12:54.721] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN 'Invalid date' AND 'Invalid date'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN 'Invalid date' AND 'Invalid date'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T09:12:54.723] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN 'Invalid date' AND 'Invalid date')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN 'Invalid date' AND 'Invalid date'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T09:13:49.110] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T09:13:49.123] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 11:53:51' AND '2023-02-20 15:53:51'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 11:53:51' AND '2023-02-20 15:53:51'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T09:13:49.126] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 11:53:51' AND '2023-02-20 15:53:51')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 11:53:51' AND '2023-02-20 15:53:51'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T09:14:08.646] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T09:14:08.657] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 15:51:51' AND '2023-02-20 15:53:51'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 15:51:51' AND '2023-02-20 15:53:51'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T09:14:08.658] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 15:51:51' AND '2023-02-20 15:53:51')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 15:51:51' AND '2023-02-20 15:53:51'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T09:15:18.226] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T09:15:18.233] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 12:51:51' AND '2023-02-20 15:53:51'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 12:51:51' AND '2023-02-20 15:53:51'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T09:15:18.235] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 12:51:51' AND '2023-02-20 15:53:51')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 12:51:51' AND '2023-02-20 15:53:51'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T09:23:30.881] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T09:23:30.883] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:23:30.897] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:23:30.899] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:23:30.900] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:23:30.901] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:23:30.902] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:23:30.904] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:23:30.906] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:23:30.908] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'post' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:23:30.910] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'tag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:23:30.912] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'postTag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:23:30.913] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:23:30.914] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:23:30.916] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:23:30.917] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:23:30.918] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:23:30.920] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:23:30.921] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:23:30.921] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:23:30.923] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `post`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:23:30.926] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `tag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:23:30.928] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `postTag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:23:36.215] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T09:23:36.231] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN 'Invalid date' AND 'Invalid date'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN 'Invalid date' AND 'Invalid date'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T09:23:36.232] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN 'Invalid date' AND 'Invalid date')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN 'Invalid date' AND 'Invalid date'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T09:23:39.115] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T09:23:39.123] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN 'Invalid date' AND 'Invalid date'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN 'Invalid date' AND 'Invalid date'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T09:23:39.125] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN 'Invalid date' AND 'Invalid date')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN 'Invalid date' AND 'Invalid date'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T09:24:49.724] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T09:24:49.725] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:24:49.738] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:24:49.739] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:24:49.741] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:24:49.742] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:24:49.744] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:24:49.745] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:24:49.747] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:24:49.747] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'post' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:24:49.748] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'tag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:24:49.749] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'postTag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:24:49.750] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:24:49.751] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:24:49.752] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:24:49.753] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:24:49.754] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:24:49.756] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:24:49.758] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:24:49.759] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:24:49.760] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `post`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:24:49.761] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `tag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:24:49.763] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `postTag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:24:52.989] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T09:24:54.112] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN 'Invalid date' AND 'Invalid date'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN 'Invalid date' AND 'Invalid date'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T09:24:54.113] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN 'Invalid date' AND 'Invalid date')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN 'Invalid date' AND 'Invalid date'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T09:24:55.905] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T09:24:55.914] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN 'Invalid date' AND 'Invalid date'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN 'Invalid date' AND 'Invalid date'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T09:24:55.915] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN 'Invalid date' AND 'Invalid date')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN 'Invalid date' AND 'Invalid date'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T09:28:12.133] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T09:28:12.134] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:28:12.147] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:28:12.149] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:28:12.150] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:28:12.151] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:28:12.152] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:28:12.153] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:28:12.155] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:28:12.156] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'post' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:28:12.157] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'tag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:28:12.158] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'postTag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:28:12.158] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:28:12.159] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:28:12.160] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:28:12.161] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:28:12.162] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:28:12.164] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:28:12.166] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:28:12.167] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:28:12.168] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `post`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:28:12.169] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `tag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:28:12.170] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `postTag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:28:27.429] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T09:28:27.432] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:28:27.446] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:28:27.447] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:28:27.448] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:28:27.450] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:28:27.451] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:28:27.453] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:28:27.454] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:28:27.455] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'post' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:28:27.457] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'tag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:28:27.458] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'postTag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:28:27.459] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:28:27.461] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:28:27.462] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:28:27.465] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:28:27.466] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:28:27.470] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:28:27.471] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:28:27.473] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:28:27.474] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `post`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:28:27.475] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `tag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:28:27.476] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `postTag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:28:28.276] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T09:28:28.288] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T09:28:28.289] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T09:28:45.292] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T09:28:45.307] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-17 16:05:42' AND '2023-02-17 16:05:42'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-17 16:05:42' AND '2023-02-17 16:05:42'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T09:28:45.307] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-17 16:05:42' AND '2023-02-17 16:05:42')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-17 16:05:42' AND '2023-02-17 16:05:42'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T09:29:19.416] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T09:29:19.418] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:29:19.431] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:29:19.432] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:29:19.433] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:29:19.435] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:29:19.436] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:29:19.439] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:29:19.440] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:29:19.441] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'post' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:29:19.442] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'tag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:29:19.443] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'postTag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:29:19.444] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:29:19.445] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:29:19.446] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:29:19.447] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:29:19.448] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:29:19.450] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:29:19.452] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:29:19.453] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:29:19.455] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `post`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:29:19.456] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `tag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:29:19.457] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `postTag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:29:59.303] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T09:29:59.305] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:29:59.317] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:29:59.319] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:29:59.321] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:29:59.322] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:29:59.323] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:29:59.324] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:29:59.326] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:29:59.328] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'post' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:29:59.329] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'tag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:29:59.331] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'postTag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:29:59.332] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:29:59.333] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:29:59.334] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:29:59.337] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:29:59.338] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:29:59.340] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:29:59.342] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:29:59.344] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:29:59.346] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `post`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:29:59.348] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `tag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:29:59.350] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `postTag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:30:33.443] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T09:30:33.457] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`loginTime` BETWEEN '2023-02-20 15:53:51' AND '2023-02-20 15:53:51' AND `log_operation`.`user_name` LIKE '%1%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`loginTime` BETWEEN '2023-02-20 15:53:51' AND '2023-02-20 15:53:51' AND `log_operation`.`user_name` LIKE '%1%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T09:30:33.466] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`loginTime` BETWEEN '2023-02-20 15:53:51' AND '2023-02-20 15:53:51' AND `log_operation`.`user_name` LIKE '%1%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`loginTime` BETWEEN '2023-02-20 15:53:51' AND '2023-02-20 15:53:51' AND `log_operation`.`user_name` LIKE '%1%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T09:31:14.335] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T09:31:14.337] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:31:14.351] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:31:14.353] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:31:14.353] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:31:14.354] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:31:14.356] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:31:14.358] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:31:14.360] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:31:14.362] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'post' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:31:14.363] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'tag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:31:14.365] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'postTag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:31:14.366] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:31:14.367] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:31:14.368] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:31:14.369] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:31:14.370] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:31:14.372] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:31:14.373] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:31:14.374] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:31:14.375] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `post`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:31:14.375] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `tag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:31:14.377] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `postTag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:31:15.058] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T09:31:15.077] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%1%' AND `log_operation`.`real_name` LIKE '%%' AND `log_operation`.`create_time` BETWEEN '2023-02-20 15:53:51' AND '2023-02-20 15:53:51'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%1%' AND `log_operation`.`real_name` LIKE '%%' AND `log_operation`.`create_time` BETWEEN '2023-02-20 15:53:51' AND '2023-02-20 15:53:51'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T09:31:15.081] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%1%' AND `log_operation`.`real_name` LIKE '%%' AND `log_operation`.`create_time` BETWEEN '2023-02-20 15:53:51' AND '2023-02-20 15:53:51')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%1%' AND `log_operation`.`real_name` LIKE '%%' AND `log_operation`.`create_time` BETWEEN '2023-02-20 15:53:51' AND '2023-02-20 15:53:51'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T09:31:28.246] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T09:31:28.255] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%1%' AND `log_operation`.`real_name` LIKE '%%' AND `log_operation`.`create_time` BETWEEN '2023-02-19 15:53:51' AND '2023-02-20 15:53:51'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%1%' AND `log_operation`.`real_name` LIKE '%%' AND `log_operation`.`create_time` BETWEEN '2023-02-19 15:53:51' AND '2023-02-20 15:53:51'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T09:31:28.256] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%1%' AND `log_operation`.`real_name` LIKE '%%' AND `log_operation`.`create_time` BETWEEN '2023-02-19 15:53:51' AND '2023-02-20 15:53:51')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%1%' AND `log_operation`.`real_name` LIKE '%%' AND `log_operation`.`create_time` BETWEEN '2023-02-19 15:53:51' AND '2023-02-20 15:53:51'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T09:31:33.091] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T09:31:33.099] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%' AND `log_operation`.`create_time` BETWEEN '2023-02-19 15:53:51' AND '2023-02-20 15:53:51'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%' AND `log_operation`.`create_time` BETWEEN '2023-02-19 15:53:51' AND '2023-02-20 15:53:51'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T09:31:33.101] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%' AND `log_operation`.`create_time` BETWEEN '2023-02-19 15:53:51' AND '2023-02-20 15:53:51')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%' AND `log_operation`.`create_time` BETWEEN '2023-02-19 15:53:51' AND '2023-02-20 15:53:51'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T09:31:56.138] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T09:31:56.147] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%' AND `log_operation`.`create_time` BETWEEN '2023-02-20 17:44:06' AND '2023-02-20 17:44:06'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%' AND `log_operation`.`create_time` BETWEEN '2023-02-20 17:44:06' AND '2023-02-20 17:44:06'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T09:31:56.148] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%' AND `log_operation`.`create_time` BETWEEN '2023-02-20 17:44:06' AND '2023-02-20 17:44:06')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%' AND `log_operation`.`create_time` BETWEEN '2023-02-20 17:44:06' AND '2023-02-20 17:44:06'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T09:32:12.143] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T09:32:12.156] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%' AND `log_operation`.`create_time` BETWEEN '2023-02-20 17:30:06' AND '2023-02-20 17:44:06'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%' AND `log_operation`.`create_time` BETWEEN '2023-02-20 17:30:06' AND '2023-02-20 17:44:06'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T09:32:12.157] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%' AND `log_operation`.`create_time` BETWEEN '2023-02-20 17:30:06' AND '2023-02-20 17:44:06')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%' AND `log_operation`.`create_time` BETWEEN '2023-02-20 17:30:06' AND '2023-02-20 17:44:06'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T09:33:02.964] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T09:33:02.967] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:33:02.979] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:33:02.980] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:33:02.983] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:33:02.986] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:33:02.987] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:33:02.989] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:33:02.990] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:33:02.992] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'post' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:33:02.993] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'tag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:33:02.994] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'postTag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:33:02.995] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:33:02.996] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:33:02.998] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:33:02.999] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:33:03.001] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:33:03.003] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:33:03.005] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:33:03.006] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:33:03.007] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `post`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:33:03.008] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `tag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:33:03.009] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `postTag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:33:09.570] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T09:33:09.572] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:33:09.588] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:33:09.590] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:33:09.592] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:33:09.593] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:33:09.594] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:33:09.596] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:33:09.597] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:33:09.598] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'post' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:33:09.599] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'tag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:33:09.601] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'postTag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:33:09.602] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:33:09.603] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:33:09.604] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:33:09.605] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:33:09.607] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:33:09.611] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:33:09.613] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:33:09.614] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:33:09.616] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `post`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:33:09.618] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `tag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:33:09.619] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `postTag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:33:11.207] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T09:33:11.233] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%' AND `log_operation`.`create_time` BETWEEN '2023-02-20 17:30:06' AND '2023-02-20 17:44:06'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%' AND `log_operation`.`create_time` BETWEEN '2023-02-20 17:30:06' AND '2023-02-20 17:44:06'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T09:33:11.234] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%' AND `log_operation`.`create_time` BETWEEN '2023-02-20 17:30:06' AND '2023-02-20 17:44:06')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%' AND `log_operation`.`create_time` BETWEEN '2023-02-20 17:30:06' AND '2023-02-20 17:44:06'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T09:33:18.969] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T09:33:18.971] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:33:18.985] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:33:18.986] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:33:18.987] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:33:18.988] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:33:18.989] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:33:18.990] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:33:18.991] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:33:18.992] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'post' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:33:18.993] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'tag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:33:18.994] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'postTag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:33:18.995] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:33:18.996] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:33:18.997] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:33:18.998] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:33:18.998] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:33:19.000] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:33:19.001] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:33:19.002] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:33:19.003] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `post`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:33:19.004] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `tag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:33:19.004] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `postTag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:34:07.368] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T09:34:07.370] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:34:07.383] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:34:07.384] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:34:07.385] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:34:07.387] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:34:07.389] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:34:07.391] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:34:07.392] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:34:07.393] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'post' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:34:07.394] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'tag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:34:07.395] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'postTag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T09:34:07.396] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:34:07.396] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:34:07.397] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:34:07.398] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:34:07.399] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:34:07.401] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:34:07.402] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:34:07.404] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:34:07.405] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `post`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:34:07.406] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `tag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:34:07.406] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `postTag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T09:37:44.292] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T09:37:44.304] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T09:37:44.306] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T09:42:13.659] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T09:42:13.666] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T09:42:13.668] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T09:42:22.467] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T09:42:22.476] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T09:42:22.477] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T09:46:52.502] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T09:46:52.510] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T09:46:52.513] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T09:47:25.935] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T09:47:25.942] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T09:47:25.944] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T09:47:30.024] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T09:47:30.033] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T09:47:30.034] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T09:47:32.756] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T09:47:32.764] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T09:47:32.765] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T09:47:36.900] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T09:47:36.905] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T09:47:36.906] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T09:47:44.387] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T09:47:44.398] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-02 00:00:00' AND '2023-02-08 00:00:00'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-02 00:00:00' AND '2023-02-08 00:00:00'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T09:47:44.399] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-02 00:00:00' AND '2023-02-08 00:00:00')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-02 00:00:00' AND '2023-02-08 00:00:00'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T09:47:50.902] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T09:47:50.908] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 00:00:00' AND '2023-02-21 00:00:00'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 00:00:00' AND '2023-02-21 00:00:00'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T09:47:50.909] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 00:00:00' AND '2023-02-21 00:00:00')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 00:00:00' AND '2023-02-21 00:00:00'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T09:47:55.991] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T09:47:55.996] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-21 00:00:00' AND '2023-02-21 00:00:00'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-21 00:00:00' AND '2023-02-21 00:00:00'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T09:47:55.998] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-21 00:00:00' AND '2023-02-21 00:00:00')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-21 00:00:00' AND '2023-02-21 00:00:00'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T09:47:59.908] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T09:47:59.915] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 00:00:00' AND '2023-02-21 00:00:00'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 00:00:00' AND '2023-02-21 00:00:00'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T09:47:59.916] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 00:00:00' AND '2023-02-21 00:00:00')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 00:00:00' AND '2023-02-21 00:00:00'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T09:48:05.170] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T09:48:05.177] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-19 00:00:00' AND '2023-02-20 00:00:00'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-19 00:00:00' AND '2023-02-20 00:00:00'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T09:48:05.179] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-19 00:00:00' AND '2023-02-20 00:00:00')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-19 00:00:00' AND '2023-02-20 00:00:00'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T09:48:10.156] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T09:48:10.162] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-19 00:00:00' AND '2023-02-21 00:00:00'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-19 00:00:00' AND '2023-02-21 00:00:00'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T09:48:10.163] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-19 00:00:00' AND '2023-02-21 00:00:00')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-19 00:00:00' AND '2023-02-21 00:00:00'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T09:50:37.381] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T09:50:37.386] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-15 00:00:00' AND '2023-02-17 00:00:00'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-15 00:00:00' AND '2023-02-17 00:00:00'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T09:50:37.389] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-15 00:00:00' AND '2023-02-17 00:00:00')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-15 00:00:00' AND '2023-02-17 00:00:00'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T09:50:44.172] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T09:50:44.177] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T09:50:44.178] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T09:50:52.820] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T09:50:52.827] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-10 09:50:44' AND '2023-02-11 09:50:44'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-10 09:50:44' AND '2023-02-11 09:50:44'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T09:50:52.829] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-10 09:50:44' AND '2023-02-11 09:50:44')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-10 09:50:44' AND '2023-02-11 09:50:44'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T09:51:00.798] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T09:51:00.803] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 00:00:00' AND '2023-02-21 00:00:00'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 00:00:00' AND '2023-02-21 00:00:00'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T09:51:00.805] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 00:00:00' AND '2023-02-21 00:00:00')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 00:00:00' AND '2023-02-21 00:00:00'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T09:51:14.186] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T09:51:14.191] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T09:51:14.192] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T09:52:20.304] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T09:52:20.310] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T09:52:20.312] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T09:56:59.486] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T09:56:59.497] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T09:56:59.499] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T09:57:09.888] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T09:57:09.893] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T09:57:09.894] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T09:57:17.081] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T09:57:17.088] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T09:57:17.089] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T09:58:47.046] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T09:58:47.054] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T09:58:47.056] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T09:58:55.282] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T09:58:55.290] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T09:58:55.290] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T10:01:06.065] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:01:06.070] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:01:06.072] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T10:01:54.246] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:01:54.253] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:01:54.254] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T10:04:14.747] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:04:14.751] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:04:14.752] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T10:04:20.575] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:04:20.580] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-08 00:00:00' AND '2023-02-09 23:59:59'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-08 00:00:00' AND '2023-02-09 23:59:59'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:04:20.580] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-08 00:00:00' AND '2023-02-09 23:59:59')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-08 00:00:00' AND '2023-02-09 23:59:59'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T10:04:29.100] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:04:29.105] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 00:00:00' AND '2023-02-20 23:59:59'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 00:00:00' AND '2023-02-20 23:59:59'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:04:29.106] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 00:00:00' AND '2023-02-20 23:59:59')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 00:00:00' AND '2023-02-20 23:59:59'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T10:04:44.928] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:04:44.933] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 00:00:00' AND '2023-02-20 23:59:59'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 00:00:00' AND '2023-02-20 23:59:59'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:04:44.934] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 00:00:00' AND '2023-02-20 23:59:59')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 00:00:00' AND '2023-02-20 23:59:59'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T10:04:53.648] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:04:53.654] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 14:00:00' AND '2023-02-20 23:59:59'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 14:00:00' AND '2023-02-20 23:59:59'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:04:53.655] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 14:00:00' AND '2023-02-20 23:59:59')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 14:00:00' AND '2023-02-20 23:59:59'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T10:04:55.754] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:04:55.759] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 14:00:00' AND '2023-02-20 23:59:59'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 14:00:00' AND '2023-02-20 23:59:59'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:04:55.760] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 14:00:00' AND '2023-02-20 23:59:59')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 14:00:00' AND '2023-02-20 23:59:59'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T10:05:34.428] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:05:34.434] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 00:00:00' AND '2023-02-21 23:59:59'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 00:00:00' AND '2023-02-21 23:59:59'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:05:34.436] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 00:00:00' AND '2023-02-21 23:59:59')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 00:00:00' AND '2023-02-21 23:59:59'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T10:05:38.599] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:05:38.606] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 00:00:00' AND '2023-02-21 23:59:59'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 00:00:00' AND '2023-02-21 23:59:59'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:05:38.607] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 00:00:00' AND '2023-02-21 23:59:59')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%' AND `log_login`.`create_time` BETWEEN '2023-02-20 00:00:00' AND '2023-02-21 23:59:59'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T10:05:39.091] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:05:39.096] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:05:39.096] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T10:05:40.214] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:05:40.222] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:05:40.223] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T10:05:40.429] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:05:40.433] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:05:40.435] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T10:05:40.713] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:05:40.718] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:05:40.719] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T10:05:40.896] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:05:40.901] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:05:40.902] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T10:05:41.061] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:05:41.067] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:05:41.068] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T10:05:41.227] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:05:41.233] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:05:41.235] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T10:05:41.393] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:05:41.396] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:05:41.397] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T10:05:41.558] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:05:41.561] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:05:41.562] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T10:05:54.076] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:05:54.082] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:05:54.083] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T10:05:58.226] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:05:58.232] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:05:58.234] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T10:07:45.110] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:07:45.118] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:07:45.121] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T10:07:49.253] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:07:49.257] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:07:49.258] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T10:07:51.462] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:07:51.467] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:07:51.468] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T10:22:05.237] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:22:05.245] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:22:05.247] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T10:22:09.637] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:22:09.647] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:22:09.648] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T10:27:48.673] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:27:48.679] [INFO] db - [
  "Executing (default): UPDATE `log_operations` SET `delete_time`=? WHERE `delete_time` IS NULL AND `id` IN ('11')",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { id: [Array] },
    attributes: { exclude: [Array] },
    hooks: true,
    individualHooks: false,
    force: false,
    cascade: false,
    restartIdentity: false,
    type: 'BULKUPDATE',
    model: log_operation,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [ '2023-02-21 10:27:48' ]
  }
]
[2023-02-21T10:27:48.698] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome',
      'Windows',
      'DELETE',
      '{"ids":"11"}',
      '/api/log/operation/delete/11',
      '操作日志删除',
      27,
      '2023-02-21 10:27:48',
      '2023-02-21 10:27:48'
    ]
  }
]
[2023-02-21T10:27:48.718] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:27:48.723] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:27:48.724] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T10:27:57.802] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:27:57.810] [INFO] db - [
  "Executing (default): UPDATE `log_operations` SET `delete_time`=? WHERE `delete_time` IS NULL AND `id` IN ('12')",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { id: [Array] },
    attributes: { exclude: [Array] },
    hooks: true,
    individualHooks: false,
    force: false,
    cascade: false,
    restartIdentity: false,
    type: 'BULKUPDATE',
    model: log_operation,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [ '2023-02-21 10:27:57' ]
  }
]
[2023-02-21T10:27:57.830] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome',
      'Windows',
      'DELETE',
      '{"ids":"12"}',
      '/api/log/operation/delete/12',
      '操作日志删除',
      29,
      '2023-02-21 10:27:57',
      '2023-02-21 10:27:57'
    ]
  }
]
[2023-02-21T10:27:57.851] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:27:57.859] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:27:57.860] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T10:28:00.320] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:28:00.326] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:28:00.327] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T10:28:21.668] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:28:21.683] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:28:21.686] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T10:28:22.177] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:28:22.182] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:28:22.183] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T10:28:22.374] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:28:22.379] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:28:22.379] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T10:28:32.501] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:28:32.506] [INFO] db - [
  "Executing (default): UPDATE `log_operations` SET `delete_time`=? WHERE `delete_time` IS NULL AND `id` IN ('2')",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { id: [Array] },
    attributes: { exclude: [Array] },
    hooks: true,
    individualHooks: false,
    force: false,
    cascade: false,
    restartIdentity: false,
    type: 'BULKUPDATE',
    model: log_operation,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [ '2023-02-21 10:28:32' ]
  }
]
[2023-02-21T10:28:32.511] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome',
      'Windows',
      'DELETE',
      '{"ids":"2"}',
      '/api/log/operation/delete/2',
      '操作日志删除',
      11,
      '2023-02-21 10:28:32',
      '2023-02-21 10:28:32'
    ]
  }
]
[2023-02-21T10:28:32.527] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:28:32.532] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:28:32.535] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T10:28:49.508] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:28:49.516] [INFO] db - [
  "Executing (default): UPDATE `log_operations` SET `delete_time`=? WHERE `delete_time` IS NULL AND `id` IN ('3', '4', '5', '6', '7', '8', '9', '10', '13', '14')",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { id: [Array] },
    attributes: { exclude: [Array] },
    hooks: true,
    individualHooks: false,
    force: false,
    cascade: false,
    restartIdentity: false,
    type: 'BULKUPDATE',
    model: log_operation,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [ '2023-02-21 10:28:49' ]
  }
]
[2023-02-21T10:28:49.525] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome',
      'Windows',
      'DELETE',
      '{"ids":"3,4,5,6,7,8,9,10,13,14"}',
      '/api/log/operation/delete/3,4,5,6,7,8,9,10,13,14',
      '操作日志删除',
      18,
      '2023-02-21 10:28:49',
      '2023-02-21 10:28:49'
    ]
  }
]
[2023-02-21T10:28:49.543] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:28:49.549] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:28:49.550] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T10:29:02.975] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:29:02.980] [INFO] db - [
  "Executing (default): UPDATE `log_operations` SET `delete_time`=? WHERE `delete_time` IS NULL AND `id` IN ('15', '16', '17', '18', '19', '20', '21', '22', '23', '24')",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { id: [Array] },
    attributes: { exclude: [Array] },
    hooks: true,
    individualHooks: false,
    force: false,
    cascade: false,
    restartIdentity: false,
    type: 'BULKUPDATE',
    model: log_operation,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [ '2023-02-21 10:29:02' ]
  }
]
[2023-02-21T10:29:02.987] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome',
      'Windows',
      'DELETE',
      '{"ids":"15,16,17,18,19,20,21,22,23,24"}',
      '/api/log/operation/delete/15,16,17,18,19,20,21,22,23,24',
      '操作日志删除',
      13,
      '2023-02-21 10:29:02',
      '2023-02-21 10:29:02'
    ]
  }
]
[2023-02-21T10:29:03.005] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:29:03.009] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:29:03.011] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T10:29:12.198] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:29:12.203] [INFO] db - [
  "Executing (default): UPDATE `log_operations` SET `delete_time`=? WHERE `delete_time` IS NULL AND `id` IN ('25', '26', '27', '28', '29', '30', '31', '32')",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { id: [Array] },
    attributes: { exclude: [Array] },
    hooks: true,
    individualHooks: false,
    force: false,
    cascade: false,
    restartIdentity: false,
    type: 'BULKUPDATE',
    model: log_operation,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [ '2023-02-21 10:29:12' ]
  }
]
[2023-02-21T10:29:12.210] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome',
      'Windows',
      'DELETE',
      '{"ids":"25,26,27,28,29,30,31,32"}',
      '/api/log/operation/delete/25,26,27,28,29,30,31,32',
      '操作日志删除',
      12,
      '2023-02-21 10:29:12',
      '2023-02-21 10:29:12'
    ]
  }
]
[2023-02-21T10:29:12.232] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:29:12.235] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:29:12.237] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T10:29:29.982] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:29:29.988] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:29:29.989] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 10, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 10,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T10:29:39.255] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:29:39.259] [INFO] db - [
  "Executing (default): UPDATE `log_operations` SET `delete_time`=? WHERE `delete_time` IS NULL AND `id` IN ('49')",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { id: [Array] },
    attributes: { exclude: [Array] },
    hooks: true,
    individualHooks: false,
    force: false,
    cascade: false,
    restartIdentity: false,
    type: 'BULKUPDATE',
    model: log_operation,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [ '2023-02-21 10:29:39' ]
  }
]
[2023-02-21T10:29:39.265] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome',
      'Windows',
      'DELETE',
      '{"ids":"49"}',
      '/api/log/operation/delete/49',
      '操作日志删除',
      9,
      '2023-02-21 10:29:39',
      '2023-02-21 10:29:39'
    ]
  }
]
[2023-02-21T10:29:39.284] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:29:39.288] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:29:39.289] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 10, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 10,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T10:29:41.574] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:29:41.578] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:29:41.579] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T10:29:43.059] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:29:43.063] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:29:43.063] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 10, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 10,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T10:29:44.800] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:29:44.803] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:29:44.805] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T10:30:05.361] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:30:05.367] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:30:05.369] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T10:30:08.427] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:30:08.432] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:30:08.434] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T10:31:43.666] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:31:43.675] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%' AND `log_operation`.`create_time` BETWEEN '2023-02-21 00:00:00' AND '2023-02-21 23:59:59'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%' AND `log_operation`.`create_time` BETWEEN '2023-02-21 00:00:00' AND '2023-02-21 23:59:59'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:31:43.677] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%' AND `log_operation`.`create_time` BETWEEN '2023-02-21 00:00:00' AND '2023-02-21 23:59:59')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%' AND `log_operation`.`create_time` BETWEEN '2023-02-21 00:00:00' AND '2023-02-21 23:59:59'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T10:32:21.596] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:32:21.602] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%' AND `log_operation`.`create_time` BETWEEN '2023-02-21 00:00:00' AND '2023-02-21 23:59:59'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%' AND `log_operation`.`create_time` BETWEEN '2023-02-21 00:00:00' AND '2023-02-21 23:59:59'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:32:21.603] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%' AND `log_operation`.`create_time` BETWEEN '2023-02-21 00:00:00' AND '2023-02-21 23:59:59')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%' AND `log_operation`.`create_time` BETWEEN '2023-02-21 00:00:00' AND '2023-02-21 23:59:59'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T10:33:05.656] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:33:05.660] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:33:05.662] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T10:33:07.234] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:33:07.241] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:33:07.242] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 10, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 10,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T10:34:26.482] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T10:34:26.485] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:34:26.501] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:34:26.502] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:34:26.503] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:34:26.505] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:34:26.508] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:34:26.509] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:34:26.510] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:34:26.513] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'post' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:34:26.514] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'tag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:34:26.515] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'postTag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:34:26.516] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:34:26.517] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:34:26.518] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:34:26.519] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:34:26.521] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:34:26.523] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:34:26.525] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:34:26.526] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:34:26.527] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `post`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:34:26.530] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `tag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:34:26.531] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `postTag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:34:27.356] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:34:27.367] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:34:27.368] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 10, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 10,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T10:34:29.548] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:34:29.558] [INFO] db - [
  "Executing (default): UPDATE `log_operations` SET `delete_time`=? WHERE `delete_time` IS NULL AND `id` IN ('50')",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { id: [Array] },
    attributes: { exclude: [Array] },
    hooks: true,
    individualHooks: false,
    force: false,
    cascade: false,
    restartIdentity: false,
    type: 'BULKUPDATE',
    model: log_operation,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [ '2023-02-21 10:34:29' ]
  }
]
[2023-02-21T10:34:29.577] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome',
      'Windows',
      'DELETE',
      '{"ids":"50"}',
      '/api/log/operation/delete/50',
      '操作日志删除',
      32,
      '2023-02-21 10:34:29',
      '2023-02-21 10:34:29'
    ]
  }
]
[2023-02-21T10:34:29.598] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:34:29.605] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:34:29.606] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 10, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 10,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T10:35:16.250] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T10:35:16.252] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:35:16.265] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:35:16.266] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:35:16.268] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:35:16.269] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:35:16.271] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:35:16.273] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:35:16.274] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:35:16.274] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'post' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:35:16.275] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'tag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:35:16.276] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'postTag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:35:16.277] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:35:16.278] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:35:16.279] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:35:16.279] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:35:16.280] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:35:16.282] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:35:16.283] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:35:16.284] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:35:16.285] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `post`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:35:16.286] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `tag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:35:16.287] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `postTag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:35:23.738] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:35:23.751] [INFO] db - [
  "Executing (default): UPDATE `log_operations` SET `delete_time`=? WHERE `delete_time` IS NULL AND `id` IN ('51')",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { id: [Array] },
    attributes: { exclude: [Array] },
    hooks: true,
    individualHooks: false,
    force: false,
    cascade: false,
    restartIdentity: false,
    type: 'BULKUPDATE',
    model: log_operation,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [ '2023-02-21 10:35:23' ]
  }
]
[2023-02-21T10:35:23.775] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome',
      'Windows',
      'DELETE',
      '{"ids":"51"}',
      '/api/log/operation/delete/51',
      '操作日志删除',
      45,
      '2023-02-21 10:35:23',
      '2023-02-21 10:35:23'
    ]
  }
]
[2023-02-21T10:35:23.798] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:35:23.806] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:35:23.807] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 10, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 10,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T10:35:59.163] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T10:35:59.165] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:35:59.177] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:35:59.178] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:35:59.179] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:35:59.181] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:35:59.183] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:35:59.185] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:35:59.187] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:35:59.189] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'post' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:35:59.190] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'tag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:35:59.191] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'postTag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:35:59.192] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:35:59.193] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:35:59.194] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:35:59.195] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:35:59.197] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:35:59.199] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:35:59.200] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:35:59.201] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:35:59.202] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `post`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:35:59.203] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `tag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:35:59.204] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `postTag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:36:01.604] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:36:01.618] [INFO] db - [
  "Executing (default): UPDATE `log_operations` SET `delete_time`=? WHERE `delete_time` IS NULL AND `id` IN ('52')",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { id: [Array] },
    attributes: { exclude: [Array] },
    hooks: true,
    individualHooks: false,
    force: false,
    cascade: false,
    restartIdentity: false,
    type: 'BULKUPDATE',
    model: log_operation,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [ '2023-02-21 10:36:01' ]
  }
]
[2023-02-21T10:36:01.643] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'DELETE',
      '{"ids":"52"}',
      '/api/log/operation/delete/52',
      '操作日志删除',
      44,
      '2023-02-21 10:36:01',
      '2023-02-21 10:36:01'
    ]
  }
]
[2023-02-21T10:36:01.667] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:36:01.677] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:36:01.677] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 10, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 10,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T10:37:44.656] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T10:37:44.657] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:37:44.670] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:37:44.671] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:37:44.672] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:37:44.673] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:37:44.675] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:37:44.677] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:37:44.678] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:37:44.679] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'post' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:37:44.680] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'tag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:37:44.681] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'postTag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:37:44.682] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:37:44.683] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:37:44.684] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:37:44.685] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:37:44.687] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:37:44.689] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:37:44.689] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:37:44.690] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:37:44.691] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `post`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:37:44.692] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `tag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:37:44.693] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `postTag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:38:30.411] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T10:38:30.413] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:38:30.427] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:38:30.429] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:38:30.430] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:38:30.431] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:38:30.432] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:38:30.433] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:38:30.435] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:38:30.437] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'post' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:38:30.438] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'tag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:38:30.439] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'postTag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:38:30.440] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:38:30.441] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:38:30.442] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:38:30.442] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:38:30.443] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:38:30.445] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:38:30.445] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:38:30.446] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:38:30.447] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `post`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:38:30.448] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `tag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:38:30.449] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `postTag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:38:31.060] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:38:31.074] [INFO] db - [
  "Executing (default): UPDATE `log_operations` SET `delete_time`=? WHERE `delete_time` IS NULL AND `id` IN ('48')",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { id: [Array] },
    attributes: { exclude: [Array] },
    hooks: true,
    individualHooks: false,
    force: false,
    cascade: false,
    restartIdentity: false,
    type: 'BULKUPDATE',
    model: log_operation,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [ '2023-02-21 10:38:31' ]
  }
]
[2023-02-21T10:38:31.093] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'DELETE',
      '{"ids":"48"}',
      '/api/log/operation/delete/48',
      '操作日志删除',
      44,
      '2023-02-21 10:38:31',
      '2023-02-21 10:38:31'
    ]
  }
]
[2023-02-21T10:38:31.116] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:38:31.125] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:38:31.126] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 10, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 10,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T10:38:51.352] [INFO] db - [
  'Executing (default): SELECT `id` AS `menuId`, `menu_name` AS `menuName`, `parent_id` AS `parentId`, `path`, `component`, `perms`, `type`, `order_num` AS `orderNum`, `icon`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_menus` AS `system_menu` WHERE (`system_menu`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],     [Array],
      [Array],     'path',
      'component', 'perms',
      'type',      [Array],
      'icon',      [Array],
      [Array]
    ],
    originalAttributes: [
      'menuId',     'menuName',
      'parentId',   'path',
      'component',  'perms',
      'type',       'orderNum',
      'icon',       'createTime',
      'updateTime'
    ],
    where: '(`system_menu`.`delete_time` IS NULL)',
    tableNames: [ 'system_menus' ],
    type: 'SELECT',
    model: system_menu
  }
]
[2023-02-21T10:39:26.740] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T10:39:26.743] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:39:26.755] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:39:26.756] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:39:26.757] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:39:26.758] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:39:26.759] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:39:26.760] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:39:26.761] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:39:26.762] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'post' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:39:26.763] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'tag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:39:26.763] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'postTag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T10:39:26.764] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:39:26.765] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:39:26.766] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:39:26.767] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:39:26.767] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:39:26.769] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:39:26.770] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:39:26.771] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:39:26.772] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `post`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:39:26.773] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `tag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:39:26.774] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `postTag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T10:39:41.021] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:39:41.031] [INFO] db - [
  'Executing (default): SELECT `id` AS `menuId`, `menu_name` AS `menuName`, `parent_id` AS `parentId`, `path`, `component`, `perms`, `type`, `order_num` AS `orderNum`, `icon`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_menus` AS `system_menu` WHERE (`system_menu`.`delete_time` IS NULL AND `system_menu`.`id` = 10);',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: '(`system_menu`.`delete_time` IS NULL AND `system_menu`.`id` = 10)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],     [Array],
      [Array],     'path',
      'component', 'perms',
      'type',      [Array],
      'icon',      [Array],
      [Array]
    ],
    originalAttributes: [
      'menuId',     'menuName',
      'parentId',   'path',
      'component',  'perms',
      'type',       'orderNum',
      'icon',       'createTime',
      'updateTime'
    ],
    tableNames: [ 'system_menus' ],
    type: 'SELECT',
    model: system_menu
  }
]
[2023-02-21T10:39:41.039] [INFO] db - [
  'Executing (default): UPDATE `system_menus` SET `id`=?,`menu_name`=?,`parent_id`=?,`path`=?,`component`=?,`perms`=?,`type`=?,`order_num`=?,`icon`=?,`update_time`=? WHERE (`delete_time` IS NULL AND `id` = ?)',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { [Symbol(and)]: [Array] },
    validate: true,
    hooks: true,
    individualHooks: false,
    returning: false,
    force: false,
    sideEffects: true,
    type: 'BULKUPDATE',
    fields: [
      'menuId',    'menuName',
      'parentId',  'path',
      'component', 'perms',
      'type',      'orderNum',
      'icon',      'update_time'
    ],
    model: system_menu,
    skip: undefined,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [
      10,
      '系统日志',
      2,
      'systemLog',
      'monitor/systemLog/index',
      'operationLog:view',
      1,
      2,
      '',
      '2023-02-21 10:39:41',
      10
    ]
  }
]
[2023-02-21T10:39:41.060] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'PUT',
      '{"menuId":10,"menuName":"系统日志","parentId":2,"path":"systemLog","component":"monitor/systemLog/index","perms":"operationLog:view","type":1,"orderNum":2,"icon":""}',
      '/api/system/menu/update',
      '菜单修改',
      47,
      '2023-02-21 10:39:41',
      '2023-02-21 10:39:41'
    ]
  }
]
[2023-02-21T10:39:41.152] [INFO] db - [
  'Executing (default): SELECT `id` AS `menuId`, `menu_name` AS `menuName`, `parent_id` AS `parentId`, `path`, `component`, `perms`, `type`, `order_num` AS `orderNum`, `icon`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_menus` AS `system_menu` WHERE (`system_menu`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],     [Array],
      [Array],     'path',
      'component', 'perms',
      'type',      [Array],
      'icon',      [Array],
      [Array]
    ],
    originalAttributes: [
      'menuId',     'menuName',
      'parentId',   'path',
      'component',  'perms',
      'type',       'orderNum',
      'icon',       'createTime',
      'updateTime'
    ],
    where: '(`system_menu`.`delete_time` IS NULL)',
    tableNames: [ 'system_menus' ],
    type: 'SELECT',
    model: system_menu
  }
]
[2023-02-21T10:39:47.567] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:39:47.575] [INFO] db - [
  'Executing (default): SELECT `id` AS `menuId`, `menu_name` AS `menuName`, `parent_id` AS `parentId`, `path`, `component`, `perms`, `type`, `order_num` AS `orderNum`, `icon`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_menus` AS `system_menu` WHERE (`system_menu`.`delete_time` IS NULL AND `system_menu`.`id` = 24);',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: '(`system_menu`.`delete_time` IS NULL AND `system_menu`.`id` = 24)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],     [Array],
      [Array],     'path',
      'component', 'perms',
      'type',      [Array],
      'icon',      [Array],
      [Array]
    ],
    originalAttributes: [
      'menuId',     'menuName',
      'parentId',   'path',
      'component',  'perms',
      'type',       'orderNum',
      'icon',       'createTime',
      'updateTime'
    ],
    tableNames: [ 'system_menus' ],
    type: 'SELECT',
    model: system_menu
  }
]
[2023-02-21T10:39:47.577] [INFO] db - [
  'Executing (default): UPDATE `system_menus` SET `id`=?,`menu_name`=?,`parent_id`=?,`path`=?,`component`=?,`perms`=?,`type`=?,`order_num`=?,`icon`=?,`update_time`=? WHERE (`delete_time` IS NULL AND `id` = ?)',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { [Symbol(and)]: [Array] },
    validate: true,
    hooks: true,
    individualHooks: false,
    returning: false,
    force: false,
    sideEffects: true,
    type: 'BULKUPDATE',
    fields: [
      'menuId',    'menuName',
      'parentId',  'path',
      'component', 'perms',
      'type',      'orderNum',
      'icon',      'update_time'
    ],
    model: system_menu,
    skip: undefined,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [
      24,
      '删除日志',
      10,
      '',
      '',
      'operationLog:delete',
      2,
      0,
      null,
      '2023-02-21 10:39:47',
      24
    ]
  }
]
[2023-02-21T10:39:47.593] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'PUT',
      '{"menuId":24,"menuName":"删除日志","parentId":10,"path":"","component":"","perms":"operationLog:delete","type":2,"orderNum":0,"icon":null}',
      '/api/system/menu/update',
      '菜单修改',
      30,
      '2023-02-21 10:39:47',
      '2023-02-21 10:39:47'
    ]
  }
]
[2023-02-21T10:39:47.676] [INFO] db - [
  'Executing (default): SELECT `id` AS `menuId`, `menu_name` AS `menuName`, `parent_id` AS `parentId`, `path`, `component`, `perms`, `type`, `order_num` AS `orderNum`, `icon`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_menus` AS `system_menu` WHERE (`system_menu`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],     [Array],
      [Array],     'path',
      'component', 'perms',
      'type',      [Array],
      'icon',      [Array],
      [Array]
    ],
    originalAttributes: [
      'menuId',     'menuName',
      'parentId',   'path',
      'component',  'perms',
      'type',       'orderNum',
      'icon',       'createTime',
      'updateTime'
    ],
    where: '(`system_menu`.`delete_time` IS NULL)',
    tableNames: [ 'system_menus' ],
    type: 'SELECT',
    model: system_menu
  }
]
[2023-02-21T10:40:24.620] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:40:24.630] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:40:24.632] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T10:40:39.058] [INFO] db - [
  "Executing (default): SELECT `id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `gender`, `avatar`, `mobile`, `email`, `dept_id` AS `deptId`, `org_id` AS `orgId`, `status`, `description`, `last_login_time` AS `lastLoginTime`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_users` AS `system_user` WHERE (`system_user`.`delete_time` IS NULL AND (`system_user`.`password` = 'e10adc3949ba59abbe56e057f20f883e' AND `system_user`.`user_name` = 'xunxiao')) LIMIT 1;",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`system_user`.`delete_time` IS NULL AND (`system_user`.`password` = 'e10adc3949ba59abbe56e057f20f883e' AND `system_user`.`user_name` = 'xunxiao'))",
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    tableNames: [ 'system_users' ],
    type: 'SELECT',
    model: system_user
  }
]
[2023-02-21T10:40:39.063] [INFO] db - [
  'Executing (default): INSERT INTO `log_logins` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`msg`,`status`,`last_login_time`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'msg',
      'status',      'lastLoginTime',
      'loginTime',   'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'msg',
      'status',      'lastLoginTime',
      'loginTime',   'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_login {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_login,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      '登陆成功',
      1,
      '2023-02-20 15:55:34',
      '2023-02-21 10:40:39',
      '2023-02-21 10:40:39'
    ]
  }
]
[2023-02-21T10:40:39.070] [INFO] db - [
  'Executing (1c811057-ab12-48b2-a507-7c2771204cda): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '1c811057-ab12-48b2-a507-7c2771204cda',
      connection: [Connection]
    }
  }
]
[2023-02-21T10:40:39.455] [INFO] db - [
  'Executing (1c811057-ab12-48b2-a507-7c2771204cda): SELECT `id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `password`, `gender`, `avatar`, `mobile`, `email`, `dept_id` AS `deptId`, `org_id` AS `orgId`, `status`, `description`, `last_login_time` AS `lastLoginTime`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_users` AS `system_user` WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '1c811057-ab12-48b2-a507-7c2771204cda',
      connection: [Connection]
    },
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  'password',
      'gender', 'avatar',
      'mobile', 'email',
      [Array],  [Array],
      'status', 'description',
      [Array],  [Array],
      [Array]
    ],
    originalAttributes: [
      'userId',        'userName',
      'realName',      'password',
      'gender',        'avatar',
      'mobile',        'email',
      'deptId',        'orgId',
      'status',        'description',
      'lastLoginTime', 'createTime',
      'updateTime'
    ],
    tableNames: [ 'system_users' ],
    type: 'SELECT',
    model: system_user
  }
]
[2023-02-21T10:40:39.459] [INFO] db - [
  'Executing (default): UPDATE `system_users` SET `id`=?,`last_login_time`=?,`update_time`=? WHERE (`delete_time` IS NULL AND `id` = ?)',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { [Symbol(and)]: [Array] },
    validate: true,
    hooks: true,
    individualHooks: false,
    returning: false,
    force: false,
    sideEffects: true,
    type: 'BULKUPDATE',
    fields: [ 'userId', 'lastLoginTime', 'update_time' ],
    model: system_user,
    skip: undefined,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [ 1, '2023-02-21 10:40:39', '2023-02-21 10:40:39', 1 ]
  }
]
[2023-02-21T10:40:39.464] [INFO] db - [
  'Executing (1c811057-ab12-48b2-a507-7c2771204cda): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '1c811057-ab12-48b2-a507-7c2771204cda',
      connection: [Connection],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-02-21T10:40:39.481] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:40:39.494] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:40:43.913] [INFO] db - [
  'Executing (default): SELECT `id` AS `menuId`, `menu_name` AS `menuName`, `parent_id` AS `parentId`, `path`, `component`, `perms`, `type`, `order_num` AS `orderNum`, `icon`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_menus` AS `system_menu` WHERE (`system_menu`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],     [Array],
      [Array],     'path',
      'component', 'perms',
      'type',      [Array],
      'icon',      [Array],
      [Array]
    ],
    originalAttributes: [
      'menuId',     'menuName',
      'parentId',   'path',
      'component',  'perms',
      'type',       'orderNum',
      'icon',       'createTime',
      'updateTime'
    ],
    where: '(`system_menu`.`delete_time` IS NULL)',
    tableNames: [ 'system_menus' ],
    type: 'SELECT',
    model: system_menu
  }
]
[2023-02-21T10:40:45.248] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:40:45.254] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:40:45.255] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T10:40:47.532] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:40:47.542] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:40:47.543] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T10:40:50.922] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:40:50.924] [INFO] db - [
  'Executing (default): SELECT `id` AS `menuId`, `menu_name` AS `menuName`, `parent_id` AS `parentId`, `path`, `component`, `perms`, `type`, `order_num` AS `orderNum`, `icon`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_menus` AS `system_menu` WHERE (`system_menu`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],     [Array],
      [Array],     'path',
      'component', 'perms',
      'type',      [Array],
      'icon',      [Array],
      [Array]
    ],
    originalAttributes: [
      'menuId',     'menuName',
      'parentId',   'path',
      'component',  'perms',
      'type',       'orderNum',
      'icon',       'createTime',
      'updateTime'
    ],
    where: '(`system_menu`.`delete_time` IS NULL)',
    tableNames: [ 'system_menus' ],
    type: 'SELECT',
    model: system_menu
  }
]
[2023-02-21T10:40:50.930] [INFO] db - [
  "Executing (default): SELECT count(DISTINCT(`system_role`.`id`)) AS `count` FROM `system_roles` AS `system_role` LEFT OUTER JOIN ( `system_role_menus` AS `system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_menus` ON `system_menus`.`id` = `system_menus->system_role_menu`.`menu_id` AND (`system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_role`.`id` = `system_menus->system_role_menu`.`role_id` AND (`system_menus`.`delete_time` IS NULL) WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%');",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: "(`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%')",
    limit: null,
    offset: null,
    distinct: true,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    model: system_role,
    includeNames: [ 'system_menus' ],
    includeMap: { system_menus: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_role,
    topLimit: null,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:40:50.934] [INFO] db - [
  "Executing (default): SELECT `system_role`.*, `system_menus`.`id` AS `system_menus.menuId`, `system_menus`.`id` AS `system_menus.id` FROM (SELECT `system_role`.`id` AS `roleId`, `system_role`.`role_name` AS `roleName`, `system_role`.`remark`, `system_role`.`create_time` AS `createTime`, `system_role`.`update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%') LIMIT 0, 10) AS `system_role` LEFT OUTER JOIN ( `system_role_menus` AS `system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_menus` ON `system_menus`.`id` = `system_menus->system_role_menu`.`menu_id` AND (`system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_role`.`roleId` = `system_menus->system_role_menu`.`role_id` AND (`system_menus`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    where: "(`system_role`.`delete_time` IS NULL AND `system_role`.`role_name` LIKE '%%')",
    limit: 10,
    offset: 0,
    distinct: true,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    hasJoin: true,
    model: system_role,
    includeNames: [ 'system_menus' ],
    includeMap: { system_menus: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_role,
    topLimit: 10,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    subQuery: true,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    tableNames: [
      'system_roles',
      'system_menus',
      'undefined',
      'system_role_menus'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:40:59.436] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-21T10:40:59.438] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-21T10:40:59.440] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:40:59.459] [INFO] db - [
  "Executing (default): SELECT count(DISTINCT(`system_user`.`id`)) AS `count` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND (`system_user`.`user_name` LIKE '%%' AND `system_user`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`system_user`.`delete_time` IS NULL AND (`system_user`.`user_name` LIKE '%%' AND `system_user`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    attributes: [ [Array] ],
    include: [ [Object] ],
    distinct: true,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: null,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:40:59.462] [INFO] db - [
  "Executing (default): SELECT `system_user`.*, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName` FROM (SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime` FROM `system_users` AS `system_user` WHERE (`system_user`.`delete_time` IS NULL AND (`system_user`.`user_name` LIKE '%%' AND `system_user`.`real_name` LIKE '%%')) LIMIT 0, 10) AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`userId` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`system_user`.`delete_time` IS NULL AND (`system_user`.`user_name` LIKE '%%' AND `system_user`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    include: [ [Object] ],
    distinct: true,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: 10,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    subQuery: true,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:41:00.950] [INFO] db - [
  'Executing (default): SELECT `id` AS `menuId`, `menu_name` AS `menuName`, `parent_id` AS `parentId`, `path`, `component`, `perms`, `type`, `order_num` AS `orderNum`, `icon`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_menus` AS `system_menu` WHERE (`system_menu`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],     [Array],
      [Array],     'path',
      'component', 'perms',
      'type',      [Array],
      'icon',      [Array],
      [Array]
    ],
    originalAttributes: [
      'menuId',     'menuName',
      'parentId',   'path',
      'component',  'perms',
      'type',       'orderNum',
      'icon',       'createTime',
      'updateTime'
    ],
    where: '(`system_menu`.`delete_time` IS NULL)',
    tableNames: [ 'system_menus' ],
    type: 'SELECT',
    model: system_menu
  }
]
[2023-02-21T10:41:02.301] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:41:02.308] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:41:02.309] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T10:41:10.594] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:41:10.600] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:41:10.601] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 10, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 10,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T10:41:12.738] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:41:12.743] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:41:12.743] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T10:41:13.714] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:41:13.720] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:41:13.721] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 10, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 10,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T10:41:17.601] [INFO] db - [
  'Executing (default): SELECT `id` AS `menuId`, `menu_name` AS `menuName`, `parent_id` AS `parentId`, `path`, `component`, `perms`, `type`, `order_num` AS `orderNum`, `icon`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_menus` AS `system_menu` WHERE (`system_menu`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],     [Array],
      [Array],     'path',
      'component', 'perms',
      'type',      [Array],
      'icon',      [Array],
      [Array]
    ],
    originalAttributes: [
      'menuId',     'menuName',
      'parentId',   'path',
      'component',  'perms',
      'type',       'orderNum',
      'icon',       'createTime',
      'updateTime'
    ],
    where: '(`system_menu`.`delete_time` IS NULL)',
    tableNames: [ 'system_menus' ],
    type: 'SELECT',
    model: system_menu
  }
]
[2023-02-21T10:41:32.671] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:41:32.677] [INFO] db - [
  'Executing (default): SELECT `id` AS `menuId`, `menu_name` AS `menuName`, `parent_id` AS `parentId`, `path`, `component`, `perms`, `type`, `order_num` AS `orderNum`, `icon`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_menus` AS `system_menu` WHERE (`system_menu`.`delete_time` IS NULL AND `system_menu`.`id` = 10);',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: '(`system_menu`.`delete_time` IS NULL AND `system_menu`.`id` = 10)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],     [Array],
      [Array],     'path',
      'component', 'perms',
      'type',      [Array],
      'icon',      [Array],
      [Array]
    ],
    originalAttributes: [
      'menuId',     'menuName',
      'parentId',   'path',
      'component',  'perms',
      'type',       'orderNum',
      'icon',       'createTime',
      'updateTime'
    ],
    tableNames: [ 'system_menus' ],
    type: 'SELECT',
    model: system_menu
  }
]
[2023-02-21T10:41:32.680] [INFO] db - [
  'Executing (default): UPDATE `system_menus` SET `id`=?,`menu_name`=?,`parent_id`=?,`path`=?,`component`=?,`perms`=?,`type`=?,`order_num`=?,`icon`=?,`update_time`=? WHERE (`delete_time` IS NULL AND `id` = ?)',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { [Symbol(and)]: [Array] },
    validate: true,
    hooks: true,
    individualHooks: false,
    returning: false,
    force: false,
    sideEffects: true,
    type: 'BULKUPDATE',
    fields: [
      'menuId',    'menuName',
      'parentId',  'path',
      'component', 'perms',
      'type',      'orderNum',
      'icon',      'update_time'
    ],
    model: system_menu,
    skip: undefined,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [
      10,
      '操作日志',
      2,
      'operationLog',
      'monitor/operationLog/index',
      'operationLog:view',
      1,
      2,
      '',
      '2023-02-21 10:41:32',
      10
    ]
  }
]
[2023-02-21T10:41:32.686] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'PUT',
      '{"menuId":10,"menuName":"操作日志","parentId":2,"path":"operationLog","component":"monitor/operationLog/index","perms":"operationLog:view","type":1,"orderNum":2,"icon":""}',
      '/api/system/menu/update',
      '菜单修改',
      16,
      '2023-02-21 10:41:32',
      '2023-02-21 10:41:32'
    ]
  }
]
[2023-02-21T10:41:32.819] [INFO] db - [
  'Executing (default): SELECT `id` AS `menuId`, `menu_name` AS `menuName`, `parent_id` AS `parentId`, `path`, `component`, `perms`, `type`, `order_num` AS `orderNum`, `icon`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_menus` AS `system_menu` WHERE (`system_menu`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],     [Array],
      [Array],     'path',
      'component', 'perms',
      'type',      [Array],
      'icon',      [Array],
      [Array]
    ],
    originalAttributes: [
      'menuId',     'menuName',
      'parentId',   'path',
      'component',  'perms',
      'type',       'orderNum',
      'icon',       'createTime',
      'updateTime'
    ],
    where: '(`system_menu`.`delete_time` IS NULL)',
    tableNames: [ 'system_menus' ],
    type: 'SELECT',
    model: system_menu
  }
]
[2023-02-21T10:41:44.796] [INFO] db - [
  'Executing (default): SELECT `id` AS `menuId`, `menu_name` AS `menuName`, `parent_id` AS `parentId`, `path`, `component`, `perms`, `type`, `order_num` AS `orderNum`, `icon`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_menus` AS `system_menu` WHERE (`system_menu`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],     [Array],
      [Array],     'path',
      'component', 'perms',
      'type',      [Array],
      'icon',      [Array],
      [Array]
    ],
    originalAttributes: [
      'menuId',     'menuName',
      'parentId',   'path',
      'component',  'perms',
      'type',       'orderNum',
      'icon',       'createTime',
      'updateTime'
    ],
    where: '(`system_menu`.`delete_time` IS NULL)',
    tableNames: [ 'system_menus' ],
    type: 'SELECT',
    model: system_menu
  }
]
[2023-02-21T10:41:53.318] [INFO] db - [
  "Executing (default): SELECT `id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `gender`, `avatar`, `mobile`, `email`, `dept_id` AS `deptId`, `org_id` AS `orgId`, `status`, `description`, `last_login_time` AS `lastLoginTime`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_users` AS `system_user` WHERE (`system_user`.`delete_time` IS NULL AND (`system_user`.`password` = 'e10adc3949ba59abbe56e057f20f883e' AND `system_user`.`user_name` = 'xunxiao')) LIMIT 1;",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`system_user`.`delete_time` IS NULL AND (`system_user`.`password` = 'e10adc3949ba59abbe56e057f20f883e' AND `system_user`.`user_name` = 'xunxiao'))",
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    tableNames: [ 'system_users' ],
    type: 'SELECT',
    model: system_user
  }
]
[2023-02-21T10:41:53.321] [INFO] db - [
  'Executing (default): INSERT INTO `log_logins` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`msg`,`status`,`last_login_time`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'msg',
      'status',      'lastLoginTime',
      'loginTime',   'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'msg',
      'status',      'lastLoginTime',
      'loginTime',   'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_login {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_login,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      '登陆成功',
      1,
      '2023-02-21 10:40:39',
      '2023-02-21 10:41:53',
      '2023-02-21 10:41:53'
    ]
  }
]
[2023-02-21T10:41:53.328] [INFO] db - [
  'Executing (d54d6c8e-a7a4-4312-9f25-d0fd72fe7a58): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'd54d6c8e-a7a4-4312-9f25-d0fd72fe7a58',
      connection: [Connection]
    }
  }
]
[2023-02-21T10:41:53.329] [INFO] db - [
  'Executing (d54d6c8e-a7a4-4312-9f25-d0fd72fe7a58): SELECT `id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `password`, `gender`, `avatar`, `mobile`, `email`, `dept_id` AS `deptId`, `org_id` AS `orgId`, `status`, `description`, `last_login_time` AS `lastLoginTime`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_users` AS `system_user` WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'd54d6c8e-a7a4-4312-9f25-d0fd72fe7a58',
      connection: [Connection]
    },
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  'password',
      'gender', 'avatar',
      'mobile', 'email',
      [Array],  [Array],
      'status', 'description',
      [Array],  [Array],
      [Array]
    ],
    originalAttributes: [
      'userId',        'userName',
      'realName',      'password',
      'gender',        'avatar',
      'mobile',        'email',
      'deptId',        'orgId',
      'status',        'description',
      'lastLoginTime', 'createTime',
      'updateTime'
    ],
    tableNames: [ 'system_users' ],
    type: 'SELECT',
    model: system_user
  }
]
[2023-02-21T10:41:53.336] [INFO] db - [
  'Executing (default): UPDATE `system_users` SET `id`=?,`last_login_time`=?,`update_time`=? WHERE (`delete_time` IS NULL AND `id` = ?)',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { [Symbol(and)]: [Array] },
    validate: true,
    hooks: true,
    individualHooks: false,
    returning: false,
    force: false,
    sideEffects: true,
    type: 'BULKUPDATE',
    fields: [ 'userId', 'lastLoginTime', 'update_time' ],
    model: system_user,
    skip: undefined,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [ 1, '2023-02-21 10:41:53', '2023-02-21 10:41:53', 1 ]
  }
]
[2023-02-21T10:41:53.340] [INFO] db - [
  'Executing (d54d6c8e-a7a4-4312-9f25-d0fd72fe7a58): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'd54d6c8e-a7a4-4312-9f25-d0fd72fe7a58',
      connection: [Connection],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-02-21T10:41:53.356] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:41:53.364] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:41:56.222] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:41:56.225] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:41:56.226] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T10:42:33.368] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:42:33.372] [INFO] db - [
  "Executing (default): UPDATE `log_operations` SET `delete_time`=? WHERE `delete_time` IS NULL AND `id` IN ('41', '42', '43')",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { id: [Array] },
    attributes: { exclude: [Array] },
    hooks: true,
    individualHooks: false,
    force: false,
    cascade: false,
    restartIdentity: false,
    type: 'BULKUPDATE',
    model: log_operation,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [ '2023-02-21 10:42:33' ]
  }
]
[2023-02-21T10:42:33.378] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'DELETE',
      '{"ids":"41,42,43"}',
      '/api/log/operation/delete/41,42,43',
      '操作日志删除',
      14,
      '2023-02-21 10:42:33',
      '2023-02-21 10:42:33'
    ]
  }
]
[2023-02-21T10:42:33.417] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:42:33.422] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:42:33.424] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T10:42:36.144] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:42:36.149] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:42:36.150] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 10, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 10,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T10:43:41.752] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:43:41.757] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:43:41.759] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 10, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 10,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T10:45:42.058] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:45:42.066] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:45:42.069] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T10:45:43.699] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:45:43.708] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:45:43.709] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T10:45:44.764] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:45:44.768] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:45:44.770] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `msg`, `status`, `last_login_time` AS `lastLoginTime`, `create_time` AS `loginTime`, `update_time` AS `updateTime` FROM `log_logins` AS `log_login` WHERE (`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_login`.`delete_time` IS NULL AND (`log_login`.`user_name` LIKE '%%' AND `log_login`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  [Array],
      'ip',     'location',
      'ua',     'browser',
      'os',     'msg',
      'status', [Array],
      [Array],  [Array]
    ],
    originalAttributes: [
      'logId',     'userId',
      'userName',  'realName',
      'ip',        'location',
      'ua',        'browser',
      'os',        'msg',
      'status',    'lastLoginTime',
      'loginTime', 'updateTime'
    ],
    tableNames: [ 'log_logins' ],
    type: 'SELECT',
    model: log_login
  }
]
[2023-02-21T10:45:47.202] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T10:45:47.209] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T10:45:47.210] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T11:36:28.950] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T11:36:28.951] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T11:36:28.975] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T11:36:28.977] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T11:36:28.978] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T11:36:28.979] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T11:36:28.981] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T11:36:28.982] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T11:36:28.983] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T11:36:28.984] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'post' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T11:36:28.985] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'tag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T11:36:28.986] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'postTag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T11:36:28.987] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T11:36:28.987] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T11:36:28.988] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T11:36:28.989] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T11:36:28.990] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T11:36:28.992] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T11:36:28.993] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T11:36:28.993] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T11:36:28.994] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `post`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T11:36:28.995] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `tag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T11:36:28.996] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `postTag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T11:36:41.977] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T11:36:41.992] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T11:36:41.993] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T13:13:15.461] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T13:13:15.473] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T13:13:15.475] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T13:16:17.351] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T13:16:17.354] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:16:17.366] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:16:17.367] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:16:17.369] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:16:17.371] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:16:17.373] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:16:17.376] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:16:17.377] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:16:17.378] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'post' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:16:17.380] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'tag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:16:17.381] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'postTag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:16:17.382] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:16:17.383] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:16:17.384] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:16:17.385] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:16:17.386] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:16:17.387] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:16:17.389] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:16:17.390] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:16:17.392] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `post`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:16:17.394] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `tag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:16:17.396] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `postTag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:16:44.891] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T13:16:44.893] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:16:44.906] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:16:44.907] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:16:44.908] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:16:44.909] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:16:44.910] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:16:44.912] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:16:44.913] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:16:44.914] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'post' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:16:44.915] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'tag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:16:44.918] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'postTag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:16:44.919] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:16:44.920] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:16:44.922] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:16:44.923] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:16:44.924] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:16:44.925] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:16:44.926] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:16:44.927] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:16:44.928] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `post`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:16:44.929] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `tag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:16:44.930] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `postTag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:17:42.980] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T13:17:42.982] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:17:42.996] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:17:42.997] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:17:42.998] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:17:43.000] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:17:43.003] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:17:43.006] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:17:43.007] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:17:43.009] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'post' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:17:43.010] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'tag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:17:43.012] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'postTag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:17:43.013] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:17:43.015] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:17:43.017] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:17:43.019] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:17:43.021] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:17:43.024] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:17:43.025] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:17:43.027] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:17:43.028] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `post`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:17:43.029] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `tag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:17:43.030] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `postTag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:17:52.236] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T13:17:52.256] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T13:17:52.257] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T13:17:54.260] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T13:17:54.270] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T13:17:54.271] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T13:17:56.934] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T13:17:56.941] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T13:17:56.942] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 10, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 10,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T13:17:59.204] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T13:17:59.215] [INFO] db - [
  "Executing (default): UPDATE `log_operations` SET `delete_time`=? WHERE `delete_time` IS NULL AND `id` IN ('58')",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { id: [Array] },
    attributes: { exclude: [Array] },
    hooks: true,
    individualHooks: false,
    force: false,
    cascade: false,
    restartIdentity: false,
    type: 'BULKUPDATE',
    model: log_operation,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [ '2023-02-21 13:17:59' ]
  }
]
[2023-02-21T13:17:59.236] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'DELETE',
      '{"ids":"58"}',
      '/api/log/operation/delete/58',
      '操作日志删除',
      33,
      '2023-02-21 13:17:59',
      '2023-02-21 13:17:59'
    ]
  }
]
[2023-02-21T13:17:59.254] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T13:17:59.260] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T13:17:59.261] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 10, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 10,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T13:18:02.190] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T13:18:02.195] [INFO] db - [
  "Executing (default): UPDATE `log_operations` SET `delete_time`=? WHERE `delete_time` IS NULL AND `id` IN ('59')",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { id: [Array] },
    attributes: { exclude: [Array] },
    hooks: true,
    individualHooks: false,
    force: false,
    cascade: false,
    restartIdentity: false,
    type: 'BULKUPDATE',
    model: log_operation,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [ '2023-02-21 13:18:02' ]
  }
]
[2023-02-21T13:18:02.210] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'DELETE',
      '{"ids":"59"}',
      '/api/log/operation/delete/59',
      '操作日志删除',
      22,
      '2023-02-21 13:18:02',
      '2023-02-21 13:18:02'
    ]
  }
]
[2023-02-21T13:18:02.229] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T13:18:02.236] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T13:18:02.237] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 10, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 10,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T13:18:09.128] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T13:18:09.133] [INFO] db - [
  "Executing (default): UPDATE `log_operations` SET `delete_time`=? WHERE `delete_time` IS NULL AND `id` IN ('60')",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { id: [Array] },
    attributes: { exclude: [Array] },
    hooks: true,
    individualHooks: false,
    force: false,
    cascade: false,
    restartIdentity: false,
    type: 'BULKUPDATE',
    model: log_operation,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [ '2023-02-21 13:18:09' ]
  }
]
[2023-02-21T13:18:09.139] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'DELETE',
      '{"ids":"60"}',
      '/api/log/operation/delete/60',
      '操作日志删除',
      12,
      '2023-02-21 13:18:09',
      '2023-02-21 13:18:09'
    ]
  }
]
[2023-02-21T13:18:09.155] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T13:18:09.165] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T13:18:09.166] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 10, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 10,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T13:18:25.229] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T13:18:25.231] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:18:25.248] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:18:25.249] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:18:25.251] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:18:25.253] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:18:25.255] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:18:25.258] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:18:25.260] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:18:25.262] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'post' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:18:25.264] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'tag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:18:25.265] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'postTag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:18:25.267] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:18:25.269] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:18:25.270] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:18:25.272] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:18:25.274] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:18:25.277] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:18:25.279] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:18:25.281] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:18:25.283] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `post`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:18:25.285] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `tag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:18:25.287] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `postTag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:18:34.891] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T13:18:34.893] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:18:34.905] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:18:34.906] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:18:34.908] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:18:34.909] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:18:34.911] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:18:34.912] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:18:34.914] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:18:34.915] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'post' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:18:34.916] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'tag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:18:34.918] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'postTag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:18:34.920] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:18:34.922] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:18:34.923] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:18:34.925] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:18:34.926] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:18:34.929] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:18:34.931] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:18:34.933] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:18:34.935] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `post`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:18:34.936] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `tag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:18:34.938] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `postTag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:19:03.624] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T13:19:03.627] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:19:03.641] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:19:03.642] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:19:03.643] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:19:03.644] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:19:03.645] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:19:03.645] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:19:03.646] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:19:03.647] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'post' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:19:03.648] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'tag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:19:03.649] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'postTag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:19:03.650] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:19:03.651] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:19:03.651] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:19:03.652] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:19:03.653] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:19:03.655] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:19:03.657] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:19:03.658] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:19:03.659] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `post`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:19:03.660] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `tag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:19:03.661] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `postTag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:19:25.611] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T13:19:25.613] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:19:25.625] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:19:25.627] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:19:25.628] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:19:25.629] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:19:25.631] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:19:25.632] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:19:25.634] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:19:25.636] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'post' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:19:25.638] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'tag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:19:25.639] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'postTag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:19:25.640] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:19:25.642] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:19:25.643] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:19:25.644] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:19:25.645] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:19:25.646] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:19:25.647] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:19:25.648] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:19:25.649] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `post`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:19:25.651] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `tag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:19:25.652] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `postTag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:19:33.799] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T13:19:33.801] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:19:33.814] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:19:33.815] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:19:33.816] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:19:33.818] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:19:33.820] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:19:33.821] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:19:33.822] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:19:33.823] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'post' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:19:33.824] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'tag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:19:33.825] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'postTag' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:19:33.825] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:19:33.826] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:19:33.827] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:19:33.829] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:19:33.831] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:19:33.834] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:19:33.835] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:19:33.836] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:19:33.837] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `post`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'posts', singular: 'post' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:19:33.838] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `tag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'tags', singular: 'tag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:19:33.839] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `postTag`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: true,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'postTags', singular: 'postTag' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:20:00.087] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T13:20:00.089] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:20:00.104] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:20:00.105] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:20:00.106] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:20:00.108] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:20:00.110] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:20:00.112] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:20:00.113] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:20:00.115] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:20:00.116] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:20:00.117] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:20:00.118] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:20:00.120] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:20:00.123] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:20:00.125] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:20:00.126] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:22:53.649] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T13:22:53.652] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:22:53.685] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:22:53.688] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:22:53.692] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:22:53.695] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:22:53.698] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:22:53.701] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:22:53.703] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:22:53.706] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:22:53.708] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:22:53.709] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:22:53.711] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:22:53.712] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:22:53.715] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:22:53.716] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:22:53.720] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:22:57.929] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T13:22:57.931] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:22:57.943] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:22:57.945] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:22:57.947] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:22:57.948] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:22:57.949] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:22:57.950] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:22:57.951] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:22:57.952] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:22:57.954] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:22:57.955] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:22:57.956] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:22:57.957] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:22:57.960] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:22:57.962] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:22:57.964] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:23:34.680] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T13:23:34.682] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:23:34.701] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:23:34.703] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:23:34.705] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:23:34.708] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:23:34.710] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:23:34.713] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:23:34.714] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:23:34.717] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:23:34.719] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:23:34.720] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:23:34.721] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:23:34.722] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:23:34.724] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:23:34.725] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:23:34.726] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:25:54.773] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T13:25:54.776] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:25:54.794] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:25:54.795] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:25:54.796] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:25:54.798] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:25:54.799] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:25:54.801] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:25:54.802] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:25:54.804] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:25:54.806] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:25:54.808] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:25:54.809] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:25:54.810] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:25:54.813] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:25:54.815] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:25:54.817] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:25:58.985] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T13:25:58.987] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:25:58.999] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:25:59.001] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:25:59.002] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:25:59.003] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:25:59.004] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:25:59.005] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:25:59.007] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:25:59.008] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:25:59.010] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:25:59.011] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:25:59.012] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:25:59.013] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:25:59.015] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:25:59.017] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:25:59.018] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:37:04.852] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T13:37:04.854] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:37:04.868] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:37:04.869] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:37:04.870] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:37:04.871] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:37:04.872] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:37:04.873] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:37:04.875] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:37:04.876] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:37:04.878] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:37:04.879] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:37:04.880] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:37:04.881] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:37:04.884] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:37:04.885] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:37:04.886] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:37:22.803] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T13:37:22.805] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:37:22.817] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:37:22.819] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:37:22.820] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:37:22.821] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:37:22.822] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:37:22.823] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:37:22.825] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:37:22.826] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:37:22.827] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:37:22.828] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:37:22.829] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:37:22.830] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:37:22.832] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:37:22.833] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:37:22.835] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:37:41.417] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T13:37:41.418] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:37:41.430] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:37:41.432] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:37:41.433] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:37:41.434] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:37:41.435] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:37:41.436] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:37:41.437] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:37:41.439] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:37:41.440] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:37:41.441] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:37:41.442] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:37:41.443] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:37:41.445] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:37:41.446] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:37:41.446] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:39:16.595] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T13:39:16.597] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:39:16.609] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:39:16.610] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:39:16.611] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:39:16.612] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:39:16.614] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:39:16.616] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:39:16.616] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:39:16.617] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:39:16.618] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:39:16.619] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:39:16.620] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:39:16.621] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:39:16.622] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:39:16.623] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:39:16.624] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:39:54.584] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T13:39:54.586] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:39:54.599] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:39:54.600] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:39:54.600] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:39:54.602] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:39:54.603] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:39:54.604] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:39:54.606] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:39:54.607] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:39:54.609] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:39:54.611] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:39:54.612] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:39:54.614] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:39:54.616] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:39:54.617] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:39:54.618] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:40:03.410] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T13:40:03.413] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:40:03.426] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:40:03.427] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:40:03.428] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:40:03.429] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:40:03.430] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:40:03.432] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:40:03.433] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:40:03.435] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:40:03.437] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:40:03.438] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:40:03.439] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:40:03.441] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:40:03.443] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:40:03.444] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:40:03.445] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:42:06.981] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T13:42:06.983] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:42:06.996] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:42:11.110] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T13:42:11.111] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:42:11.123] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:42:11.125] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:42:11.126] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:42:11.126] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:42:11.128] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:42:11.129] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:42:11.130] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:42:11.131] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:42:11.132] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:42:11.133] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:42:11.134] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:42:11.135] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:42:11.137] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:42:11.139] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:42:11.140] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:47:03.358] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T13:47:03.360] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:47:03.372] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:47:03.374] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:47:03.375] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:47:03.376] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:47:03.377] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:47:03.379] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:47:03.380] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:47:03.381] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:47:03.382] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:47:03.384] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:47:03.385] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:47:03.386] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:47:03.389] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:47:03.390] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:47:03.390] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:48:21.852] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T13:48:21.854] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:48:21.872] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:48:21.874] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:48:21.875] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:48:21.876] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:48:21.877] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:48:21.879] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:48:21.881] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:48:21.883] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:48:21.884] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:48:21.885] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:48:21.886] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:48:21.887] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:48:21.889] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:48:21.890] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:48:21.891] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:49:10.245] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T13:49:10.247] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:49:10.268] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:49:10.272] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:49:10.273] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:49:10.274] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:49:10.275] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:49:10.277] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:49:10.278] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:49:10.279] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:49:10.280] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:49:10.281] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:49:10.282] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:49:10.285] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:49:10.289] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:49:10.291] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:49:10.293] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:49:14.706] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T13:49:14.707] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:49:14.720] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:49:14.722] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:49:14.723] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:49:14.724] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:49:14.726] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:49:14.728] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:49:14.729] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:49:14.730] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:49:14.731] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:49:14.732] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:49:14.733] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:49:14.734] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:49:14.736] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:49:14.739] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:49:14.740] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:49:20.359] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T13:49:20.361] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:49:20.374] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:49:20.375] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:49:20.375] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:49:20.376] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:49:20.377] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:49:20.379] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:49:20.380] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:49:20.381] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:49:20.381] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:49:20.382] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:49:20.383] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:49:20.384] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:49:20.385] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:49:20.386] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:49:20.387] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:55:53.367] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T13:55:53.370] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:55:53.389] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:55:53.391] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:55:53.392] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:55:53.394] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:55:53.397] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:55:53.400] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:55:53.402] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:55:53.406] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:55:53.407] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:55:53.409] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:55:53.410] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:55:53.412] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:55:53.414] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:55:53.415] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:55:53.417] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:55:59.056] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T13:55:59.057] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:55:59.069] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:55:59.070] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:55:59.072] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:55:59.073] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:55:59.074] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:55:59.076] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:55:59.077] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:55:59.077] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:55:59.078] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:55:59.079] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:55:59.080] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:55:59.081] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:55:59.082] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:55:59.084] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:55:59.085] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:57:46.355] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T13:57:46.356] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:57:46.369] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:57:46.370] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:57:46.371] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:57:46.372] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:57:46.374] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:57:46.376] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:57:46.377] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T13:57:46.378] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:57:46.380] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:57:46.380] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:57:46.381] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:57:46.382] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:57:46.384] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:57:46.385] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T13:57:46.386] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:04:21.209] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:04:21.210] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:04:21.223] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:04:21.224] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:04:21.225] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:04:21.225] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:04:21.227] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:04:21.230] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:04:21.231] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:04:21.232] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:04:21.233] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:04:21.234] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:04:21.235] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:04:21.236] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:04:21.238] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:04:21.239] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:04:21.240] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:05:10.406] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:05:10.408] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:05:10.419] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:05:10.420] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:05:10.422] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:05:10.423] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:05:10.424] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:05:10.426] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:05:10.427] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:05:10.428] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:05:10.429] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:05:10.430] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:05:10.431] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:05:10.433] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:05:10.435] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:05:10.437] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:05:10.438] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:05:24.411] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:05:24.412] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:05:24.424] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:05:24.425] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:05:24.426] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:05:24.428] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:05:24.430] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:05:24.432] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:05:24.433] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:05:24.434] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:05:24.435] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:05:24.435] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:05:24.436] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:05:24.437] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:05:24.439] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:05:24.440] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:05:24.441] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:05:29.958] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:05:29.961] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:05:29.974] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:05:29.975] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:05:29.976] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:05:29.978] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:05:29.980] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:05:29.981] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:05:29.983] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:05:29.984] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:05:29.985] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:05:29.985] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:05:29.986] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:05:29.987] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:05:29.989] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:05:29.990] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:05:29.991] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:06:04.216] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:06:04.218] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:06:04.232] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:06:04.234] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:06:04.235] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:06:04.236] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:06:04.237] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:06:04.239] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:06:04.241] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:06:04.242] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:06:04.243] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:06:04.245] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:06:04.246] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:06:04.248] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:06:04.250] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:06:04.251] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:06:04.253] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:06:09.796] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:06:09.798] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:06:09.811] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:06:09.812] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:06:09.813] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:06:09.814] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:06:09.815] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:06:09.817] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:06:09.818] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:06:09.819] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:06:09.821] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:06:09.822] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:06:09.823] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:06:09.824] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:06:09.825] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:06:09.826] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:06:09.827] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:06:36.143] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:06:36.145] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:06:36.157] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:06:36.159] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:06:36.161] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:06:36.161] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:06:36.163] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:06:36.164] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:06:36.166] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:06:36.167] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:06:36.168] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:06:36.169] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:06:36.170] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:06:36.171] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:06:36.173] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:06:36.174] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:06:36.176] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:06:55.876] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:06:55.879] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:06:55.892] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:06:55.893] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:06:55.894] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:06:55.896] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:06:55.896] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:06:55.897] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:06:55.899] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:06:55.900] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:06:55.901] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:06:55.902] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:06:55.903] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:06:55.904] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:06:55.907] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:06:55.908] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:06:55.910] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:07:15.135] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T14:07:15.155] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T14:07:15.156] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T14:07:17.560] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T14:07:17.568] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T14:07:17.569] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 10, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 10,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T14:07:19.596] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T14:07:19.606] [INFO] db - [
  "Executing (default): UPDATE `log_operations` SET `delete_time`=? WHERE `delete_time` IS NULL AND `id` IN ('61')",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { id: [Array] },
    attributes: { exclude: [Array] },
    hooks: true,
    individualHooks: false,
    force: false,
    cascade: false,
    restartIdentity: false,
    type: 'BULKUPDATE',
    model: log_operation,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [ '2023-02-21 14:07:19' ]
  }
]
[2023-02-21T14:07:19.628] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'DELETE',
      '{"ids":"61"}',
      '/api/log/operation/delete/61',
      '操作日志删除',
      31,
      '2023-02-21 14:07:19',
      '2023-02-21 14:07:19'
    ]
  }
]
[2023-02-21T14:07:19.647] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T14:07:19.654] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T14:07:19.655] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 10, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 10,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T14:29:46.929] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:29:46.931] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:29:46.949] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:29:46.950] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:29:46.952] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:29:46.952] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:29:46.954] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:29:46.955] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:29:46.956] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:29:46.957] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:29:46.959] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:29:46.960] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:29:46.961] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:29:46.962] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:29:46.964] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:29:46.965] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:29:46.965] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:30:09.774] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:30:09.776] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:30:09.790] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:30:09.794] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:30:09.797] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:30:15.597] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:30:15.598] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:30:15.611] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:30:15.614] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:30:15.615] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:30:30.111] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:30:30.113] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:30:30.126] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:30:30.128] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:30:30.130] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:30:44.223] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:30:44.225] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:30:44.237] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:30:44.241] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:30:44.242] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:31:41.618] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:31:41.620] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:31:41.635] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:31:41.637] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:31:41.639] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:32:28.528] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:32:28.529] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:32:28.542] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:32:28.545] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:32:28.546] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:33:08.472] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:33:08.474] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:33:08.487] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:33:08.490] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:33:08.491] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:33:45.838] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:33:45.839] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:33:45.853] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:33:45.856] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:33:45.857] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:34:02.019] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:34:02.020] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:34:02.033] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:34:02.036] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:34:02.037] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:34:14.415] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:34:14.417] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:34:14.431] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:34:14.433] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:34:14.435] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:34:21.434] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:34:21.436] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:34:21.448] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:34:21.451] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:34:21.452] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:34:38.263] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:34:38.265] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:34:38.277] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:34:38.280] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:34:38.281] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:35:15.780] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:35:15.782] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:35:15.795] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:35:15.798] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:35:15.799] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:35:20.507] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:35:20.509] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:35:20.522] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:35:20.524] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:35:20.525] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:35:44.500] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:35:44.502] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:35:44.515] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:35:44.517] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:35:44.518] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:36:23.374] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:36:23.376] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:36:23.390] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:36:23.392] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:36:23.393] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:36:42.529] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:36:42.530] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:36:42.543] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:36:42.545] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:36:42.547] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:37:05.165] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:37:05.167] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:37:05.180] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:37:05.181] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:37:05.181] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:37:05.183] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:37:05.184] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:37:05.185] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:37:05.185] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:37:05.186] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:37:05.187] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:37:05.188] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:37:05.189] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:37:05.189] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:37:05.191] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:37:05.192] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:37:05.193] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:37:10.246] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T14:37:10.256] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T14:37:10.257] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T14:37:12.249] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T14:37:12.256] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T14:37:12.257] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 10, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 10,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T14:37:14.268] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T14:37:14.279] [INFO] db - [
  "Executing (default): UPDATE `log_operations` SET `delete_time`=? WHERE `delete_time` IS NULL AND `id` IN ('62')",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { id: [Array] },
    attributes: { exclude: [Array] },
    hooks: true,
    individualHooks: false,
    force: false,
    cascade: false,
    restartIdentity: false,
    type: 'BULKUPDATE',
    model: log_operation,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [ '2023-02-21 14:37:14' ]
  }
]
[2023-02-21T14:37:14.299] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'DELETE',
      '{"ids":"62"}',
      '/api/log/operation/delete/62',
      '操作日志删除',
      32,
      '2023-02-21 14:37:14',
      '2023-02-21 14:37:14'
    ]
  }
]
[2023-02-21T14:37:14.318] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T14:37:14.324] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T14:37:14.327] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 10, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 10,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T14:37:39.704] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:37:39.707] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:37:39.720] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:37:39.721] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:37:39.722] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:37:39.723] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:37:39.724] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:37:39.726] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:37:39.727] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:37:39.728] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:37:39.729] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:37:39.730] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:37:39.730] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:37:39.732] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:37:39.734] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:37:39.735] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:37:39.736] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:40:56.534] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:40:56.537] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:40:56.551] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:40:56.551] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:40:56.552] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:40:56.554] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:40:56.555] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:40:56.556] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:40:56.558] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:40:56.559] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:40:56.560] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:40:56.561] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:40:56.562] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:40:56.562] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:40:56.564] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:40:56.565] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:40:56.566] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:41:32.233] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:41:32.235] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:41:32.248] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:41:32.249] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:41:32.250] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:41:32.251] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:41:32.252] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:41:32.254] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:41:32.255] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:41:32.256] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:41:32.256] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:41:32.257] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:41:32.258] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:41:32.259] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:41:32.261] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:41:32.262] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:41:32.263] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:41:41.592] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:41:41.594] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:41:41.607] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:41:41.609] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:41:41.610] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:41:41.611] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:41:41.612] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:41:41.614] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:41:41.616] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:41:41.617] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:41:41.618] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:41:41.619] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:41:41.621] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:41:41.622] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:41:41.624] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:41:41.625] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:41:41.626] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:43:23.237] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:43:23.239] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:43:23.252] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:43:23.253] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:43:23.254] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:43:23.255] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:43:23.256] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:43:23.258] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:43:23.260] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:43:23.261] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:43:23.262] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:43:23.264] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:43:23.265] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:43:23.266] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:43:23.269] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:43:23.271] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:43:23.273] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:44:55.248] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:44:55.251] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:44:55.267] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:44:55.268] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:44:55.269] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:44:55.270] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:44:55.270] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:44:55.271] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:44:55.272] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:44:55.273] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:44:55.274] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:44:55.275] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:44:55.276] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:44:55.277] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:44:55.279] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:44:55.280] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:44:55.281] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:45:42.844] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:45:42.846] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:45:42.861] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:45:42.862] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:45:42.863] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:45:42.864] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:45:42.864] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:45:42.865] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:45:42.867] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:45:42.868] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:45:42.870] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:45:42.871] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:45:42.872] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:45:42.873] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:45:42.874] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:45:42.875] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:45:42.876] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:45:58.899] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:45:58.901] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:45:58.913] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:45:58.914] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:45:58.916] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:45:58.918] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:45:58.919] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:45:58.921] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:45:58.922] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:45:58.923] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:45:58.924] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:45:58.926] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:45:58.927] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:45:58.928] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:45:58.930] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:45:58.931] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:45:58.933] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:46:17.232] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:46:17.235] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:46:17.250] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:46:17.251] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:46:17.252] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:46:17.254] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:46:17.255] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:46:17.257] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:46:17.258] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:46:17.259] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:46:17.261] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:46:17.262] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:46:17.263] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:46:17.264] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:46:17.266] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:46:17.267] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:46:17.268] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:46:22.736] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:46:22.737] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:46:22.750] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:46:22.752] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:46:22.752] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:46:22.753] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:46:22.755] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:46:22.756] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:46:22.758] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:46:22.759] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:46:22.761] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:46:22.762] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:46:22.762] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:46:22.763] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:46:22.765] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:46:22.766] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:46:22.767] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:49:37.013] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:49:37.015] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:49:37.027] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:49:37.028] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:49:37.030] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:49:37.031] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:49:37.033] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:49:37.034] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:49:37.035] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:49:37.037] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:49:37.038] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:49:37.039] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:49:37.040] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:49:37.041] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:49:37.045] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:49:37.047] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:49:37.048] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:49:42.103] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:49:42.105] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:49:42.119] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:49:42.120] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:49:42.122] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:49:42.124] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:49:42.126] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:49:42.128] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:49:42.129] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:49:42.130] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:49:42.132] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:49:42.133] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:49:42.135] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:49:42.136] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:49:42.139] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:49:42.141] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:49:42.143] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:50:16.920] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:50:16.922] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:50:16.935] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:50:16.936] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:50:16.937] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:50:16.939] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:50:16.940] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:50:16.942] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:50:16.943] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:50:16.944] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:50:16.945] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:50:16.946] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:50:16.947] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:50:16.948] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:50:16.951] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:50:16.952] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:50:16.954] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:50:34.371] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:50:34.374] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:50:34.392] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:50:34.393] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:50:34.394] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:50:34.396] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:50:34.398] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:50:34.400] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:50:34.401] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:50:34.403] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:50:34.404] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:50:34.405] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:50:34.406] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:50:34.407] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:50:34.409] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:50:34.410] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:50:34.411] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:50:50.175] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:50:50.177] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:50:50.189] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:50:50.191] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:50:50.193] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:50:50.194] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:50:50.196] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:50:50.198] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:50:50.199] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:50:50.201] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:50:50.202] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:50:50.203] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:50:50.204] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:50:50.205] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:50:50.208] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:50:50.210] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:50:50.211] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:51:13.119] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:51:13.121] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:51:13.134] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:51:13.135] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:51:13.136] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:51:13.137] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:51:13.139] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:51:13.140] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:51:13.141] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:51:13.142] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:51:13.143] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:51:13.143] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:51:13.144] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:51:13.145] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:51:13.147] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:51:13.148] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:51:13.149] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:51:26.893] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:51:26.895] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:51:26.909] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:51:26.911] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:51:26.912] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:51:26.912] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:51:26.913] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:51:26.915] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:51:26.916] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:51:26.918] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:51:26.919] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:51:26.920] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:51:26.921] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:51:26.922] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:51:26.924] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:51:26.925] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:51:26.926] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:54:58.600] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:54:58.603] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:54:58.616] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:54:58.617] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:54:58.618] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:54:58.618] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:54:58.621] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:54:58.623] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:54:58.624] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:54:58.625] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:54:58.626] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:54:58.627] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:54:58.628] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:54:58.629] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:54:58.631] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:54:58.633] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:54:58.634] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:55:59.356] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:55:59.359] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:55:59.374] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:55:59.376] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:55:59.377] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:55:59.377] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:55:59.378] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:55:59.379] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:55:59.381] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:55:59.382] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:55:59.383] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:55:59.384] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:55:59.385] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:55:59.386] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:55:59.389] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:55:59.390] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:55:59.391] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:57:22.851] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-21T14:57:22.853] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-21T14:57:22.854] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T14:57:22.873] [INFO] db - [
  "Executing (default): SELECT count(DISTINCT(`system_user`.`id`)) AS `count` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND (`system_user`.`user_name` LIKE '%%' AND `system_user`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`system_user`.`delete_time` IS NULL AND (`system_user`.`user_name` LIKE '%%' AND `system_user`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    attributes: [ [Array] ],
    include: [ [Object] ],
    distinct: true,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: null,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T14:57:22.875] [INFO] db - [
  "Executing (default): SELECT `system_user`.*, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName` FROM (SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime` FROM `system_users` AS `system_user` WHERE (`system_user`.`delete_time` IS NULL AND (`system_user`.`user_name` LIKE '%%' AND `system_user`.`real_name` LIKE '%%')) LIMIT 0, 10) AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`userId` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`system_user`.`delete_time` IS NULL AND (`system_user`.`user_name` LIKE '%%' AND `system_user`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    include: [ [Object] ],
    distinct: true,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: 10,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    subQuery: true,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T14:59:38.428] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T14:59:38.432] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:59:38.447] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:59:38.448] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:59:38.450] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:59:38.451] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:59:38.453] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:59:38.455] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:59:38.457] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T14:59:38.459] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:59:38.460] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:59:38.462] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:59:38.463] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:59:38.464] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:59:38.467] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:59:38.469] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T14:59:38.470] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:01:58.458] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T15:01:58.461] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:01:58.474] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:01:58.475] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:01:58.477] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:01:58.480] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:01:58.482] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:01:58.483] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:01:58.484] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:01:58.485] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:01:58.486] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:01:58.487] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:01:58.488] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:01:58.489] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:01:58.491] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:01:58.492] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:01:58.492] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:02:26.539] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T15:02:26.540] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:02:26.552] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:02:26.553] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:02:26.555] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:02:26.556] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:02:26.558] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:02:26.559] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:02:26.561] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:02:26.561] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:02:26.562] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:02:26.563] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:02:26.564] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:02:26.565] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:02:26.566] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:02:26.567] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:02:26.568] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:05:11.508] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T15:05:11.510] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:05:11.526] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:05:11.526] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:05:11.528] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:05:11.529] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:05:11.530] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:05:11.532] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:05:11.534] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:05:11.535] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:05:11.537] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:05:11.538] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:05:11.539] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:05:11.540] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:05:11.543] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:05:11.544] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:05:11.545] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:05:26.606] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T15:05:26.607] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:05:26.621] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:05:26.623] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:05:26.623] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:05:26.624] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:05:26.626] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:05:26.628] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:05:26.629] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:05:26.630] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:05:26.631] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:05:26.632] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:05:26.633] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:05:26.634] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:05:26.636] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:05:26.637] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:05:26.638] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:07:45.400] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T15:07:45.401] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:07:45.413] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:07:45.415] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:07:45.417] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:07:45.417] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:07:45.419] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:07:45.420] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:07:45.421] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:07:45.422] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:07:45.422] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:07:45.423] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:07:45.424] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:07:45.425] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:07:45.428] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:07:45.429] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:07:45.429] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:08:17.716] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:08:17.727] [INFO] db - [
  "Executing (default): SELECT `id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `password`, `gender`, `avatar`, `mobile`, `email`, `dept_id` AS `deptId`, `org_id` AS `orgId`, `status`, `description`, `last_login_time` AS `lastLoginTime`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_users` AS `system_user` WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`user_name` = 'admin') LIMIT 1;",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`system_user`.`delete_time` IS NULL AND `system_user`.`user_name` = 'admin')",
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  'password',
      'gender', 'avatar',
      'mobile', 'email',
      [Array],  [Array],
      'status', 'description',
      [Array],  [Array],
      [Array]
    ],
    originalAttributes: [
      'userId',        'userName',
      'realName',      'password',
      'gender',        'avatar',
      'mobile',        'email',
      'deptId',        'orgId',
      'status',        'description',
      'lastLoginTime', 'createTime',
      'updateTime'
    ],
    tableNames: [ 'system_users' ],
    type: 'SELECT',
    model: system_user
  }
]
[2023-02-21T15:08:17.730] [INFO] db - [
  'Executing (ae157810-914d-47dc-b0ae-33018627bf0c): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'ae157810-914d-47dc-b0ae-33018627bf0c',
      connection: [Connection]
    }
  }
]
[2023-02-21T15:08:17.757] [INFO] db - [
  'Executing (ae157810-914d-47dc-b0ae-33018627bf0c): INSERT INTO `system_users` (`id`,`user_name`,`real_name`,`password`,`gender`,`avatar`,`mobile`,`email`,`dept_id`,`org_id`,`status`,`description`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'ae157810-914d-47dc-b0ae-33018627bf0c',
      connection: [Connection]
    },
    hooks: true,
    validate: true,
    fields: [
      'userId',        'userName',
      'realName',      'password',
      'gender',        'avatar',
      'mobile',        'email',
      'deptId',        'orgId',
      'status',        'description',
      'lastLoginTime', 'createTime',
      'updateTime',    'create_time',
      'update_time',   'delete_time'
    ],
    defaultFields: [
      'userId',        'userName',
      'realName',      'password',
      'gender',        'avatar',
      'mobile',        'email',
      'deptId',        'orgId',
      'status',        'description',
      'lastLoginTime', 'createTime',
      'updateTime',    'create_time',
      'update_time',   'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: system_user {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: system_user,
    bind: [
      'admin',
      'admin',
      'e10adc3949ba59abbe56e057f20f883e',
      1,
      '',
      '',
      '',
      null,
      '',
      1,
      '',
      '2023-02-21 15:08:17',
      '2023-02-21 15:08:17'
    ]
  }
]
[2023-02-21T15:08:17.766] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`id` IN (46, 47));',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: '(`system_role`.`delete_time` IS NULL AND `system_role`.`id` IN (46, 47))',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-21T15:08:17.768] [INFO] db - [
  'Executing (ae157810-914d-47dc-b0ae-33018627bf0c): SELECT `id`, `user_id` AS `userId`, `role_id` AS `roleId`, `create_time` AS `createTime`, `update_time` AS `updateTime`, `create_time`, `update_time`, `delete_time` FROM `system_user_roles` AS `system_user_role` WHERE (`system_user_role`.`delete_time` IS NULL AND `system_user_role`.`user_id` = 15);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'ae157810-914d-47dc-b0ae-33018627bf0c',
      connection: [Connection]
    },
    where: '(`system_user_role`.`delete_time` IS NULL AND `system_user_role`.`user_id` = 15)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'userId',
      'roleId',
      'createTime',
      'updateTime',
      'create_time',
      'update_time',
      'delete_time'
    ],
    attributes: [
      'id',
      [Array],
      [Array],
      [Array],
      [Array],
      'create_time',
      'update_time',
      'delete_time'
    ],
    tableNames: [ 'system_user_roles' ],
    type: 'SELECT',
    model: system_user_role
  }
]
[2023-02-21T15:08:17.813] [INFO] db - [
  "Executing (ae157810-914d-47dc-b0ae-33018627bf0c): INSERT INTO `system_user_roles` (`id`,`user_id`,`role_id`,`create_time`,`update_time`) VALUES (NULL,15,46,'2023-02-21 15:08:17','2023-02-21 15:08:17'),(NULL,15,47,'2023-02-21 15:08:17','2023-02-21 15:08:17');",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    validate: true,
    hooks: true,
    individualHooks: false,
    ignoreDuplicates: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'ae157810-914d-47dc-b0ae-33018627bf0c',
      connection: [Connection]
    },
    model: system_user_role,
    returning: true,
    fields: [
      'id',
      'userId',
      'roleId',
      'createTime',
      'updateTime',
      'create_time',
      'update_time',
      'delete_time'
    ],
    type: 'INSERT'
  }
]
[2023-02-21T15:08:17.816] [INFO] db - [
  'Executing (ae157810-914d-47dc-b0ae-33018627bf0c): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'ae157810-914d-47dc-b0ae-33018627bf0c',
      connection: [Connection],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-02-21T15:08:17.830] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'POST',
      '{"orgId":"","avatar":"","deptId":null,"description":"","email":"","mobile":"","roleIds":[46,47],"gender":1,"status":1,"userName":"admin","realName":"admin","password":"e10adc3949ba59abbe56e057f20f883e"}',
      '/api/system/user/create',
      '用户创建',
      129,
      '2023-02-21 15:08:17',
      '2023-02-21 15:08:17'
    ]
  }
]
[2023-02-21T15:08:17.879] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:08:17.891] [INFO] db - [
  "Executing (default): SELECT count(DISTINCT(`system_user`.`id`)) AS `count` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND (`system_user`.`user_name` LIKE '%%' AND `system_user`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`system_user`.`delete_time` IS NULL AND (`system_user`.`user_name` LIKE '%%' AND `system_user`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    attributes: [ [Array] ],
    include: [ [Object] ],
    distinct: true,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: null,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:08:17.892] [INFO] db - [
  "Executing (default): SELECT `system_user`.*, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName` FROM (SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime` FROM `system_users` AS `system_user` WHERE (`system_user`.`delete_time` IS NULL AND (`system_user`.`user_name` LIKE '%%' AND `system_user`.`real_name` LIKE '%%')) LIMIT 0, 10) AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`userId` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`system_user`.`delete_time` IS NULL AND (`system_user`.`user_name` LIKE '%%' AND `system_user`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    include: [ [Object] ],
    distinct: true,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: 10,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    subQuery: true,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:08:21.371] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:08:21.378] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T15:08:21.380] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T15:08:22.894] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:08:22.902] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T15:08:22.904] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 10, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 10,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T15:08:32.021] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-21T15:08:32.024] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-21T15:08:32.029] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:08:32.047] [INFO] db - [
  "Executing (default): SELECT count(DISTINCT(`system_user`.`id`)) AS `count` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND (`system_user`.`user_name` LIKE '%%' AND `system_user`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`system_user`.`delete_time` IS NULL AND (`system_user`.`user_name` LIKE '%%' AND `system_user`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    attributes: [ [Array] ],
    include: [ [Object] ],
    distinct: true,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: null,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:08:32.048] [INFO] db - [
  "Executing (default): SELECT `system_user`.*, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName` FROM (SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime` FROM `system_users` AS `system_user` WHERE (`system_user`.`delete_time` IS NULL AND (`system_user`.`user_name` LIKE '%%' AND `system_user`.`real_name` LIKE '%%')) LIMIT 0, 10) AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`userId` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`system_user`.`delete_time` IS NULL AND (`system_user`.`user_name` LIKE '%%' AND `system_user`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    include: [ [Object] ],
    distinct: true,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: 10,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    subQuery: true,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:09:48.774] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:09:48.782] [INFO] db - [
  "Executing (default): SELECT `id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `password`, `gender`, `avatar`, `mobile`, `email`, `dept_id` AS `deptId`, `org_id` AS `orgId`, `status`, `description`, `last_login_time` AS `lastLoginTime`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_users` AS `system_user` WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`user_name` = 'admin1') LIMIT 1;",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`system_user`.`delete_time` IS NULL AND `system_user`.`user_name` = 'admin1')",
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  'password',
      'gender', 'avatar',
      'mobile', 'email',
      [Array],  [Array],
      'status', 'description',
      [Array],  [Array],
      [Array]
    ],
    originalAttributes: [
      'userId',        'userName',
      'realName',      'password',
      'gender',        'avatar',
      'mobile',        'email',
      'deptId',        'orgId',
      'status',        'description',
      'lastLoginTime', 'createTime',
      'updateTime'
    ],
    tableNames: [ 'system_users' ],
    type: 'SELECT',
    model: system_user
  }
]
[2023-02-21T15:09:48.784] [INFO] db - [
  'Executing (9f93661b-c948-4942-89b6-93914f0bd422): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '9f93661b-c948-4942-89b6-93914f0bd422',
      connection: [Connection]
    }
  }
]
[2023-02-21T15:09:48.787] [INFO] db - [
  'Executing (9f93661b-c948-4942-89b6-93914f0bd422): INSERT INTO `system_users` (`id`,`user_name`,`real_name`,`password`,`gender`,`avatar`,`mobile`,`email`,`dept_id`,`org_id`,`status`,`description`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '9f93661b-c948-4942-89b6-93914f0bd422',
      connection: [Connection]
    },
    hooks: true,
    validate: true,
    fields: [
      'userId',        'userName',
      'realName',      'password',
      'gender',        'avatar',
      'mobile',        'email',
      'deptId',        'orgId',
      'status',        'description',
      'lastLoginTime', 'createTime',
      'updateTime',    'create_time',
      'update_time',   'delete_time'
    ],
    defaultFields: [
      'userId',        'userName',
      'realName',      'password',
      'gender',        'avatar',
      'mobile',        'email',
      'deptId',        'orgId',
      'status',        'description',
      'lastLoginTime', 'createTime',
      'updateTime',    'create_time',
      'update_time',   'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: system_user {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: system_user,
    bind: [
      'admin1',
      'admin1',
      'e10adc3949ba59abbe56e057f20f883e',
      2,
      '',
      '',
      '',
      null,
      '',
      1,
      '',
      '2023-02-21 15:09:48',
      '2023-02-21 15:09:48'
    ]
  }
]
[2023-02-21T15:09:48.794] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL AND `system_role`.`id` IN (46));',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: '(`system_role`.`delete_time` IS NULL AND `system_role`.`id` IN (46))',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-21T15:09:48.797] [INFO] db - [
  'Executing (9f93661b-c948-4942-89b6-93914f0bd422): SELECT `id`, `user_id` AS `userId`, `role_id` AS `roleId`, `create_time` AS `createTime`, `update_time` AS `updateTime`, `create_time`, `update_time`, `delete_time` FROM `system_user_roles` AS `system_user_role` WHERE (`system_user_role`.`delete_time` IS NULL AND `system_user_role`.`user_id` = 16);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '9f93661b-c948-4942-89b6-93914f0bd422',
      connection: [Connection]
    },
    where: '(`system_user_role`.`delete_time` IS NULL AND `system_user_role`.`user_id` = 16)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'userId',
      'roleId',
      'createTime',
      'updateTime',
      'create_time',
      'update_time',
      'delete_time'
    ],
    attributes: [
      'id',
      [Array],
      [Array],
      [Array],
      [Array],
      'create_time',
      'update_time',
      'delete_time'
    ],
    tableNames: [ 'system_user_roles' ],
    type: 'SELECT',
    model: system_user_role
  }
]
[2023-02-21T15:09:48.799] [INFO] db - [
  "Executing (9f93661b-c948-4942-89b6-93914f0bd422): INSERT INTO `system_user_roles` (`id`,`user_id`,`role_id`,`create_time`,`update_time`) VALUES (NULL,16,46,'2023-02-21 15:09:48','2023-02-21 15:09:48');",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    validate: true,
    hooks: true,
    individualHooks: false,
    ignoreDuplicates: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '9f93661b-c948-4942-89b6-93914f0bd422',
      connection: [Connection]
    },
    model: system_user_role,
    returning: true,
    fields: [
      'id',
      'userId',
      'roleId',
      'createTime',
      'updateTime',
      'create_time',
      'update_time',
      'delete_time'
    ],
    type: 'INSERT'
  }
]
[2023-02-21T15:09:48.801] [INFO] db - [
  'Executing (9f93661b-c948-4942-89b6-93914f0bd422): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '9f93661b-c948-4942-89b6-93914f0bd422',
      connection: [Connection],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-02-21T15:09:48.815] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'POST',
      '{"orgId":"","avatar":"","deptId":null,"description":"","email":"","mobile":"","roleIds":[46],"gender":2,"status":1,"userName":"admin1","realName":"admin1","password":"e10adc3949ba59abbe56e057f20f883e"}',
      '/api/system/user/create',
      '用户创建',
      48,
      '2023-02-21 15:09:48',
      '2023-02-21 15:09:48'
    ]
  }
]
[2023-02-21T15:09:48.860] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:09:48.872] [INFO] db - [
  "Executing (default): SELECT count(DISTINCT(`system_user`.`id`)) AS `count` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND (`system_user`.`user_name` LIKE '%%' AND `system_user`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`system_user`.`delete_time` IS NULL AND (`system_user`.`user_name` LIKE '%%' AND `system_user`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    attributes: [ [Array] ],
    include: [ [Object] ],
    distinct: true,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: null,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:09:48.873] [INFO] db - [
  "Executing (default): SELECT `system_user`.*, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName` FROM (SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime` FROM `system_users` AS `system_user` WHERE (`system_user`.`delete_time` IS NULL AND (`system_user`.`user_name` LIKE '%%' AND `system_user`.`real_name` LIKE '%%')) LIMIT 0, 10) AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`userId` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`system_user`.`delete_time` IS NULL AND (`system_user`.`user_name` LIKE '%%' AND `system_user`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    include: [ [Object] ],
    distinct: true,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: 10,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    subQuery: true,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:12:27.225] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:12:27.668] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'apifox/1.0.0 (https://www.apifox.cn)',
      '',
      '',
      'PUT',
      '{}',
      '/api/system/user/password/reset',
      447,
      '2023-02-21 15:12:27',
      '2023-02-21 15:12:27'
    ]
  }
]
[2023-02-21T15:12:52.140] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:12:52.149] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'apifox/1.0.0 (https://www.apifox.cn)',
      '',
      '',
      'PUT',
      '{"userIds":"64"}',
      '/api/system/user/password/reset',
      10,
      '2023-02-21 15:12:52',
      '2023-02-21 15:12:52'
    ]
  }
]
[2023-02-21T15:13:55.668] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T15:13:55.670] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:13:55.684] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:13:55.685] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:13:55.686] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:13:55.686] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:13:55.687] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:13:55.690] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:13:55.691] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:13:55.692] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:13:55.693] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:13:55.694] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:13:55.695] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:13:55.696] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:13:55.698] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:13:55.698] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:13:55.699] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:13:57.907] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:13:57.958] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'apifox/1.0.0 (https://www.apifox.cn)',
      '',
      '',
      'PUT',
      '{"userIds":"64"}',
      '/api/system/user/password/reset',
      57,
      '2023-02-21 15:13:57',
      '2023-02-21 15:13:57'
    ]
  }
]
[2023-02-21T15:14:17.694] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T15:14:17.697] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:14:17.710] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:14:17.712] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:14:17.714] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:14:17.715] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:14:17.717] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:14:17.718] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:14:17.719] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:14:17.720] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:14:17.721] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:14:17.722] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:14:17.722] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:14:17.723] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:14:17.725] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:14:17.726] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:14:17.726] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:14:20.377] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:14:20.390] [INFO] db - [
  'Executing (e3d3facd-67fa-4312-9fd4-2b80d0f46899): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'e3d3facd-67fa-4312-9fd4-2b80d0f46899',
      connection: [Connection]
    }
  }
]
[2023-02-21T15:14:20.410] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'apifox/1.0.0 (https://www.apifox.cn)',
      '',
      '',
      'PUT',
      '{"userIds":"64","password":"e10adc3949ba59abbe56e057f20f883e"}',
      '/api/system/user/password/reset',
      38,
      '2023-02-21 15:14:20',
      '2023-02-21 15:14:20'
    ]
  }
]
[2023-02-21T15:14:44.310] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:14:44.318] [INFO] db - [
  'Executing (e9284eec-6459-4c38-8be5-f3d64d8432d1): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'e9284eec-6459-4c38-8be5-f3d64d8432d1',
      connection: [Connection]
    }
  }
]
[2023-02-21T15:14:44.334] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'apifox/1.0.0 (https://www.apifox.cn)',
      '',
      '',
      'PUT',
      '{"userIds":"15,16","password":"e10adc3949ba59abbe56e057f20f883e"}',
      '/api/system/user/password/reset',
      28,
      '2023-02-21 15:14:44',
      '2023-02-21 15:14:44'
    ]
  }
]
[2023-02-21T15:15:09.308] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T15:15:09.310] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:15:09.323] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:15:09.324] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:15:09.325] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:15:09.326] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:15:09.328] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:15:09.329] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:15:09.329] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:15:09.330] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:15:09.331] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:15:09.332] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:15:09.333] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:15:09.334] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:15:09.337] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:15:09.338] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:15:09.339] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:15:12.691] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:15:12.704] [INFO] db - [
  'Executing (7509cf89-1d05-4de3-843c-3708859ee7c6): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '7509cf89-1d05-4de3-843c-3708859ee7c6',
      connection: [Connection]
    }
  }
]
[2023-02-21T15:15:12.725] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'apifox/1.0.0 (https://www.apifox.cn)',
      '',
      '',
      'PUT',
      '{"userIds":"15,16","password":"e10adc3949ba59abbe56e057f20f883e"}',
      '/api/system/user/password/reset',
      41,
      '2023-02-21 15:15:12',
      '2023-02-21 15:15:12'
    ]
  }
]
[2023-02-21T15:15:41.201] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T15:15:41.202] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:15:41.215] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:15:41.217] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:15:41.218] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:15:41.219] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:15:41.221] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:15:41.222] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:15:41.223] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:15:41.224] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:15:41.226] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:15:41.227] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:15:41.228] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:15:41.229] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:15:41.232] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:15:41.233] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:15:41.234] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:15:43.355] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:15:43.368] [INFO] db - [
  'Executing (4c849f85-70d6-497d-a158-893cc3d921dd): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '4c849f85-70d6-497d-a158-893cc3d921dd',
      connection: [Connection]
    }
  }
]
[2023-02-21T15:15:43.388] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'apifox/1.0.0 (https://www.apifox.cn)',
      '',
      '',
      'PUT',
      '{"userIds":"15,16","password":"e10adc3949ba59abbe56e057f20f883e"}',
      '/api/system/user/password/reset',
      38,
      '2023-02-21 15:15:43',
      '2023-02-21 15:15:43'
    ]
  }
]
[2023-02-21T15:16:27.656] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T15:16:27.658] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:16:27.673] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:16:27.674] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:16:27.675] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:16:27.677] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:16:27.681] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:16:27.684] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:16:27.686] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:16:27.688] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:16:27.690] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:16:27.691] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:16:27.693] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:16:27.695] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:16:27.701] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:16:27.703] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:16:27.705] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:16:28.602] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:16:28.644] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'apifox/1.0.0 (https://www.apifox.cn)',
      '',
      '',
      'PUT',
      '{"userIds":"15,16","password":"e10adc3949ba59abbe56e057f20f883e"}',
      '/api/system/user/password/reset',
      47,
      '2023-02-21 15:16:28',
      '2023-02-21 15:16:28'
    ]
  }
]
[2023-02-21T15:16:48.276] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T15:16:48.278] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:16:48.292] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:16:48.293] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:16:48.294] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:16:48.295] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:16:48.296] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:16:48.297] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:16:48.298] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:16:48.299] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:16:48.300] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:16:48.301] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:16:48.302] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:16:48.303] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:16:48.304] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:16:48.305] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:16:48.306] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:17:23.402] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:17:23.414] [INFO] db - [
  'Executing (edafce41-af74-4369-b306-b6532257d360): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'edafce41-af74-4369-b306-b6532257d360',
      connection: [Connection]
    }
  }
]
[2023-02-21T15:17:23.442] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'apifox/1.0.0 (https://www.apifox.cn)',
      '',
      '',
      'PUT',
      '{"userIds":"15,16","password":"e10adc3949ba59abbe56e057f20f883e"}',
      '/api/system/user/password/reset',
      45,
      '2023-02-21 15:17:23',
      '2023-02-21 15:17:23'
    ]
  }
]
[2023-02-21T15:18:30.754] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T15:18:30.759] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:18:30.777] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:18:30.778] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:18:30.779] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:18:30.780] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:18:30.781] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:18:30.783] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:18:30.784] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:18:30.786] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:18:30.788] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:18:30.789] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:18:30.791] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:18:30.793] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:18:30.795] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:18:30.796] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:18:30.797] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:18:38.350] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T15:18:38.352] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:18:38.365] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:18:38.367] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:18:38.369] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:18:38.370] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:18:38.371] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:18:38.373] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:18:38.374] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:18:38.375] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:18:38.377] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:18:38.378] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:18:38.379] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:18:38.381] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:18:38.384] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:18:38.385] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:18:38.386] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:18:47.514] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T15:18:47.516] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:18:47.529] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:18:47.530] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:18:47.531] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:18:47.533] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:18:47.535] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:18:47.537] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:18:47.538] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:18:47.538] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:18:47.539] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:18:47.540] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:18:47.541] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:18:47.542] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:18:47.543] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:18:47.545] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:18:47.546] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:18:49.737] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:18:49.752] [INFO] db - [
  'Executing (e97a73dd-1998-43c0-91d3-36ebe8ee8de6): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'e97a73dd-1998-43c0-91d3-36ebe8ee8de6',
      connection: [Connection]
    }
  }
]
[2023-02-21T15:18:49.756] [INFO] db - [
  "Executing (e97a73dd-1998-43c0-91d3-36ebe8ee8de6): SELECT `id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `password`, `gender`, `avatar`, `mobile`, `email`, `dept_id` AS `deptId`, `org_id` AS `orgId`, `status`, `description`, `last_login_time` AS `lastLoginTime`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_users` AS `system_user` WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = '15');",
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'e97a73dd-1998-43c0-91d3-36ebe8ee8de6',
      connection: [Connection]
    },
    where: "(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = '15')",
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  'password',
      'gender', 'avatar',
      'mobile', 'email',
      [Array],  [Array],
      'status', 'description',
      [Array],  [Array],
      [Array]
    ],
    originalAttributes: [
      'userId',        'userName',
      'realName',      'password',
      'gender',        'avatar',
      'mobile',        'email',
      'deptId',        'orgId',
      'status',        'description',
      'lastLoginTime', 'createTime',
      'updateTime'
    ],
    tableNames: [ 'system_users' ],
    type: 'SELECT',
    model: system_user
  }
]
[2023-02-21T15:18:49.766] [INFO] db - [
  'Executing (default): UPDATE `system_users` SET `id`=?,`password`=?,`update_time`=? WHERE (`delete_time` IS NULL AND `id` = ?)',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { [Symbol(and)]: [Array] },
    validate: true,
    hooks: true,
    individualHooks: false,
    returning: false,
    force: false,
    sideEffects: true,
    type: 'BULKUPDATE',
    fields: [ 'userId', 'password', 'update_time' ],
    model: system_user,
    skip: undefined,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [
      '15',
      'e10adc3949ba59abbe56e057f20f883e',
      '2023-02-21 15:18:49',
      '15'
    ]
  }
]
[2023-02-21T15:18:49.772] [INFO] db - [
  'Executing (e97a73dd-1998-43c0-91d3-36ebe8ee8de6): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'e97a73dd-1998-43c0-91d3-36ebe8ee8de6',
      connection: [Connection],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-02-21T15:18:49.774] [INFO] db - [
  'Executing (5ccc0d11-d7d3-4613-84a0-1116771d5273): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '5ccc0d11-d7d3-4613-84a0-1116771d5273',
      connection: [Connection]
    }
  }
]
[2023-02-21T15:18:49.776] [INFO] db - [
  "Executing (5ccc0d11-d7d3-4613-84a0-1116771d5273): SELECT `id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `password`, `gender`, `avatar`, `mobile`, `email`, `dept_id` AS `deptId`, `org_id` AS `orgId`, `status`, `description`, `last_login_time` AS `lastLoginTime`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_users` AS `system_user` WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = '16');",
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '5ccc0d11-d7d3-4613-84a0-1116771d5273',
      connection: [Connection]
    },
    where: "(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = '16')",
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  'password',
      'gender', 'avatar',
      'mobile', 'email',
      [Array],  [Array],
      'status', 'description',
      [Array],  [Array],
      [Array]
    ],
    originalAttributes: [
      'userId',        'userName',
      'realName',      'password',
      'gender',        'avatar',
      'mobile',        'email',
      'deptId',        'orgId',
      'status',        'description',
      'lastLoginTime', 'createTime',
      'updateTime'
    ],
    tableNames: [ 'system_users' ],
    type: 'SELECT',
    model: system_user
  }
]
[2023-02-21T15:18:49.779] [INFO] db - [
  'Executing (default): UPDATE `system_users` SET `id`=?,`password`=?,`update_time`=? WHERE (`delete_time` IS NULL AND `id` = ?)',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { [Symbol(and)]: [Array] },
    validate: true,
    hooks: true,
    individualHooks: false,
    returning: false,
    force: false,
    sideEffects: true,
    type: 'BULKUPDATE',
    fields: [ 'userId', 'password', 'update_time' ],
    model: system_user,
    skip: undefined,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [
      '16',
      'e10adc3949ba59abbe56e057f20f883e',
      '2023-02-21 15:18:49',
      '16'
    ]
  }
]
[2023-02-21T15:18:49.784] [INFO] db - [
  'Executing (5ccc0d11-d7d3-4613-84a0-1116771d5273): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '5ccc0d11-d7d3-4613-84a0-1116771d5273',
      connection: [Connection],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-02-21T15:18:49.803] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'apifox/1.0.0 (https://www.apifox.cn)',
      '',
      '',
      'PUT',
      '{"userIds":"15,16"}',
      '/api/system/user/password/reset',
      '重置用户密码',
      75,
      '2023-02-21 15:18:49',
      '2023-02-21 15:18:49'
    ]
  }
]
[2023-02-21T15:19:07.572] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T15:19:07.574] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:19:07.587] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:19:07.589] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:19:07.590] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:19:07.591] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:19:07.593] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:19:07.594] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:19:07.596] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:19:07.597] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:19:07.598] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:19:07.599] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:19:07.600] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:19:07.602] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:19:07.603] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:19:07.604] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:19:07.605] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:19:10.069] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:19:10.083] [INFO] db - [
  'Executing (cdb846d7-e81b-4d18-884b-386192744939): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'cdb846d7-e81b-4d18-884b-386192744939',
      connection: [Connection]
    }
  }
]
[2023-02-21T15:19:10.087] [INFO] db - [
  "Executing (cdb846d7-e81b-4d18-884b-386192744939): SELECT `id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `password`, `gender`, `avatar`, `mobile`, `email`, `dept_id` AS `deptId`, `org_id` AS `orgId`, `status`, `description`, `last_login_time` AS `lastLoginTime`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_users` AS `system_user` WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = '15');",
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'cdb846d7-e81b-4d18-884b-386192744939',
      connection: [Connection]
    },
    where: "(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = '15')",
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  'password',
      'gender', 'avatar',
      'mobile', 'email',
      [Array],  [Array],
      'status', 'description',
      [Array],  [Array],
      [Array]
    ],
    originalAttributes: [
      'userId',        'userName',
      'realName',      'password',
      'gender',        'avatar',
      'mobile',        'email',
      'deptId',        'orgId',
      'status',        'description',
      'lastLoginTime', 'createTime',
      'updateTime'
    ],
    tableNames: [ 'system_users' ],
    type: 'SELECT',
    model: system_user
  }
]
[2023-02-21T15:19:10.101] [INFO] db - [
  'Executing (default): UPDATE `system_users` SET `id`=?,`password`=?,`update_time`=? WHERE (`delete_time` IS NULL AND `id` = ?)',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { [Symbol(and)]: [Array] },
    validate: true,
    hooks: true,
    individualHooks: false,
    returning: false,
    force: false,
    sideEffects: true,
    type: 'BULKUPDATE',
    fields: [ 'userId', 'password', 'update_time' ],
    model: system_user,
    skip: undefined,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [
      '15',
      'c4ca4238a0b923820dcc509a6f75849b',
      '2023-02-21 15:19:10',
      '15'
    ]
  }
]
[2023-02-21T15:19:10.111] [INFO] db - [
  'Executing (cdb846d7-e81b-4d18-884b-386192744939): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'cdb846d7-e81b-4d18-884b-386192744939',
      connection: [Connection],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-02-21T15:19:10.115] [INFO] db - [
  'Executing (701b2d5e-d2ef-40f3-a48a-b78821d21a4e): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '701b2d5e-d2ef-40f3-a48a-b78821d21a4e',
      connection: [Connection]
    }
  }
]
[2023-02-21T15:19:10.118] [INFO] db - [
  "Executing (701b2d5e-d2ef-40f3-a48a-b78821d21a4e): SELECT `id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `password`, `gender`, `avatar`, `mobile`, `email`, `dept_id` AS `deptId`, `org_id` AS `orgId`, `status`, `description`, `last_login_time` AS `lastLoginTime`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_users` AS `system_user` WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = '16');",
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '701b2d5e-d2ef-40f3-a48a-b78821d21a4e',
      connection: [Connection]
    },
    where: "(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = '16')",
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  'password',
      'gender', 'avatar',
      'mobile', 'email',
      [Array],  [Array],
      'status', 'description',
      [Array],  [Array],
      [Array]
    ],
    originalAttributes: [
      'userId',        'userName',
      'realName',      'password',
      'gender',        'avatar',
      'mobile',        'email',
      'deptId',        'orgId',
      'status',        'description',
      'lastLoginTime', 'createTime',
      'updateTime'
    ],
    tableNames: [ 'system_users' ],
    type: 'SELECT',
    model: system_user
  }
]
[2023-02-21T15:19:10.122] [INFO] db - [
  'Executing (default): UPDATE `system_users` SET `id`=?,`password`=?,`update_time`=? WHERE (`delete_time` IS NULL AND `id` = ?)',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { [Symbol(and)]: [Array] },
    validate: true,
    hooks: true,
    individualHooks: false,
    returning: false,
    force: false,
    sideEffects: true,
    type: 'BULKUPDATE',
    fields: [ 'userId', 'password', 'update_time' ],
    model: system_user,
    skip: undefined,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [
      '16',
      'c4ca4238a0b923820dcc509a6f75849b',
      '2023-02-21 15:19:10',
      '16'
    ]
  }
]
[2023-02-21T15:19:10.129] [INFO] db - [
  'Executing (701b2d5e-d2ef-40f3-a48a-b78821d21a4e): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '701b2d5e-d2ef-40f3-a48a-b78821d21a4e',
      connection: [Connection],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-02-21T15:19:10.151] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'apifox/1.0.0 (https://www.apifox.cn)',
      '',
      '',
      'PUT',
      '{"userIds":"15,16"}',
      '/api/system/user/password/reset',
      '重置用户密码',
      89,
      '2023-02-21 15:19:10',
      '2023-02-21 15:19:10'
    ]
  }
]
[2023-02-21T15:19:31.392] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T15:19:31.394] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:19:31.406] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:19:31.407] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:19:31.408] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:19:31.410] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:19:31.411] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:19:31.413] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:19:31.414] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:19:31.415] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:19:31.416] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:19:31.417] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:19:31.419] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:19:31.420] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:19:31.422] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:19:31.423] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:19:31.424] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:19:32.993] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:19:33.004] [INFO] db - [
  'Executing (9143425e-85cc-48ca-8d39-c3b26866c660): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '9143425e-85cc-48ca-8d39-c3b26866c660',
      connection: [Connection]
    }
  }
]
[2023-02-21T15:19:33.008] [INFO] db - [
  "Executing (9143425e-85cc-48ca-8d39-c3b26866c660): SELECT `id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `password`, `gender`, `avatar`, `mobile`, `email`, `dept_id` AS `deptId`, `org_id` AS `orgId`, `status`, `description`, `last_login_time` AS `lastLoginTime`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_users` AS `system_user` WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = '15');",
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '9143425e-85cc-48ca-8d39-c3b26866c660',
      connection: [Connection]
    },
    where: "(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = '15')",
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  'password',
      'gender', 'avatar',
      'mobile', 'email',
      [Array],  [Array],
      'status', 'description',
      [Array],  [Array],
      [Array]
    ],
    originalAttributes: [
      'userId',        'userName',
      'realName',      'password',
      'gender',        'avatar',
      'mobile',        'email',
      'deptId',        'orgId',
      'status',        'description',
      'lastLoginTime', 'createTime',
      'updateTime'
    ],
    tableNames: [ 'system_users' ],
    type: 'SELECT',
    model: system_user
  }
]
[2023-02-21T15:19:33.015] [INFO] db - [
  'Executing (default): UPDATE `system_users` SET `id`=?,`password`=?,`update_time`=? WHERE (`delete_time` IS NULL AND `id` = ?)',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { [Symbol(and)]: [Array] },
    validate: true,
    hooks: true,
    individualHooks: false,
    returning: false,
    force: false,
    sideEffects: true,
    type: 'BULKUPDATE',
    fields: [ 'userId', 'password', 'update_time' ],
    model: system_user,
    skip: undefined,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [
      '15',
      'e10adc3949ba59abbe56e057f20f883e',
      '2023-02-21 15:19:33',
      '15'
    ]
  }
]
[2023-02-21T15:19:33.022] [INFO] db - [
  'Executing (9143425e-85cc-48ca-8d39-c3b26866c660): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '9143425e-85cc-48ca-8d39-c3b26866c660',
      connection: [Connection],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-02-21T15:19:33.024] [INFO] db - [
  'Executing (a689f079-be61-4963-87cf-0ebb5c2f5cfa): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'a689f079-be61-4963-87cf-0ebb5c2f5cfa',
      connection: [Connection]
    }
  }
]
[2023-02-21T15:19:33.026] [INFO] db - [
  "Executing (a689f079-be61-4963-87cf-0ebb5c2f5cfa): SELECT `id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `password`, `gender`, `avatar`, `mobile`, `email`, `dept_id` AS `deptId`, `org_id` AS `orgId`, `status`, `description`, `last_login_time` AS `lastLoginTime`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_users` AS `system_user` WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = '16');",
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'a689f079-be61-4963-87cf-0ebb5c2f5cfa',
      connection: [Connection]
    },
    where: "(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = '16')",
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  'password',
      'gender', 'avatar',
      'mobile', 'email',
      [Array],  [Array],
      'status', 'description',
      [Array],  [Array],
      [Array]
    ],
    originalAttributes: [
      'userId',        'userName',
      'realName',      'password',
      'gender',        'avatar',
      'mobile',        'email',
      'deptId',        'orgId',
      'status',        'description',
      'lastLoginTime', 'createTime',
      'updateTime'
    ],
    tableNames: [ 'system_users' ],
    type: 'SELECT',
    model: system_user
  }
]
[2023-02-21T15:19:33.028] [INFO] db - [
  'Executing (default): UPDATE `system_users` SET `id`=?,`password`=?,`update_time`=? WHERE (`delete_time` IS NULL AND `id` = ?)',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { [Symbol(and)]: [Array] },
    validate: true,
    hooks: true,
    individualHooks: false,
    returning: false,
    force: false,
    sideEffects: true,
    type: 'BULKUPDATE',
    fields: [ 'userId', 'password', 'update_time' ],
    model: system_user,
    skip: undefined,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [
      '16',
      'e10adc3949ba59abbe56e057f20f883e',
      '2023-02-21 15:19:33',
      '16'
    ]
  }
]
[2023-02-21T15:19:33.035] [INFO] db - [
  'Executing (a689f079-be61-4963-87cf-0ebb5c2f5cfa): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'a689f079-be61-4963-87cf-0ebb5c2f5cfa',
      connection: [Connection],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-02-21T15:19:33.051] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'apifox/1.0.0 (https://www.apifox.cn)',
      '',
      '',
      'PUT',
      '{"userIds":"15,16"}',
      '/api/system/user/password/reset',
      '重置用户密码',
      67,
      '2023-02-21 15:19:33',
      '2023-02-21 15:19:33'
    ]
  }
]
[2023-02-21T15:19:37.259] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:19:37.266] [INFO] db - [
  'Executing (18ee1564-0641-452b-aa1e-86eba64ead0c): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '18ee1564-0641-452b-aa1e-86eba64ead0c',
      connection: [Connection]
    }
  }
]
[2023-02-21T15:19:37.269] [INFO] db - [
  "Executing (18ee1564-0641-452b-aa1e-86eba64ead0c): SELECT `id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `password`, `gender`, `avatar`, `mobile`, `email`, `dept_id` AS `deptId`, `org_id` AS `orgId`, `status`, `description`, `last_login_time` AS `lastLoginTime`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_users` AS `system_user` WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = '15');",
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '18ee1564-0641-452b-aa1e-86eba64ead0c',
      connection: [Connection]
    },
    where: "(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = '15')",
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  'password',
      'gender', 'avatar',
      'mobile', 'email',
      [Array],  [Array],
      'status', 'description',
      [Array],  [Array],
      [Array]
    ],
    originalAttributes: [
      'userId',        'userName',
      'realName',      'password',
      'gender',        'avatar',
      'mobile',        'email',
      'deptId',        'orgId',
      'status',        'description',
      'lastLoginTime', 'createTime',
      'updateTime'
    ],
    tableNames: [ 'system_users' ],
    type: 'SELECT',
    model: system_user
  }
]
[2023-02-21T15:19:37.272] [INFO] db - [
  'Executing (default): UPDATE `system_users` SET `id`=?,`password`=?,`update_time`=? WHERE (`delete_time` IS NULL AND `id` = ?)',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { [Symbol(and)]: [Array] },
    validate: true,
    hooks: true,
    individualHooks: false,
    returning: false,
    force: false,
    sideEffects: true,
    type: 'BULKUPDATE',
    fields: [ 'userId', 'password', 'update_time' ],
    model: system_user,
    skip: undefined,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [
      '15',
      'e10adc3949ba59abbe56e057f20f883e',
      '2023-02-21 15:19:37',
      '15'
    ]
  }
]
[2023-02-21T15:19:37.279] [INFO] db - [
  'Executing (18ee1564-0641-452b-aa1e-86eba64ead0c): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '18ee1564-0641-452b-aa1e-86eba64ead0c',
      connection: [Connection],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-02-21T15:19:37.280] [INFO] db - [
  'Executing (3dee12ef-7145-49ae-bce1-10484d4a3943): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '3dee12ef-7145-49ae-bce1-10484d4a3943',
      connection: [Connection]
    }
  }
]
[2023-02-21T15:19:37.281] [INFO] db - [
  "Executing (3dee12ef-7145-49ae-bce1-10484d4a3943): SELECT `id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `password`, `gender`, `avatar`, `mobile`, `email`, `dept_id` AS `deptId`, `org_id` AS `orgId`, `status`, `description`, `last_login_time` AS `lastLoginTime`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_users` AS `system_user` WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = '16');",
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '3dee12ef-7145-49ae-bce1-10484d4a3943',
      connection: [Connection]
    },
    where: "(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = '16')",
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  'password',
      'gender', 'avatar',
      'mobile', 'email',
      [Array],  [Array],
      'status', 'description',
      [Array],  [Array],
      [Array]
    ],
    originalAttributes: [
      'userId',        'userName',
      'realName',      'password',
      'gender',        'avatar',
      'mobile',        'email',
      'deptId',        'orgId',
      'status',        'description',
      'lastLoginTime', 'createTime',
      'updateTime'
    ],
    tableNames: [ 'system_users' ],
    type: 'SELECT',
    model: system_user
  }
]
[2023-02-21T15:19:37.286] [INFO] db - [
  'Executing (default): UPDATE `system_users` SET `id`=?,`password`=?,`update_time`=? WHERE (`delete_time` IS NULL AND `id` = ?)',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { [Symbol(and)]: [Array] },
    validate: true,
    hooks: true,
    individualHooks: false,
    returning: false,
    force: false,
    sideEffects: true,
    type: 'BULKUPDATE',
    fields: [ 'userId', 'password', 'update_time' ],
    model: system_user,
    skip: undefined,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [
      '16',
      'e10adc3949ba59abbe56e057f20f883e',
      '2023-02-21 15:19:37',
      '16'
    ]
  }
]
[2023-02-21T15:19:37.291] [INFO] db - [
  'Executing (3dee12ef-7145-49ae-bce1-10484d4a3943): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '3dee12ef-7145-49ae-bce1-10484d4a3943',
      connection: [Connection],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-02-21T15:19:37.306] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'apifox/1.0.0 (https://www.apifox.cn)',
      '',
      '',
      'PUT',
      '{"userIds":"15,16"}',
      '/api/system/user/password/reset',
      '重置用户密码',
      49,
      '2023-02-21 15:19:37',
      '2023-02-21 15:19:37'
    ]
  }
]
[2023-02-21T15:19:45.373] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:19:45.382] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T15:19:45.383] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T15:19:46.605] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:19:46.613] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T15:19:46.614] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 20, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 20,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T15:20:23.478] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T15:20:23.479] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:20:23.491] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:20:23.492] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:20:23.494] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:20:23.495] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:20:23.497] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:20:23.498] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:20:23.499] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:20:23.500] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:20:23.502] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:20:23.503] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:20:23.504] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:20:23.505] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:20:23.508] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:20:23.509] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:20:23.510] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:20:31.305] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:20:31.317] [INFO] db - [
  'Executing (141d88bf-6121-42a1-9916-43c758ce4dff): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '141d88bf-6121-42a1-9916-43c758ce4dff',
      connection: [Connection]
    }
  }
]
[2023-02-21T15:20:31.322] [INFO] db - [
  "Executing (141d88bf-6121-42a1-9916-43c758ce4dff): SELECT `id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `password`, `gender`, `avatar`, `mobile`, `email`, `dept_id` AS `deptId`, `org_id` AS `orgId`, `status`, `description`, `last_login_time` AS `lastLoginTime`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_users` AS `system_user` WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = '15');",
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '141d88bf-6121-42a1-9916-43c758ce4dff',
      connection: [Connection]
    },
    where: "(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = '15')",
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  'password',
      'gender', 'avatar',
      'mobile', 'email',
      [Array],  [Array],
      'status', 'description',
      [Array],  [Array],
      [Array]
    ],
    originalAttributes: [
      'userId',        'userName',
      'realName',      'password',
      'gender',        'avatar',
      'mobile',        'email',
      'deptId',        'orgId',
      'status',        'description',
      'lastLoginTime', 'createTime',
      'updateTime'
    ],
    tableNames: [ 'system_users' ],
    type: 'SELECT',
    model: system_user
  }
]
[2023-02-21T15:20:31.329] [INFO] db - [
  'Executing (default): UPDATE `system_users` SET `id`=?,`password`=?,`update_time`=? WHERE (`delete_time` IS NULL AND `id` = ?)',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { [Symbol(and)]: [Array] },
    validate: true,
    hooks: true,
    individualHooks: false,
    returning: false,
    force: false,
    sideEffects: true,
    type: 'BULKUPDATE',
    fields: [ 'userId', 'password', 'update_time' ],
    model: system_user,
    skip: undefined,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [
      '15',
      'e10adc3949ba59abbe56e057f20f883e',
      '2023-02-21 15:20:31',
      '15'
    ]
  }
]
[2023-02-21T15:20:31.338] [INFO] db - [
  'Executing (141d88bf-6121-42a1-9916-43c758ce4dff): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '141d88bf-6121-42a1-9916-43c758ce4dff',
      connection: [Connection],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-02-21T15:20:31.340] [INFO] db - [
  'Executing (1f87808e-d3a3-40c4-a0bb-eaa8479ee581): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '1f87808e-d3a3-40c4-a0bb-eaa8479ee581',
      connection: [Connection]
    }
  }
]
[2023-02-21T15:20:31.341] [INFO] db - [
  "Executing (1f87808e-d3a3-40c4-a0bb-eaa8479ee581): SELECT `id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `password`, `gender`, `avatar`, `mobile`, `email`, `dept_id` AS `deptId`, `org_id` AS `orgId`, `status`, `description`, `last_login_time` AS `lastLoginTime`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_users` AS `system_user` WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = '16');",
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '1f87808e-d3a3-40c4-a0bb-eaa8479ee581',
      connection: [Connection]
    },
    where: "(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = '16')",
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  'password',
      'gender', 'avatar',
      'mobile', 'email',
      [Array],  [Array],
      'status', 'description',
      [Array],  [Array],
      [Array]
    ],
    originalAttributes: [
      'userId',        'userName',
      'realName',      'password',
      'gender',        'avatar',
      'mobile',        'email',
      'deptId',        'orgId',
      'status',        'description',
      'lastLoginTime', 'createTime',
      'updateTime'
    ],
    tableNames: [ 'system_users' ],
    type: 'SELECT',
    model: system_user
  }
]
[2023-02-21T15:20:31.344] [INFO] db - [
  'Executing (default): UPDATE `system_users` SET `id`=?,`password`=?,`update_time`=? WHERE (`delete_time` IS NULL AND `id` = ?)',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { [Symbol(and)]: [Array] },
    validate: true,
    hooks: true,
    individualHooks: false,
    returning: false,
    force: false,
    sideEffects: true,
    type: 'BULKUPDATE',
    fields: [ 'userId', 'password', 'update_time' ],
    model: system_user,
    skip: undefined,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [
      '16',
      'e10adc3949ba59abbe56e057f20f883e',
      '2023-02-21 15:20:31',
      '16'
    ]
  }
]
[2023-02-21T15:20:31.347] [INFO] db - [
  'Executing (1f87808e-d3a3-40c4-a0bb-eaa8479ee581): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '1f87808e-d3a3-40c4-a0bb-eaa8479ee581',
      connection: [Connection],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-02-21T15:20:31.362] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'apifox/1.0.0 (https://www.apifox.cn)',
      '',
      '',
      'PUT',
      '{"userIds":"15,16"}',
      '/api/system/user/password/reset',
      '用户密码重置',
      66,
      '2023-02-21 15:20:31',
      '2023-02-21 15:20:31'
    ]
  }
]
[2023-02-21T15:26:13.582] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:26:13.639] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'apifox/1.0.0 (https://www.apifox.cn)',
      '',
      '',
      'PUT',
      '{"userId":81,"oldPassword":"consequat aute ut laborum Excepteur","newPassword":"fugiat"}',
      '/api/system/user/password/update',
      66,
      '2023-02-21 15:26:13',
      '2023-02-21 15:26:13'
    ]
  }
]
[2023-02-21T15:26:41.092] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T15:26:41.093] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:26:41.106] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:26:41.107] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:26:41.108] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:26:41.110] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:26:41.112] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:26:41.113] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:26:41.115] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:26:41.116] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:26:41.118] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:26:41.120] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:26:41.121] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:26:41.122] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:26:41.124] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:26:41.125] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:26:41.126] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:26:41.821] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:26:41.836] [INFO] db - [
  'Executing (default): SELECT `id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `password`, `gender`, `avatar`, `mobile`, `email`, `dept_id` AS `deptId`, `org_id` AS `orgId`, `status`, `description`, `last_login_time` AS `lastLoginTime`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_users` AS `system_user` WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 81);',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 81)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  'password',
      'gender', 'avatar',
      'mobile', 'email',
      [Array],  [Array],
      'status', 'description',
      [Array],  [Array],
      [Array]
    ],
    originalAttributes: [
      'userId',        'userName',
      'realName',      'password',
      'gender',        'avatar',
      'mobile',        'email',
      'deptId',        'orgId',
      'status',        'description',
      'lastLoginTime', 'createTime',
      'updateTime'
    ],
    tableNames: [ 'system_users' ],
    type: 'SELECT',
    model: system_user
  }
]
[2023-02-21T15:26:41.867] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'apifox/1.0.0 (https://www.apifox.cn)',
      '',
      '',
      'PUT',
      '{"userId":81,"oldPassword":"consequat aute ut laborum Excepteur","newPassword":"fugiat"}',
      '/api/system/user/password/update',
      50,
      '2023-02-21 15:26:41',
      '2023-02-21 15:26:41'
    ]
  }
]
[2023-02-21T15:27:02.901] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T15:27:02.903] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:27:02.916] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:27:02.917] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:27:02.919] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:27:02.920] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:27:02.921] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:27:02.924] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:27:02.925] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:27:02.926] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:27:02.927] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:27:02.928] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:27:02.929] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:27:02.930] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:27:02.932] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:27:02.933] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:27:02.933] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:27:04.105] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:27:04.116] [INFO] db - [
  'Executing (default): SELECT `id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `password`, `gender`, `avatar`, `mobile`, `email`, `dept_id` AS `deptId`, `org_id` AS `orgId`, `status`, `description`, `last_login_time` AS `lastLoginTime`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_users` AS `system_user` WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 81);',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 81)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  'password',
      'gender', 'avatar',
      'mobile', 'email',
      [Array],  [Array],
      'status', 'description',
      [Array],  [Array],
      [Array]
    ],
    originalAttributes: [
      'userId',        'userName',
      'realName',      'password',
      'gender',        'avatar',
      'mobile',        'email',
      'deptId',        'orgId',
      'status',        'description',
      'lastLoginTime', 'createTime',
      'updateTime'
    ],
    tableNames: [ 'system_users' ],
    type: 'SELECT',
    model: system_user
  }
]
[2023-02-21T15:27:04.146] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'apifox/1.0.0 (https://www.apifox.cn)',
      '',
      '',
      'PUT',
      '{"userId":81,"oldPassword":"consequat aute ut laborum Excepteur","newPassword":"fugiat"}',
      '/api/system/user/password/update',
      46,
      '2023-02-21 15:27:04',
      '2023-02-21 15:27:04'
    ]
  }
]
[2023-02-21T15:27:06.886] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:27:06.894] [INFO] db - [
  'Executing (default): SELECT `id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `password`, `gender`, `avatar`, `mobile`, `email`, `dept_id` AS `deptId`, `org_id` AS `orgId`, `status`, `description`, `last_login_time` AS `lastLoginTime`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_users` AS `system_user` WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 81);',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 81)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  'password',
      'gender', 'avatar',
      'mobile', 'email',
      [Array],  [Array],
      'status', 'description',
      [Array],  [Array],
      [Array]
    ],
    originalAttributes: [
      'userId',        'userName',
      'realName',      'password',
      'gender',        'avatar',
      'mobile',        'email',
      'deptId',        'orgId',
      'status',        'description',
      'lastLoginTime', 'createTime',
      'updateTime'
    ],
    tableNames: [ 'system_users' ],
    type: 'SELECT',
    model: system_user
  }
]
[2023-02-21T15:27:06.915] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'apifox/1.0.0 (https://www.apifox.cn)',
      '',
      '',
      'PUT',
      '{"userId":81,"oldPassword":"consequat aute ut laborum Excepteur","newPassword":"fugiat"}',
      '/api/system/user/password/update',
      32,
      '2023-02-21 15:27:06',
      '2023-02-21 15:27:06'
    ]
  }
]
[2023-02-21T15:27:59.006] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T15:27:59.007] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:27:59.020] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:27:59.022] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:27:59.023] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:27:59.024] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:27:59.026] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:27:59.027] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:27:59.029] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:27:59.030] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:27:59.031] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:27:59.033] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:27:59.034] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:27:59.034] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:27:59.036] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:27:59.037] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:27:59.038] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:28:43.507] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:28:43.518] [INFO] db - [
  'Executing (default): SELECT `id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `password`, `gender`, `avatar`, `mobile`, `email`, `dept_id` AS `deptId`, `org_id` AS `orgId`, `status`, `description`, `last_login_time` AS `lastLoginTime`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_users` AS `system_user` WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 81);',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 81)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  'password',
      'gender', 'avatar',
      'mobile', 'email',
      [Array],  [Array],
      'status', 'description',
      [Array],  [Array],
      [Array]
    ],
    originalAttributes: [
      'userId',        'userName',
      'realName',      'password',
      'gender',        'avatar',
      'mobile',        'email',
      'deptId',        'orgId',
      'status',        'description',
      'lastLoginTime', 'createTime',
      'updateTime'
    ],
    tableNames: [ 'system_users' ],
    type: 'SELECT',
    model: system_user
  }
]
[2023-02-21T15:28:43.563] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'apifox/1.0.0 (https://www.apifox.cn)',
      '',
      '',
      'PUT',
      '{"userId":81,"oldPassword":"consequat aute ut laborum Excepteur","newPassword":"fugiat"}',
      '/api/system/user/password/update',
      66,
      '2023-02-21 15:28:43',
      '2023-02-21 15:28:43'
    ]
  }
]
[2023-02-21T15:29:09.681] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T15:29:09.682] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:29:09.695] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:29:09.696] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:29:09.697] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:29:09.699] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:29:09.700] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:29:09.702] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:29:09.703] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:29:09.704] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:29:09.705] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:29:09.706] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:29:09.708] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:29:09.710] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:29:09.712] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:29:09.713] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:29:09.715] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:29:18.304] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T15:29:18.305] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:29:18.318] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:29:18.319] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:29:18.320] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:29:18.322] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:29:18.324] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:29:18.325] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:29:18.326] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:29:18.327] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:29:18.328] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:29:18.330] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:29:18.331] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:29:18.332] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:29:18.334] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:29:18.335] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:29:18.336] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:29:33.725] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:29:33.737] [INFO] db - [
  'Executing (default): SELECT `id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `password`, `gender`, `avatar`, `mobile`, `email`, `dept_id` AS `deptId`, `org_id` AS `orgId`, `status`, `description`, `last_login_time` AS `lastLoginTime`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_users` AS `system_user` WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 81);',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 81)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  'password',
      'gender', 'avatar',
      'mobile', 'email',
      [Array],  [Array],
      'status', 'description',
      [Array],  [Array],
      [Array]
    ],
    originalAttributes: [
      'userId',        'userName',
      'realName',      'password',
      'gender',        'avatar',
      'mobile',        'email',
      'deptId',        'orgId',
      'status',        'description',
      'lastLoginTime', 'createTime',
      'updateTime'
    ],
    tableNames: [ 'system_users' ],
    type: 'SELECT',
    model: system_user
  }
]
[2023-02-21T15:29:33.766] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'apifox/1.0.0 (https://www.apifox.cn)',
      '',
      '',
      'PUT',
      '{"userId":81,"oldPassword":"consequat aute ut laborum Excepteur","newPassword":"fugiat"}',
      '/api/system/user/password/update',
      48,
      '2023-02-21 15:29:33',
      '2023-02-21 15:29:33'
    ]
  }
]
[2023-02-21T15:30:13.100] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T15:30:13.102] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:30:13.117] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:30:13.119] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:30:13.120] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:30:13.122] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:30:13.123] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:30:13.124] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:30:13.125] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:30:13.126] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:30:13.127] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:30:13.129] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:30:13.130] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:30:13.131] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:30:13.133] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:30:13.134] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:30:13.135] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:30:16.666] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:30:16.677] [INFO] db - [
  'Executing (default): SELECT `id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `password`, `gender`, `avatar`, `mobile`, `email`, `dept_id` AS `deptId`, `org_id` AS `orgId`, `status`, `description`, `last_login_time` AS `lastLoginTime`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_users` AS `system_user` WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 81);',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 81)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  'password',
      'gender', 'avatar',
      'mobile', 'email',
      [Array],  [Array],
      'status', 'description',
      [Array],  [Array],
      [Array]
    ],
    originalAttributes: [
      'userId',        'userName',
      'realName',      'password',
      'gender',        'avatar',
      'mobile',        'email',
      'deptId',        'orgId',
      'status',        'description',
      'lastLoginTime', 'createTime',
      'updateTime'
    ],
    tableNames: [ 'system_users' ],
    type: 'SELECT',
    model: system_user
  }
]
[2023-02-21T15:30:16.696] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'apifox/1.0.0 (https://www.apifox.cn)',
      '',
      '',
      'PUT',
      '{"userId":81,"oldPassword":"consequat aute ut laborum Excepteur","newPassword":"fugiat"}',
      '/api/system/user/password/update',
      34,
      '2023-02-21 15:30:16',
      '2023-02-21 15:30:16'
    ]
  }
]
[2023-02-21T15:30:23.124] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:30:23.130] [INFO] db - [
  'Executing (default): SELECT `id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `password`, `gender`, `avatar`, `mobile`, `email`, `dept_id` AS `deptId`, `org_id` AS `orgId`, `status`, `description`, `last_login_time` AS `lastLoginTime`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_users` AS `system_user` WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 15);',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 15)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  'password',
      'gender', 'avatar',
      'mobile', 'email',
      [Array],  [Array],
      'status', 'description',
      [Array],  [Array],
      [Array]
    ],
    originalAttributes: [
      'userId',        'userName',
      'realName',      'password',
      'gender',        'avatar',
      'mobile',        'email',
      'deptId',        'orgId',
      'status',        'description',
      'lastLoginTime', 'createTime',
      'updateTime'
    ],
    tableNames: [ 'system_users' ],
    type: 'SELECT',
    model: system_user
  }
]
[2023-02-21T15:30:23.148] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'apifox/1.0.0 (https://www.apifox.cn)',
      '',
      '',
      'PUT',
      '{"userId":15,"oldPassword":"consequat aute ut laborum Excepteur","newPassword":"fugiat"}',
      '/api/system/user/password/update',
      29,
      '2023-02-21 15:30:23',
      '2023-02-21 15:30:23'
    ]
  }
]
[2023-02-21T15:30:34.190] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:30:34.196] [INFO] db - [
  'Executing (default): SELECT `id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `password`, `gender`, `avatar`, `mobile`, `email`, `dept_id` AS `deptId`, `org_id` AS `orgId`, `status`, `description`, `last_login_time` AS `lastLoginTime`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_users` AS `system_user` WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 15);',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 15)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  'password',
      'gender', 'avatar',
      'mobile', 'email',
      [Array],  [Array],
      'status', 'description',
      [Array],  [Array],
      [Array]
    ],
    originalAttributes: [
      'userId',        'userName',
      'realName',      'password',
      'gender',        'avatar',
      'mobile',        'email',
      'deptId',        'orgId',
      'status',        'description',
      'lastLoginTime', 'createTime',
      'updateTime'
    ],
    tableNames: [ 'system_users' ],
    type: 'SELECT',
    model: system_user
  }
]
[2023-02-21T15:30:34.201] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'apifox/1.0.0 (https://www.apifox.cn)',
      '',
      '',
      'PUT',
      '{"userId":15,"oldPassword":"123456","newPassword":"fugiat"}',
      '/api/system/user/password/update',
      13,
      '2023-02-21 15:30:34',
      '2023-02-21 15:30:34'
    ]
  }
]
[2023-02-21T15:31:14.756] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T15:31:14.758] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:31:14.775] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:31:14.776] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:31:14.778] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:31:14.780] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:31:14.783] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:31:14.785] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:31:14.787] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:31:14.789] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:31:14.791] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:31:14.792] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:31:14.794] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:31:14.795] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:31:14.797] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:31:14.799] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:31:14.800] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:31:16.317] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:31:16.328] [INFO] db - [
  'Executing (default): SELECT `id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `password`, `gender`, `avatar`, `mobile`, `email`, `dept_id` AS `deptId`, `org_id` AS `orgId`, `status`, `description`, `last_login_time` AS `lastLoginTime`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_users` AS `system_user` WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 15);',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 15)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  'password',
      'gender', 'avatar',
      'mobile', 'email',
      [Array],  [Array],
      'status', 'description',
      [Array],  [Array],
      [Array]
    ],
    originalAttributes: [
      'userId',        'userName',
      'realName',      'password',
      'gender',        'avatar',
      'mobile',        'email',
      'deptId',        'orgId',
      'status',        'description',
      'lastLoginTime', 'createTime',
      'updateTime'
    ],
    tableNames: [ 'system_users' ],
    type: 'SELECT',
    model: system_user
  }
]
[2023-02-21T15:31:16.335] [INFO] db - [
  'Executing (17994381-d83e-4aa4-bb5b-2eb4aa948e1d): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '17994381-d83e-4aa4-bb5b-2eb4aa948e1d',
      connection: [Connection]
    }
  }
]
[2023-02-21T15:31:16.339] [INFO] db - [
  'Executing (17994381-d83e-4aa4-bb5b-2eb4aa948e1d): SELECT `id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `password`, `gender`, `avatar`, `mobile`, `email`, `dept_id` AS `deptId`, `org_id` AS `orgId`, `status`, `description`, `last_login_time` AS `lastLoginTime`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_users` AS `system_user` WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 15);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '17994381-d83e-4aa4-bb5b-2eb4aa948e1d',
      connection: [Connection]
    },
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 15)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  'password',
      'gender', 'avatar',
      'mobile', 'email',
      [Array],  [Array],
      'status', 'description',
      [Array],  [Array],
      [Array]
    ],
    originalAttributes: [
      'userId',        'userName',
      'realName',      'password',
      'gender',        'avatar',
      'mobile',        'email',
      'deptId',        'orgId',
      'status',        'description',
      'lastLoginTime', 'createTime',
      'updateTime'
    ],
    tableNames: [ 'system_users' ],
    type: 'SELECT',
    model: system_user
  }
]
[2023-02-21T15:31:16.348] [INFO] db - [
  'Executing (default): UPDATE `system_users` SET `id`=?,`password`=?,`update_time`=? WHERE (`delete_time` IS NULL AND `id` = ?)',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { [Symbol(and)]: [Array] },
    validate: true,
    hooks: true,
    individualHooks: false,
    returning: false,
    force: false,
    sideEffects: true,
    type: 'BULKUPDATE',
    fields: [ 'userId', 'password', 'update_time' ],
    model: system_user,
    skip: undefined,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [
      15,
      '8cbec81ea01f562f9ce3485846a5330f',
      '2023-02-21 15:31:16',
      15
    ]
  }
]
[2023-02-21T15:31:16.357] [INFO] db - [
  'Executing (17994381-d83e-4aa4-bb5b-2eb4aa948e1d): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '17994381-d83e-4aa4-bb5b-2eb4aa948e1d',
      connection: [Connection],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-02-21T15:31:16.374] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'apifox/1.0.0 (https://www.apifox.cn)',
      '',
      '',
      'PUT',
      '{"userId":15,"oldPassword":"123456","newPassword":"fugiat"}',
      '/api/system/user/password/update',
      '用户密码修改',
      66,
      '2023-02-21 15:31:16',
      '2023-02-21 15:31:16'
    ]
  }
]
[2023-02-21T15:31:34.961] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:31:34.968] [INFO] db - [
  'Executing (default): SELECT `id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `password`, `gender`, `avatar`, `mobile`, `email`, `dept_id` AS `deptId`, `org_id` AS `orgId`, `status`, `description`, `last_login_time` AS `lastLoginTime`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_users` AS `system_user` WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 15);',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 15)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  'password',
      'gender', 'avatar',
      'mobile', 'email',
      [Array],  [Array],
      'status', 'description',
      [Array],  [Array],
      [Array]
    ],
    originalAttributes: [
      'userId',        'userName',
      'realName',      'password',
      'gender',        'avatar',
      'mobile',        'email',
      'deptId',        'orgId',
      'status',        'description',
      'lastLoginTime', 'createTime',
      'updateTime'
    ],
    tableNames: [ 'system_users' ],
    type: 'SELECT',
    model: system_user
  }
]
[2023-02-21T15:31:34.972] [INFO] db - [
  'Executing (b0c32e80-8159-44f2-866b-5bf3818ac524): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'b0c32e80-8159-44f2-866b-5bf3818ac524',
      connection: [Connection]
    }
  }
]
[2023-02-21T15:31:34.974] [INFO] db - [
  'Executing (b0c32e80-8159-44f2-866b-5bf3818ac524): SELECT `id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `password`, `gender`, `avatar`, `mobile`, `email`, `dept_id` AS `deptId`, `org_id` AS `orgId`, `status`, `description`, `last_login_time` AS `lastLoginTime`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_users` AS `system_user` WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 15);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'b0c32e80-8159-44f2-866b-5bf3818ac524',
      connection: [Connection]
    },
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 15)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  'password',
      'gender', 'avatar',
      'mobile', 'email',
      [Array],  [Array],
      'status', 'description',
      [Array],  [Array],
      [Array]
    ],
    originalAttributes: [
      'userId',        'userName',
      'realName',      'password',
      'gender',        'avatar',
      'mobile',        'email',
      'deptId',        'orgId',
      'status',        'description',
      'lastLoginTime', 'createTime',
      'updateTime'
    ],
    tableNames: [ 'system_users' ],
    type: 'SELECT',
    model: system_user
  }
]
[2023-02-21T15:31:34.977] [INFO] db - [
  'Executing (default): UPDATE `system_users` SET `id`=?,`password`=?,`update_time`=? WHERE (`delete_time` IS NULL AND `id` = ?)',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { [Symbol(and)]: [Array] },
    validate: true,
    hooks: true,
    individualHooks: false,
    returning: false,
    force: false,
    sideEffects: true,
    type: 'BULKUPDATE',
    fields: [ 'userId', 'password', 'update_time' ],
    model: system_user,
    skip: undefined,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [
      15,
      '202cb962ac59075b964b07152d234b70',
      '2023-02-21 15:31:34',
      15
    ]
  }
]
[2023-02-21T15:31:34.987] [INFO] db - [
  'Executing (b0c32e80-8159-44f2-866b-5bf3818ac524): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'b0c32e80-8159-44f2-866b-5bf3818ac524',
      connection: [Connection],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-02-21T15:31:35.013] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'apifox/1.0.0 (https://www.apifox.cn)',
      '',
      '',
      'PUT',
      '{"userId":15,"oldPassword":"fugiat","newPassword":"123"}',
      '/api/system/user/password/update',
      '用户密码修改',
      55,
      '2023-02-21 15:31:35',
      '2023-02-21 15:31:35'
    ]
  }
]
[2023-02-21T15:31:42.538] [INFO] db - [
  'Executing (default): SELECT `id` AS `deptId`, `dept_name` AS `deptName`, `parent_id` AS `parentId`, `order_num` AS `orderNum`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_depts` AS `system_dept` WHERE (`system_dept`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
    originalAttributes: [
      'deptId',
      'deptName',
      'parentId',
      'orderNum',
      'createTime',
      'updateTime'
    ],
    where: '(`system_dept`.`delete_time` IS NULL)',
    tableNames: [ 'system_depts' ],
    type: 'SELECT',
    model: system_dept
  }
]
[2023-02-21T15:31:42.540] [INFO] db - [
  'Executing (default): SELECT `id` AS `roleId`, `role_name` AS `roleName`, `remark`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_roles` AS `system_role` WHERE (`system_role`.`delete_time` IS NULL);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [ [Array], [Array], 'remark', [Array], [Array] ],
    originalAttributes: [ 'roleId', 'roleName', 'remark', 'createTime', 'updateTime' ],
    where: '(`system_role`.`delete_time` IS NULL)',
    tableNames: [ 'system_roles' ],
    type: 'SELECT',
    model: system_role
  }
]
[2023-02-21T15:31:42.547] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:31:42.561] [INFO] db - [
  "Executing (default): SELECT count(DISTINCT(`system_user`.`id`)) AS `count` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND (`system_user`.`user_name` LIKE '%%' AND `system_user`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`system_user`.`delete_time` IS NULL AND (`system_user`.`user_name` LIKE '%%' AND `system_user`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    attributes: [ [Array] ],
    include: [ [Object] ],
    distinct: true,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: null,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:31:42.562] [INFO] db - [
  "Executing (default): SELECT `system_user`.*, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName` FROM (SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime` FROM `system_users` AS `system_user` WHERE (`system_user`.`delete_time` IS NULL AND (`system_user`.`user_name` LIKE '%%' AND `system_user`.`real_name` LIKE '%%')) LIMIT 0, 10) AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`userId` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL);",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`system_user`.`delete_time` IS NULL AND (`system_user`.`user_name` LIKE '%%' AND `system_user`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    include: [ [Object] ],
    distinct: true,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: 10,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    subQuery: true,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:31:43.621] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:31:43.629] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T15:31:43.630] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T15:31:45.151] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:31:45.158] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T15:31:45.159] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 20, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 20,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T15:32:03.884] [INFO] db - [
  "Executing (default): SELECT `id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `password`, `gender`, `avatar`, `mobile`, `email`, `dept_id` AS `deptId`, `org_id` AS `orgId`, `status`, `description`, `last_login_time` AS `lastLoginTime`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_users` AS `system_user` WHERE (`system_user`.`delete_time` IS NULL AND (`system_user`.`password` = '202cb962ac59075b964b07152d234b70' AND `system_user`.`user_name` = 'admin')) LIMIT 1;",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`system_user`.`delete_time` IS NULL AND (`system_user`.`password` = '202cb962ac59075b964b07152d234b70' AND `system_user`.`user_name` = 'admin'))",
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  'password',
      'gender', 'avatar',
      'mobile', 'email',
      [Array],  [Array],
      'status', 'description',
      [Array],  [Array],
      [Array]
    ],
    originalAttributes: [
      'userId',        'userName',
      'realName',      'password',
      'gender',        'avatar',
      'mobile',        'email',
      'deptId',        'orgId',
      'status',        'description',
      'lastLoginTime', 'createTime',
      'updateTime'
    ],
    tableNames: [ 'system_users' ],
    type: 'SELECT',
    model: system_user
  }
]
[2023-02-21T15:32:03.888] [INFO] db - [
  'Executing (default): INSERT INTO `log_logins` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`msg`,`status`,`last_login_time`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'msg',
      'status',      'lastLoginTime',
      'loginTime',   'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'msg',
      'status',      'lastLoginTime',
      'loginTime',   'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_login {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_login,
    bind: [
      15,
      'admin',
      'admin',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      '登陆成功',
      1,
      null,
      '2023-02-21 15:32:03',
      '2023-02-21 15:32:03'
    ]
  }
]
[2023-02-21T15:32:03.894] [INFO] db - [
  'Executing (6dfb6c94-650c-4c5a-b892-0d6955797354): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '6dfb6c94-650c-4c5a-b892-0d6955797354',
      connection: [Connection]
    }
  }
]
[2023-02-21T15:32:03.896] [INFO] db - [
  'Executing (6dfb6c94-650c-4c5a-b892-0d6955797354): SELECT `id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `password`, `gender`, `avatar`, `mobile`, `email`, `dept_id` AS `deptId`, `org_id` AS `orgId`, `status`, `description`, `last_login_time` AS `lastLoginTime`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_users` AS `system_user` WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 15);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '6dfb6c94-650c-4c5a-b892-0d6955797354',
      connection: [Connection]
    },
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 15)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  'password',
      'gender', 'avatar',
      'mobile', 'email',
      [Array],  [Array],
      'status', 'description',
      [Array],  [Array],
      [Array]
    ],
    originalAttributes: [
      'userId',        'userName',
      'realName',      'password',
      'gender',        'avatar',
      'mobile',        'email',
      'deptId',        'orgId',
      'status',        'description',
      'lastLoginTime', 'createTime',
      'updateTime'
    ],
    tableNames: [ 'system_users' ],
    type: 'SELECT',
    model: system_user
  }
]
[2023-02-21T15:32:03.900] [INFO] db - [
  'Executing (default): UPDATE `system_users` SET `id`=?,`last_login_time`=?,`update_time`=? WHERE (`delete_time` IS NULL AND `id` = ?)',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { [Symbol(and)]: [Array] },
    validate: true,
    hooks: true,
    individualHooks: false,
    returning: false,
    force: false,
    sideEffects: true,
    type: 'BULKUPDATE',
    fields: [ 'userId', 'lastLoginTime', 'update_time' ],
    model: system_user,
    skip: undefined,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [ 15, '2023-02-21 15:32:03', '2023-02-21 15:32:03', 15 ]
  }
]
[2023-02-21T15:32:03.905] [INFO] db - [
  'Executing (6dfb6c94-650c-4c5a-b892-0d6955797354): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '6dfb6c94-650c-4c5a-b892-0d6955797354',
      connection: [Connection],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-02-21T15:32:03.926] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 15);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 15)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:32:03.939] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 15);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 15)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:32:09.317] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 15);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 15)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:32:09.323] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T15:32:09.325] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 0, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 0,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T15:32:11.786] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 15);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 15)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:32:11.795] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T15:32:11.796] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 20, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 20,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T15:32:17.859] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 15);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 15)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:32:17.867] [INFO] db - [
  "Executing (default): UPDATE `log_operations` SET `delete_time`=? WHERE `delete_time` IS NULL AND `id` IN ('90')",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { id: [Array] },
    attributes: { exclude: [Array] },
    hooks: true,
    individualHooks: false,
    force: false,
    cascade: false,
    restartIdentity: false,
    type: 'BULKUPDATE',
    model: log_operation,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [ '2023-02-21 15:32:17' ]
  }
]
[2023-02-21T15:32:17.878] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      15,
      'admin',
      'admin',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      'Chrome110.0.0.0',
      'Windows10',
      'DELETE',
      '{"ids":"90"}',
      '/api/log/operation/delete/90',
      '操作日志删除',
      20,
      '2023-02-21 15:32:17',
      '2023-02-21 15:32:17'
    ]
  }
]
[2023-02-21T15:32:17.914] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 15);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 15)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:32:17.919] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T15:32:17.920] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 20, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 20,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T15:32:33.148] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 1)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:32:33.152] [INFO] db - [
  'Executing (default): SELECT `id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `password`, `gender`, `avatar`, `mobile`, `email`, `dept_id` AS `deptId`, `org_id` AS `orgId`, `status`, `description`, `last_login_time` AS `lastLoginTime`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_users` AS `system_user` WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 15);',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 15)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  'password',
      'gender', 'avatar',
      'mobile', 'email',
      [Array],  [Array],
      'status', 'description',
      [Array],  [Array],
      [Array]
    ],
    originalAttributes: [
      'userId',        'userName',
      'realName',      'password',
      'gender',        'avatar',
      'mobile',        'email',
      'deptId',        'orgId',
      'status',        'description',
      'lastLoginTime', 'createTime',
      'updateTime'
    ],
    tableNames: [ 'system_users' ],
    type: 'SELECT',
    model: system_user
  }
]
[2023-02-21T15:32:33.156] [INFO] db - [
  'Executing (aba0bf12-8e30-4ec1-a0a8-8aa988b9bdf7): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'aba0bf12-8e30-4ec1-a0a8-8aa988b9bdf7',
      connection: [Connection]
    }
  }
]
[2023-02-21T15:32:33.158] [INFO] db - [
  'Executing (aba0bf12-8e30-4ec1-a0a8-8aa988b9bdf7): SELECT `id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `password`, `gender`, `avatar`, `mobile`, `email`, `dept_id` AS `deptId`, `org_id` AS `orgId`, `status`, `description`, `last_login_time` AS `lastLoginTime`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `system_users` AS `system_user` WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 15);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'aba0bf12-8e30-4ec1-a0a8-8aa988b9bdf7',
      connection: [Connection]
    },
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 15)',
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],  [Array],
      [Array],  'password',
      'gender', 'avatar',
      'mobile', 'email',
      [Array],  [Array],
      'status', 'description',
      [Array],  [Array],
      [Array]
    ],
    originalAttributes: [
      'userId',        'userName',
      'realName',      'password',
      'gender',        'avatar',
      'mobile',        'email',
      'deptId',        'orgId',
      'status',        'description',
      'lastLoginTime', 'createTime',
      'updateTime'
    ],
    tableNames: [ 'system_users' ],
    type: 'SELECT',
    model: system_user
  }
]
[2023-02-21T15:32:33.161] [INFO] db - [
  'Executing (default): UPDATE `system_users` SET `id`=?,`password`=?,`update_time`=? WHERE (`delete_time` IS NULL AND `id` = ?)',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { [Symbol(and)]: [Array] },
    validate: true,
    hooks: true,
    individualHooks: false,
    returning: false,
    force: false,
    sideEffects: true,
    type: 'BULKUPDATE',
    fields: [ 'userId', 'password', 'update_time' ],
    model: system_user,
    skip: undefined,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    allowNull: [],
    bind: [
      15,
      '21232f297a57a5a743894a0e4a801fc3',
      '2023-02-21 15:32:33',
      15
    ]
  }
]
[2023-02-21T15:32:33.167] [INFO] db - [
  'Executing (aba0bf12-8e30-4ec1-a0a8-8aa988b9bdf7): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'aba0bf12-8e30-4ec1-a0a8-8aa988b9bdf7',
      connection: [Connection],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-02-21T15:32:33.169] [INFO] db - [
  'Executing (default): INSERT INTO `log_operations` (`id`,`user_id`,`user_name`,`real_name`,`ua`,`browser`,`os`,`method`,`params`,`url`,`describe`,`duration`,`create_time`,`update_time`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?);',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    hooks: true,
    validate: true,
    fields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    defaultFields: [
      'logId',       'userId',
      'userName',    'realName',
      'ip',          'location',
      'ua',          'browser',
      'os',          'method',
      'params',      'url',
      'describe',    'duration',
      'createTime',  'updateTime',
      'create_time', 'update_time',
      'delete_time'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: 'localhost',
    protocol: 'tcp',
    define: {
      charset: 'utf8',
      dialectOptions: [Object],
      timestamps: true,
      paranoid: true,
      createdAt: 'create_time',
      updatedAt: 'update_time',
      deletedAt: 'delete_time',
      underscored: true,
      scopes: [Object]
    },
    query: {},
    sync: {},
    timezone: '+08:00',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: { max: 5, min: 0, idle: 30000 },
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '8.0.29',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    operatorAliases: false,
    dialectOptions: { dateStrings: true, typeCast: true },
    models: [
      'D:\\Job\\YHKJ\\me\\code\\node-koa2-mysql-server\\,model\\**\\*.js'
    ],
    type: 'INSERT',
    instance: log_operation {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: log_operation,
    bind: [
      1,
      'xunxiao',
      '荀潇1',
      'apifox/1.0.0 (https://www.apifox.cn)',
      '',
      '',
      'PUT',
      '{"userId":15,"oldPassword":"123","newPassword":"admin"}',
      '/api/system/user/password/update',
      '用户密码修改',
      23,
      '2023-02-21 15:32:33',
      '2023-02-21 15:32:33'
    ]
  }
]
[2023-02-21T15:32:36.249] [INFO] db - [
  'Executing (default): SELECT `system_user`.`id` AS `userId`, `system_user`.`user_name` AS `userName`, `system_user`.`real_name` AS `realName`, `system_user`.`gender`, `system_user`.`avatar`, `system_user`.`mobile`, `system_user`.`email`, `system_user`.`dept_id` AS `deptId`, `system_user`.`org_id` AS `orgId`, `system_user`.`status`, `system_user`.`description`, `system_user`.`last_login_time` AS `lastLoginTime`, `system_user`.`create_time` AS `createTime`, `system_user`.`update_time` AS `updateTime`, `system_roles`.`id` AS `system_roles.roleId`, `system_roles`.`id` AS `system_roles.id`, `system_roles`.`role_name` AS `system_roles.roleName`, `system_roles->system_menus`.`id` AS `system_roles.system_menus.menuId`, `system_roles->system_menus`.`menu_name` AS `system_roles.system_menus.menuName`, `system_roles->system_menus`.`parent_id` AS `system_roles.system_menus.parentId`, `system_roles->system_menus`.`path` AS `system_roles.system_menus.path`, `system_roles->system_menus`.`component` AS `system_roles.system_menus.component`, `system_roles->system_menus`.`perms` AS `system_roles.system_menus.perms`, `system_roles->system_menus`.`order_num` AS `system_roles.system_menus.orderNum`, `system_roles->system_menus`.`icon` AS `system_roles.system_menus.icon`, `system_roles->system_menus`.`type` AS `system_roles.system_menus.type` FROM `system_users` AS `system_user` LEFT OUTER JOIN ( `system_user_roles` AS `system_roles->system_user_role` INNER JOIN `system_roles` AS `system_roles` ON `system_roles`.`id` = `system_roles->system_user_role`.`role_id` AND (`system_roles->system_user_role`.`delete_time` IS NULL)) ON `system_user`.`id` = `system_roles->system_user_role`.`user_id` AND (`system_roles`.`delete_time` IS NULL) LEFT OUTER JOIN ( `system_role_menus` AS `system_roles->system_menus->system_role_menu` INNER JOIN `system_menus` AS `system_roles->system_menus` ON `system_roles->system_menus`.`id` = `system_roles->system_menus->system_role_menu`.`menu_id` AND (`system_roles->system_menus->system_role_menu`.`delete_time` IS NULL)) ON `system_roles`.`id` = `system_roles->system_menus->system_role_menu`.`role_id` AND (`system_roles->system_menus`.`delete_time` IS NULL) WHERE (`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 15);',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    include: [ [Object] ],
    attributes: [
      [Array],       [Array],
      [Array],       'gender',
      'avatar',      'mobile',
      'email',       [Array],
      [Array],       'status',
      'description', [Array],
      [Array],       [Array]
    ],
    where: '(`system_user`.`delete_time` IS NULL AND `system_user`.`id` = 15)',
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'userId',      'userName',
      'realName',    'gender',
      'avatar',      'mobile',
      'email',       'deptId',
      'orgId',       'status',
      'description', 'lastLoginTime',
      'createTime',  'updateTime'
    ],
    hasJoin: true,
    model: system_user,
    includeNames: [ 'system_roles' ],
    includeMap: { system_roles: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: true,
    topModel: system_user,
    topLimit: undefined,
    hasDuplicating: true,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    tableNames: [
      'system_users',
      'system_roles',
      'undefined',
      'system_menus',
      'system_role_menus',
      'system_user_roles'
    ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-02-21T15:32:36.255] [INFO] db - [
  "Executing (default): SELECT count(*) AS `count` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'));",
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: null,
    offset: null,
    hooks: true,
    dataType: INTEGER {
      options: {},
      _length: undefined,
      _zerofill: undefined,
      _decimals: undefined,
      _precision: undefined,
      _scale: undefined,
      _unsigned: undefined
    },
    includeIgnoreAttributes: false,
    order: null,
    attributes: [ [Array] ],
    type: 'SELECT'
  }
]
[2023-02-21T15:32:36.256] [INFO] db - [
  "Executing (default): SELECT `id` AS `logId`, `user_id` AS `userId`, `user_name` AS `userName`, `real_name` AS `realName`, `ip`, `location`, `ua`, `browser`, `os`, `method`, `params`, `url`, `describe`, `duration`, `create_time` AS `createTime`, `update_time` AS `updateTime` FROM `log_operations` AS `log_operation` WHERE (`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%')) LIMIT 20, 10;",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "(`log_operation`.`delete_time` IS NULL AND (`log_operation`.`describe` LIKE '%%' AND `log_operation`.`user_name` LIKE '%%' AND `log_operation`.`real_name` LIKE '%%'))",
    limit: 10,
    offset: 20,
    hooks: true,
    rejectOnEmpty: false,
    attributes: [
      [Array],    [Array],
      [Array],    [Array],
      'ip',       'location',
      'ua',       'browser',
      'os',       'method',
      'params',   'url',
      'describe', 'duration',
      [Array],    [Array]
    ],
    originalAttributes: [
      'logId',      'userId',
      'userName',   'realName',
      'ip',         'location',
      'ua',         'browser',
      'os',         'method',
      'params',     'url',
      'describe',   'duration',
      'createTime', 'updateTime'
    ],
    tableNames: [ 'log_operations' ],
    type: 'SELECT',
    model: log_operation
  }
]
[2023-02-21T15:34:24.569] [INFO] db - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    type: 'SELECT'
  }
]
[2023-02-21T15:34:24.572] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_logins' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:34:24.586] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'log_operations' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:34:24.587] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_users' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:34:24.589] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:34:24.590] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:34:24.591] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_depts' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:34:24.592] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_user_roles' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:34:24.593] [INFO] db - [
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'system_role_menus' AND TABLE_SCHEMA = 'koa-mysql'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWTABLES'
  }
]
[2023-02-21T15:34:24.594] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_logins`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_logins', singular: 'log_login' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:34:24.595] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `log_operations`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'log_operations', singular: 'log_operation' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:34:24.597] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_users`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_users', singular: 'system_user' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:34:24.598] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_roles', singular: 'system_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:34:24.599] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_menus', singular: 'system_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:34:24.601] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_depts`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_depts', singular: 'system_dept' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:34:24.602] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_user_roles`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_user_roles', singular: 'system_user_role' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '用户角色表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
[2023-02-21T15:34:24.604] [INFO] db - [
  'Executing (default): SHOW INDEX FROM `system_role_menus`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: true,
    paranoid: true,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: { hiddenAttr: [Object] },
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'system_role_menus', singular: 'system_role_menu' },
    omitNull: false,
    charset: 'utf8',
    dialectOptions: { collate: 'utf8_general_ci' },
    createdAt: 'create_time',
    updatedAt: 'update_time',
    deletedAt: 'delete_time',
    comment: '角色菜单关联表',
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    type: 'SHOWINDEXES'
  }
]
